{"version":3,"file":"static/js/1218.e71dcf91.chunk.js","mappings":"wJAGA,MCAMA,EAAWC,SAASC,cAAc,YACxCF,EAASG,UDHE,iyCCOJ,MAAMC,UAAwBC,YAInCC,WAAAA,GACEC,QAEAC,KAAKC,YAAcD,KAAKE,aAAa,CAAEC,KAAM,SAC7CH,KAAKC,YAAYG,OAAOZ,EAASa,QAAQC,WAAU,IACnDN,KAAKO,QAAUP,KAAKC,YAAYO,cAAc,eAC9CR,KAAKS,SAAWT,KAAKC,YAAYO,cAAc,eAC/CR,KAAKU,OAASV,KAAKC,YAAYO,cAAc,eAC7CR,KAAKW,WAAaX,KAAKC,YAAYO,cAAc,mBACjDR,KAAKY,cAAgBZ,KAAKC,YAAYO,cAAc,oBACpDR,KAAKa,eAAiBb,KAAKC,YAAYO,cAAc,eACvD,CAOAM,IAAAA,CAAMC,GACJf,KAAKgB,aAAa,YAAaD,EAAQE,EAAE,cACzCjB,KAAKgB,aAAa,gBAAiBD,EAAQE,EAAE,kBAC7CjB,KAAKgB,aAAa,yBAA0BD,EAAQE,EAAE,sCACtDjB,KAAKgB,aAAa,+BAAgCD,EAAQE,EAAE,iCAC5DjB,KAAKgB,aAAa,wBAAyBD,EAAQE,EAAE,0BACrDjB,KAAKgB,aAAa,iCAAkCD,EAAQE,EAAE,mCAC9DjB,KAAKgB,aAAa,6BAA8BD,EAAQE,EAAE,+BAC1DjB,KAAKgB,aAAa,mCAAoCD,EAAQE,EAAE,oCAClE,CAMA,6BAAWC,GACT,MAAO,CAAC,SAAU,UAAW,YAAa,gBAAiB,yBAA0B,+BAAgC,6BAA8B,mCAAoC,wBAAyB,iCAClN,CASAC,wBAAAA,CAA0BC,EAAMC,EAAUC,GACxC,IAAIC,EACJ,OAAQH,GACN,IAAK,SACc,SAAbE,EACFtB,KAAKO,QAAQiB,OAEbxB,KAAKO,QAAQkB,QAEf,MACF,IAAK,UAEDzB,KAAKY,cAAcc,QAAQ,GAAGC,SADf,SAAbL,EAKJ,MACF,IAAK,YACHtB,KAAKU,OAAOkB,YAAcN,EAC1B,MACF,IAAK,gBACHtB,KAAKW,WAAWiB,YAAcN,EAC9B,MACF,IAAK,yBACHC,EAAOvB,KAAKC,YAAYO,cAAc,qBACtCe,EAAKK,YAAcN,EACnB,MACF,IAAK,+BACHC,EAAOvB,KAAKC,YAAYO,cAAc,oBACtCe,EAAKK,YAAcN,EACnB,MACF,IAAK,wBACHC,EAAOvB,KAAKC,YAAYO,cAAc,cACtCe,EAAKK,YAAcN,EACnB,MACF,IAAK,iCACHC,EAAOvB,KAAKC,YAAYO,cAAc,qBACtCe,EAAKK,YAAcN,EACnB,MACF,IAAK,6BACHC,EAAOvB,KAAKC,YAAYO,cAAc,sBACtCe,EAAKM,QAAQP,GACb,MACF,IAAK,mCACHC,EAAOvB,KAAKC,YAAYO,cAAc,sBACtCe,EAAKP,aAAa,QAASM,GAMjC,CAMA,UAAIQ,GACF,OAAO9B,KAAK+B,aAAa,SAC3B,CAMA,UAAID,CAAQE,GACVhC,KAAKgB,aAAa,SAAUgB,EAC9B,CAMAC,iBAAAA,GACE,MAAMC,EAAkBA,CAACC,EAAGC,KAC1B,MAAMC,EAAe,IAAIC,YAAY,SACnC,CACEC,OAAQ,CACNC,QAASJ,EACTK,OAAQzC,KAAKY,cAAcoB,MAC3BU,SAAU1C,KAAKa,eAAe8B,WAGpC3C,KAAK4C,cAAcP,EAAa,EAElCQ,UAAUC,OAAO9C,KAAKU,QAASqC,GAAQb,EAAgBa,EAAK,QAC5DF,UAAUC,OAAO9C,KAAKW,YAAaoC,GAAQb,EAAgBa,EAAK,WAClE,EAIFC,eAAeC,OAAO,oBAAqBrD,E","sources":["svgedit/editor/extensions/ext-storage/storageDialog.html","svgedit/editor/extensions/ext-storage/storageDialog.js"],"sourcesContent":["// Module\nvar code = \"<style>#dialog_content{margin:10px 10px 5px 10px;background:#ddd;overflow:auto;text-align:left;border:1px solid #5a6162}#dialog_content label,#dialog_content p,#dialog_content select{margin:10px;line-height:1.3em}#dialog_container{font-family:Verdana;text-align:center;left:50%;top:50%;max-width:440px;z-index:50001;background:#5a6162;border:1px outset #777;font-family:Verdana,Helvetica,sans-serif;font-size:.8em}#dialog_container,#dialog_content{border-radius:5px;-moz-border-radius:5px;-webkit-border-radius:5px}#dialog_buttons input[type=text]{width:90%;display:block;margin:0 0 5px 11px}#dialog_buttons input[type=button]{margin:0 1em}</style> <elix-dialog id=\\\"dialog_box\\\" aria-label=\\\"SVG-Edit storage preferences\\\" closed> <div class=\\\"overlay\\\"></div> <div id=\\\"dialog_container\\\"> <div id=\\\"dialog_content\\\"> <p id=\\\"notificationNote\\\"> </p> <select id=\\\"se-storage-pref\\\"> <option value=\\\"prefsAndContent\\\" id=\\\"prefsAndContent\\\"></option> <option value=\\\"prefsOnly\\\" id=\\\"prefsOnly\\\"></option> <option value=\\\"noPrefsOrContent\\\" id=\\\"noPrefsOrContent\\\"></option> </select> <label title=\\\"\\\" id=\\\"se-remember-title\\\"> <input type=\\\"checkbox\\\" id=\\\"se-remember\\\" value=\\\"\\\" checked=\\\"checked\\\"> </label> </div> <div id=\\\"dialog_buttons\\\"> <button id=\\\"storage_ok\\\"></button> <button id=\\\"storage_cancel\\\"></button> </div> </div> </elix-dialog>\";\n// Exports\nexport default code;","/* globals svgEditor */\nimport storageDialogHTML from './storageDialog.html'\n\nconst template = document.createElement('template')\ntemplate.innerHTML = storageDialogHTML\n/**\n * @class SeStorageDialog\n */\nexport class SeStorageDialog extends HTMLElement {\n  /**\n    * @function constructor\n    */\n  constructor () {\n    super()\n    // create the shadowDom and insert the template\n    this._shadowRoot = this.attachShadow({ mode: 'open' })\n    this._shadowRoot.append(template.content.cloneNode(true))\n    this.$dialog = this._shadowRoot.querySelector('#dialog_box')\n    this.$storage = this._shadowRoot.querySelector('#js-storage')\n    this.$okBtn = this._shadowRoot.querySelector('#storage_ok')\n    this.$cancelBtn = this._shadowRoot.querySelector('#storage_cancel')\n    this.$storageInput = this._shadowRoot.querySelector('#se-storage-pref')\n    this.$rememberInput = this._shadowRoot.querySelector('#se-remember')\n  }\n\n  /**\n   * @function init\n   * @param {any} name\n   * @returns {void}\n   */\n  init (i18next) {\n    this.setAttribute('common-ok', i18next.t('common.ok'))\n    this.setAttribute('common-cancel', i18next.t('common.cancel'))\n    this.setAttribute('notify-editor_pref_msg', i18next.t('notification.editorPreferencesMsg'))\n    this.setAttribute('properties-prefs_and_content', i18next.t('properties.prefs_and_content'))\n    this.setAttribute('properties-prefs_only', i18next.t('properties.prefs_only'))\n    this.setAttribute('properties-no_prefs_or_content', i18next.t('properties.no_prefs_or_content'))\n    this.setAttribute('tools-remember_this_choice', i18next.t('tools.remember_this_choice'))\n    this.setAttribute('tools-remember_this_choice_title', i18next.t('tools.remember_this_choice_title'))\n  }\n\n  /**\n   * @function observedAttributes\n   * @returns {any} observed\n   */\n  static get observedAttributes () {\n    return ['dialog', 'storage', 'common-ok', 'common-cancel', 'notify-editor_pref_msg', 'properties-prefs_and_content', 'tools-remember_this_choice', 'tools-remember_this_choice_title', 'properties-prefs_only', 'properties-no_prefs_or_content']\n  }\n\n  /**\n   * @function attributeChangedCallback\n   * @param {string} name\n   * @param {string} oldValue\n   * @param {string} newValue\n   * @returns {void}\n   */\n  attributeChangedCallback (name, oldValue, newValue) {\n    let node\n    switch (name) {\n      case 'dialog':\n        if (newValue === 'open') {\n          this.$dialog.open()\n        } else {\n          this.$dialog.close()\n        }\n        break\n      case 'storage':\n        if (newValue === 'true') {\n          this.$storageInput.options[0].disabled = false\n        } else {\n          this.$storageInput.options[0].disabled = true\n        }\n        break\n      case 'common-ok':\n        this.$okBtn.textContent = newValue\n        break\n      case 'common-cancel':\n        this.$cancelBtn.textContent = newValue\n        break\n      case 'notify-editor_pref_msg':\n        node = this._shadowRoot.querySelector('#notificationNote')\n        node.textContent = newValue\n        break\n      case 'properties-prefs_and_content':\n        node = this._shadowRoot.querySelector('#prefsAndContent')\n        node.textContent = newValue\n        break\n      case 'properties-prefs_only':\n        node = this._shadowRoot.querySelector('#prefsOnly')\n        node.textContent = newValue\n        break\n      case 'properties-no_prefs_or_content':\n        node = this._shadowRoot.querySelector('#noPrefsOrContent')\n        node.textContent = newValue\n        break\n      case 'tools-remember_this_choice':\n        node = this._shadowRoot.querySelector('#se-remember-title')\n        node.prepend(newValue)\n        break\n      case 'tools-remember_this_choice_title':\n        node = this._shadowRoot.querySelector('#se-remember-title')\n        node.setAttribute('title', newValue)\n        break\n      default:\n        // super.attributeChangedCallback(name, oldValue, newValue);\n        break\n    }\n  }\n\n  /**\n   * @function get\n   * @returns {any}\n   */\n  get dialog () {\n    return this.getAttribute('dialog')\n  }\n\n  /**\n   * @function set\n   * @returns {void}\n   */\n  set dialog (value) {\n    this.setAttribute('dialog', value)\n  }\n\n  /**\n   * @function connectedCallback\n   * @returns {void}\n   */\n  connectedCallback () {\n    const onSubmitHandler = (e, action) => {\n      const triggerEvent = new CustomEvent('change',\n        {\n          detail: {\n            trigger: action,\n            select: this.$storageInput.value,\n            checkbox: this.$rememberInput.checked\n          }\n        })\n      this.dispatchEvent(triggerEvent)\n    }\n    svgEditor.$click(this.$okBtn, (evt) => onSubmitHandler(evt, 'ok'))\n    svgEditor.$click(this.$cancelBtn, (evt) => onSubmitHandler(evt, 'cancel'))\n  }\n}\n\n// Register\ncustomElements.define('se-storage-dialog', SeStorageDialog)\n"],"names":["template","document","createElement","innerHTML","SeStorageDialog","HTMLElement","constructor","super","this","_shadowRoot","attachShadow","mode","append","content","cloneNode","$dialog","querySelector","$storage","$okBtn","$cancelBtn","$storageInput","$rememberInput","init","i18next","setAttribute","t","observedAttributes","attributeChangedCallback","name","oldValue","newValue","node","open","close","options","disabled","textContent","prepend","dialog","getAttribute","value","connectedCallback","onSubmitHandler","e","action","triggerEvent","CustomEvent","detail","trigger","select","checkbox","checked","dispatchEvent","svgEditor","$click","evt","customElements","define"],"sourceRoot":""}