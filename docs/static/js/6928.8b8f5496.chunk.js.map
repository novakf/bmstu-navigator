{"version":3,"file":"static/js/6928.8b8f5496.chunk.js","mappings":";gJAYA,MAAMA,EAAO,UAcb,GACEA,OACA,UAAMC,GACJ,MAAMC,EAAYC,WAfWC,eAAgBF,GAC/C,IAAIG,EACJ,MAAMC,EAAOJ,EAAUK,UAAUC,KAAK,QACtC,IACEH,QAA0B,QAAO,KAADI,OAAaH,EAAI,OACnD,CAAE,MAAOI,GACPC,QAAQC,KAAK,wBAADH,OAAyBH,EAAI,UAAAG,OAAST,EAAI,kBACtDK,QAA0B,8BAC5B,CACAH,EAAUW,QAAQC,kBAAkBR,EAAMN,EAAMK,EAAkBU,QACpE,CAMUC,CAAyBd,GAC/B,MAAM,UACJe,GACEf,GACE,IAAEgB,EAAG,OAAEC,GAAWF,EAIxB,MAAO,CACLjB,KAAME,EAAUW,QAAQO,EAAE,GAADX,OAAIT,EAAI,UACjCqB,QAAAA,GACE,MAAMC,EAAM,GAAAb,OAAMT,EAAI,oBAEhBuB,EAAiBC,SAASC,cAAc,YAR9BC,IAACC,EAAeC,EAShCL,EAAeM,UAAS,gDAAApB,OACaa,EAAM,8CAV1BK,EAYLT,EAAI,aAZgBU,EAYFL,EAAeO,QAAQC,WAAU,GAXjEJ,EAAcK,WAAWC,aAAaL,EAASD,EAAcO,aAY3Df,EAAOD,EAAI,gBAAgB,KACrBf,KAAKgC,UAAUC,gBAAgB,gBACjCnB,EAAUoB,QAAQ,cACpB,GAEJ,EACAC,SAAAA,GACE,GAA4B,gBAAxBrB,EAAUsB,UAEZ,OADArC,EAAUsC,YAAW,GACd,CACLC,SAAS,EAIf,EACAC,OAAAA,GACE,GAA4B,gBAAxBzB,EAAUsB,UAEZ,OADArC,EAAUsC,YAAW,GACd,CACLG,MAAM,EACNC,QAAS,KAIf,EAEJ,mBC1EF,IAAIC,EAAM,CACT,UAAW,CACV,KACA,MAED,UAAW,CACV,KACA,MAED,UAAW,CACV,KACA,MAED,UAAW,CACV,KACA,MAED,aAAc,CACb,KACA,OAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,KAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,CAAC,IAIT,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,IAClCJ,EAAoBS,IAE7B,CACAX,EAAoBY,KAAO,IAAOC,OAAOD,KAAKb,GAC9CC,EAAoBW,GAAK,KACzBG,EAAOC,QAAUf","sources":["svgedit/editor/extensions/ext-panning/ext-panning.js","svgedit/editor/extensions/ext-panning/locale|lazy|/^/.//.*/.js$/|groupOptions: {}|namespace object"],"sourcesContent":["/**\n * @file ext-panning.js\n *\n * @license MIT\n *\n * @copyright 2013 Luis Aguirre\n *\n */\n/*\n  This is a very basic SVG-Edit extension to let tablet/mobile devices pan without problem\n*/\n\nconst name = 'panning'\n\nconst loadExtensionTranslation = async function (svgEditor) {\n  let translationModule\n  const lang = svgEditor.configObj.pref('lang')\n  try {\n    translationModule = await import(`./locale/${lang}.js`)\n  } catch (_error) {\n    console.warn(`Missing translation (${lang}) for ${name} - using 'en'`)\n    translationModule = await import('./locale/en.js')\n  }\n  svgEditor.i18next.addResourceBundle(lang, name, translationModule.default)\n}\n\nexport default {\n  name,\n  async init () {\n    const svgEditor = this\n    await loadExtensionTranslation(svgEditor)\n    const {\n      svgCanvas\n    } = svgEditor\n    const { $id, $click } = svgCanvas\n    const insertAfter = (referenceNode, newNode) => {\n      referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling)\n    }\n    return {\n      name: svgEditor.i18next.t(`${name}:name`),\n      callback () {\n        const btitle = `${name}:buttons.0.title`\n        // Add the button and its handler(s)\n        const buttonTemplate = document.createElement('template')\n        buttonTemplate.innerHTML = `\n        <se-button id=\"ext-panning\" title=\"${btitle}\" src=\"panning.svg\"></se-button>\n        `\n        insertAfter($id('tool_zoom'), buttonTemplate.content.cloneNode(true))\n        $click($id('ext-panning'), () => {\n          if (this.leftPanel.updateLeftPanel('ext-panning')) {\n            svgCanvas.setMode('ext-panning')\n          }\n        })\n      },\n      mouseDown () {\n        if (svgCanvas.getMode() === 'ext-panning') {\n          svgEditor.setPanning(true)\n          return {\n            started: true\n          }\n        }\n        return undefined\n      },\n      mouseUp () {\n        if (svgCanvas.getMode() === 'ext-panning') {\n          svgEditor.setPanning(false)\n          return {\n            keep: false,\n            element: null\n          }\n        }\n        return undefined\n      }\n    }\n  }\n}\n","var map = {\n\t\"./en.js\": [\n\t\t2075,\n\t\t2075\n\t],\n\t\"./sv.js\": [\n\t\t8442,\n\t\t8442\n\t],\n\t\"./tr.js\": [\n\t\t4468,\n\t\t4468\n\t],\n\t\"./uk.js\": [\n\t\t2339,\n\t\t2339\n\t],\n\t\"./zh-CN.js\": [\n\t\t8842,\n\t\t8842\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 6701;\nmodule.exports = webpackAsyncContext;"],"names":["name","init","svgEditor","this","async","translationModule","lang","configObj","pref","concat","_error","console","warn","i18next","addResourceBundle","default","loadExtensionTranslation","svgCanvas","$id","$click","t","callback","btitle","buttonTemplate","document","createElement","insertAfter","referenceNode","newNode","innerHTML","content","cloneNode","parentNode","insertBefore","nextSibling","leftPanel","updateLeftPanel","setMode","mouseDown","getMode","setPanning","started","mouseUp","keep","element","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports"],"sourceRoot":""}