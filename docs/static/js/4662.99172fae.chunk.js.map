{"version":3,"file":"static/js/4662.99172fae.chunk.js","mappings":"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","sources":["../node_modules/elix/define/ListComboBox.js","../node_modules/elix/src/base/AriaListMixin.js","../node_modules/elix/src/base/ComboBox.js","../node_modules/elix/src/base/CursorSelectMixin.js","../node_modules/elix/src/base/DelegateCursorMixin.js","../node_modules/elix/src/base/DelegateItemsMixin.js","../node_modules/elix/src/base/Hidden.js","../node_modules/elix/src/base/ListBox.js","../node_modules/elix/src/base/ListComboBox.js","../node_modules/elix/src/base/SelectedTextAPIMixin.js","../node_modules/elix/src/base/SelectedValueAPIMixin.js","../node_modules/elix/src/base/SingleSelectAPIMixin.js","../node_modules/elix/src/base/weekData.js","../node_modules/elix/src/base/calendar.js","../node_modules/elix/src/base/CalendarElementMixin.js","../node_modules/elix/src/base/DarkModeMixin.js","../node_modules/elix/src/base/EffectMixin.js","../node_modules/elix/src/base/ItemsMultiSelectMixin.js","../node_modules/elix/src/base/PageNumbersMixin.js","../node_modules/elix/src/plain/PlainArrowDirectionButton.js","../node_modules/elix/src/plain/PlainArrowDirectionMixin.js","../node_modules/elix/src/base/AutoCompleteInput.js","../node_modules/elix/src/base/AutoCompleteComboBox.js","../node_modules/elix/src/plain/PlainAutoCompleteInput.js","../node_modules/elix/src/plain/PlainAutoCompleteComboBox.js","../node_modules/elix/src/base/AutoSizeTextarea.js","../node_modules/elix/src/base/CalendarDay.js","../node_modules/elix/src/plain/PlainCalendarDay.js","../node_modules/elix/src/base/SelectableButton.js","../node_modules/elix/src/base/CalendarDayButton.js","../node_modules/elix/src/plain/PlainCalendarDayButton.js","../node_modules/elix/src/base/CalendarDayNamesHeader.js","../node_modules/elix/src/plain/PlainCalendarDayNamesHeader.js","../node_modules/elix/src/base/CalendarDays.js","../node_modules/elix/src/plain/PlainCalendarDays.js","../node_modules/elix/src/base/CalendarMonthYearHeader.js","../node_modules/elix/src/base/CalendarMonth.js","../node_modules/elix/src/plain/PlainCalendarMonthYearHeader.js","../node_modules/elix/src/plain/PlainCalendarMonth.js","../node_modules/elix/src/base/ArrowDirectionMixin.js","../node_modules/elix/src/base/CalendarMonthNavigator.js","../node_modules/elix/src/plain/PlainCalendarMonthNavigator.js","../node_modules/elix/src/base/Modes.js","../node_modules/elix/src/base/Explorer.js","../node_modules/elix/src/base/fractionalSelection.js","../node_modules/elix/src/base/SlidingStage.js","../node_modules/elix/src/base/SwipeDirectionMixin.js","../node_modules/elix/src/base/TouchSwipeMixin.js","../node_modules/elix/src/base/TrackpadSwipeMixin.js","../node_modules/elix/src/base/Carousel.js","../node_modules/elix/src/base/ResizeMixin.js","../node_modules/elix/src/base/CenteredStrip.js","../node_modules/elix/src/plain/PlainCenteredStripOpacity.js","../node_modules/elix/src/plain/PlainCarouselMixin.js","../node_modules/elix/src/plain/PlainPageDot.js","../node_modules/elix/src/plain/PlainCarousel.js","../node_modules/elix/src/base/TransitionEffectMixin.js","../node_modules/elix/src/base/CrossfadeStage.js","../node_modules/elix/src/base/TimerCursorMixin.js","../node_modules/elix/src/base/CarouselSlideshow.js","../node_modules/elix/src/plain/PlainCarouselSlideshow.js","../node_modules/elix/src/base/CarouselWithThumbnails.js","../node_modules/elix/src/plain/PlainCarouselWithThumbnails.js","../node_modules/elix/src/plain/PlainCenteredStripHighlight.js","../node_modules/elix/src/base/CheckListItem.js","../node_modules/elix/src/plain/PlainCheckListItem.js","../node_modules/elix/src/plain/PlainComboBox.js","../node_modules/elix/src/base/DateComboBox.js","../node_modules/elix/src/plain/PlainDateComboBox.js","../node_modules/elix/src/base/DateInput.js","../node_modules/elix/src/plain/PlainDateInput.js","../node_modules/elix/src/base/Drawer.js","../node_modules/elix/src/plain/PlainDrawerMixin.js","../node_modules/elix/src/plain/PlainDrawer.js","../node_modules/elix/src/base/DrawerWithGrip.js","../node_modules/elix/src/plain/PlainDrawerWithGrip.js","../node_modules/elix/src/base/DropdownList.js","../node_modules/elix/src/base/OptionList.js","../node_modules/elix/src/plain/PlainOptionList.js","../node_modules/elix/src/plain/PlainDropdownList.js","../node_modules/elix/src/plain/PlainExpandCollapseToggle.js","../node_modules/elix/src/base/ExpandablePanel.js","../node_modules/elix/src/base/ExpandableSection.js","../node_modules/elix/src/plain/PlainExpandableSection.js","../node_modules/elix/src/base/FilterListBox.js","../node_modules/elix/src/base/FilterComboBox.js","../node_modules/elix/src/plain/PlainFilterListBox.js","../node_modules/elix/src/plain/PlainFilterComboBox.js","../node_modules/elix/src/base/HamburgerMenuButton.js","../node_modules/elix/src/plain/PlainHamburgerMenuButton.js","../node_modules/elix/src/base/ListExplorer.js","../node_modules/elix/src/plain/PlainListExplorer.js","../node_modules/elix/src/base/ListWithSearch.js","../node_modules/elix/src/plain/PlainListWithSearch.js","../node_modules/elix/src/base/MenuSeparator.js","../node_modules/elix/src/plain/PlainMenuSeparator.js","../node_modules/elix/src/base/MultiSelectListBox.js","../node_modules/elix/src/base/MultiSelectAPIMixin.js","../node_modules/elix/src/base/MultiSelectToggleMixin.js","../node_modules/elix/src/base/MultiSelectValueAPIMixin.js","../node_modules/elix/src/plain/PlainMultiSelectListBox.js","../node_modules/elix/src/base/NumberSpinBox.js","../node_modules/elix/src/plain/PlainNumberSpinBox.js","../node_modules/elix/src/base/Option.js","../node_modules/elix/src/plain/PlainOption.js","../node_modules/elix/src/plain/PlainPopupButton.js","../node_modules/elix/src/base/ProgressSpinner.js","../node_modules/elix/src/plain/PlainProgressSpinner.js","../node_modules/elix/src/base/PullToRefresh.js","../node_modules/elix/src/plain/PlainPullToRefresh.js","../node_modules/elix/src/base/Slideshow.js","../node_modules/elix/src/base/PlayControlsMixin.js","../node_modules/elix/src/base/SlideshowWithPlayControls.js","../node_modules/elix/src/plain/PlainPlayControlsMixin.js","../node_modules/elix/src/plain/PlainSlideshowWithPlayControls.js","../node_modules/elix/src/base/SlidingPages.js","../node_modules/elix/src/plain/PlainSpinBox.js","../node_modules/elix/src/base/TabButton.js","../node_modules/elix/src/plain/PlainTabButton.js","../node_modules/elix/src/base/TabStrip.js","../node_modules/elix/src/plain/PlainTabStrip.js","../node_modules/elix/src/base/Tabs.js","../node_modules/elix/src/plain/PlainTabs.js","../node_modules/elix/src/base/Toast.js","../node_modules/elix/src/plain/PlainToast.js","../node_modules/elix/src/base/TooltipButton.js","../node_modules/elix/src/plain/PlainTooltipButton.js","../node_modules/elix/src/elix.js","../node_modules/elix/src/plain/PlainComboBoxMixin.js","../node_modules/elix/src/plain/PlainListBox.js","../node_modules/elix/src/plain/PlainListBoxMixin.js","../node_modules/elix/src/plain/PlainListComboBox.js"],"sourcesContent":["import PlainListComboBox from \"../src/plain/PlainListComboBox.js\";\nexport default class ElixListComboBox extends PlainListComboBox {}\ncustomElements.define(\"elix-list-combo-box\", ElixListComboBox);\n","import ReactiveElement from \"../core/ReactiveElement.js\"; // eslint-disable-line no-unused-vars\nimport { defaultAriaRole, ensureId } from \"./accessibility.js\";\nimport {\n  defaultState,\n  render,\n  rendering,\n  setState,\n  state,\n} from \"./internal.js\";\n\n/**\n * Exposes a list's currently-selected item to assistive technologies.\n *\n * Handling ARIA selection state properly is actually quite complex:\n *\n * * The items in the list need to be indicated as possible items via an ARIA\n *   `role` attribute value such as \"option\".\n * * The selected item(s) need to be marked as selected by setting the item's\n *   `aria-selected` attribute to true *and* the other items need be marked as\n *   *not* selected by setting `aria-selected` to false.\n * * The outermost element with the keyboard focus needs to have attributes\n *   set on it so that the current item is knowable at the list level via the\n *   `aria-activedescendant` attribute.\n * * Use of `aria-activedescendant` in turn requires that all items in the\n *   list have ID attributes assigned to them.\n * * If the list supports mutli-selection, `aria-multiselectable` must be\n *   set to \"true\" on the host.\n *\n * This mixin tries to address all of the above requirements. To that end,\n * this mixin will assign generated IDs to any item that doesn't already have\n * an ID.\n *\n * ARIA relies on elements to provide `role` attributes. This mixin will apply\n * a default role of \"listbox\" on the outer list if it doesn't already have an\n * explicit role. Similarly, this mixin will apply a default role of \"option\"\n * to any list item that does not already have a role specified.\n *\n * This mixin expects the component to define a `currentIndex` state member to\n * indicate the current item. You can supply that yourself, or do so via\n * [ItemsCursorMixin](ItemsCursorMixin). For a multi-select list, you must also\n * define a `selectedItemFlags` state member, available via\n * [ItemsMultiSelectMixin](ItemsMultiSelectMixin).\n *\n * @module AriaListMixin\n * @param {Constructor<ReactiveElement>} Base\n */\nexport default function AriaListMixin(Base) {\n  // The class prototype added by the mixin.\n  class AriaList extends Base {\n    // @ts-ignore\n    get [defaultState]() {\n      const base = super[defaultState];\n      return Object.assign(base, {\n        itemRole: base.itemRole || \"option\",\n        role: base.role || \"listbox\",\n      });\n    }\n\n    get itemRole() {\n      return this[state].itemRole;\n    }\n    set itemRole(itemRole) {\n      this[setState]({ itemRole });\n    }\n\n    [render](/** @type {ChangedFlags} */ changed) {\n      if (super[render]) {\n        super[render](changed);\n      }\n\n      const { itemRole } = this[state];\n      /** @type {ListItemElement[]} */ const items = this[state].items;\n\n      // Give each item an ID.\n      if (changed.items && items) {\n        items.forEach((item) => {\n          if (!item.id) {\n            item.id = ensureId(item);\n          }\n        });\n      }\n\n      // Give each item a role.\n      if ((changed.items || changed.itemRole) && items) {\n        items.forEach((item) => {\n          if (itemRole === defaultAriaRole[item.localName]) {\n            item.removeAttribute(\"role\");\n          } else {\n            item.setAttribute(\"role\", itemRole);\n          }\n        });\n      }\n\n      // Reflect the selected state to each item.\n      if (changed.items || changed.selectedIndex || changed.selectedItemFlags) {\n        // Does the list support multi-selection?\n        const { selectedItemFlags, selectedIndex } = this[state];\n        if (items) {\n          items.forEach((item, index) => {\n            const selected = selectedItemFlags\n              ? selectedItemFlags[index] // Multi-select\n              : index === selectedIndex; // Single-select\n            item.setAttribute(\"aria-selected\", selected.toString());\n          });\n        }\n      }\n\n      // Indicate on the host that the current item is active.\n      if (changed.items || changed.selectedIndex) {\n        const { selectedIndex } = this[state];\n        const selectedItem =\n          selectedIndex >= 0 && items ? items[selectedIndex] : null;\n        if (selectedItem) {\n          if (!selectedItem.id) {\n            selectedItem.id = ensureId(selectedItem);\n          }\n          this.setAttribute(\"aria-activedescendant\", selectedItem.id);\n        } else {\n          this.removeAttribute(\"aria-activedescendant\");\n        }\n      }\n\n      if (changed.selectedItemFlags) {\n        // Let ARIA know this is a multi-select list box.\n        if (this[state].selectedItemFlags) {\n          this.setAttribute(\"aria-multiselectable\", \"true\");\n        } else {\n          this.removeAttribute(\"aria-multiselectable\");\n        }\n      }\n\n      // Let ARIA know list orientation.\n      if (changed.orientation) {\n        const { orientation } = this[state];\n        this.setAttribute(\"aria-orientation\", orientation);\n      }\n\n      // Apply top-level role.\n      if (changed.role) {\n        const { role } = this[state];\n        this.setAttribute(\"role\", role);\n      }\n    }\n\n    // Setting the standard role attribute will invoke this property setter,\n    // which will allow us to update our state.\n    get role() {\n      return super.role;\n    }\n    set role(role) {\n      super.role = role;\n      if (!this[rendering]) {\n        this[setState]({ role });\n      }\n    }\n  }\n\n  return AriaList;\n}\n","import { forwardFocus } from \"../core/dom.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport { transmute } from \"../core/template.js\";\nimport DelegateFocusMixin from \"./DelegateFocusMixin.js\";\nimport DelegateInputLabelMixin from \"./DelegateInputLabelMixin.js\";\nimport DelegateInputSelectionMixin from \"./DelegateInputSelectionMixin.js\";\nimport FocusVisibleMixin from \"./FocusVisibleMixin.js\";\nimport FormElementMixin from \"./FormElementMixin.js\";\nimport Hidden from \"./Hidden.js\";\nimport {\n  defaultState,\n  ids,\n  inputDelegate,\n  keydown,\n  raiseChangeEvents,\n  render,\n  rendered,\n  setState,\n  shadowRoot,\n  state,\n  stateEffects,\n  template,\n} from \"./internal.js\";\nimport KeyboardMixin from \"./KeyboardMixin.js\";\nimport PopupDragSelectMixin from \"./PopupDragSelectMixin.js\";\nimport PopupSource from \"./PopupSource.js\";\nimport PopupToggleMixin from \"./PopupToggleMixin.js\";\n\nconst elixdebugpopup =\n  new URLSearchParams(location.search).get(\"elixdebugpopup\") === \"true\";\n\nconst Base = DelegateFocusMixin(\n  DelegateInputLabelMixin(\n    DelegateInputSelectionMixin(\n      FocusVisibleMixin(\n        FormElementMixin(\n          KeyboardMixin(PopupDragSelectMixin(PopupToggleMixin(PopupSource)))\n        )\n      )\n    )\n  )\n);\n\n/**\n * A text input paired with a popup that can be used as an alternative to typing\n *\n * @inherits PopupSource\n * @mixes DelegateFocusMixin\n * @mixes DelegateInputLabelMixin\n * @mixes DelegateInputSelectionMixin\n * @mixes FocusVisibleMixin\n * @mixes FormElementMixin\n * @mixes KeyboardMixin\n * @mixes PopupDragSelectMixin\n * @mixes PopupToggleMixin\n * @part {Hidden} backdrop\n * @part {input} input - the text input element\n * @part {div} source\n */\nclass ComboBox extends Base {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      ariaHasPopup: null,\n      confirmedValue: \"\",\n      focused: false,\n      inputPartType: \"input\",\n      orientation: \"vertical\",\n      placeholder: \"\",\n      selectText: false,\n      value: \"\",\n    });\n  }\n\n  get [inputDelegate]() {\n    return this[ids].input;\n  }\n\n  /**\n   * The combo box's input element.\n   *\n   * @type {Element|null}\n   */\n  get input() {\n    return this[shadowRoot] ? this[ids].input : null;\n  }\n\n  /**\n   * The class or tag used to create the `input` part into which the\n   * user can enter text.\n   *\n   * @type {PartDescriptor}\n   * @default 'input'\n   */\n  get inputPartType() {\n    return this[state].inputPartType;\n  }\n  set inputPartType(inputPartType) {\n    this[setState]({ inputPartType });\n  }\n\n  [keydown](/** @type {KeyboardEvent} */ event) {\n    let handled;\n\n    switch (event.key) {\n      // Up/Down arrow keys and Page Up/Page Down open the popup.\n      case \"ArrowDown\":\n      case \"ArrowUp\":\n      case \"PageDown\":\n      case \"PageUp\":\n        if (this.closed) {\n          this.open();\n          handled = true;\n        }\n        break;\n\n      // Enter opens popup.\n      case \"Enter\":\n        if (!this.opened) {\n          this.open();\n          handled = true;\n        }\n        break;\n\n      // Escape cancels popup.\n      case \"Escape\":\n        this.close({ canceled: \"Escape\" });\n        handled = true;\n        break;\n\n      // On Windows, F4 is a standard keyboard shortcut to open or cancel a\n      // combo box.\n      case \"F4\":\n        if (this.opened) {\n          this.close({ canceled: \"F4\" });\n        } else {\n          this.open();\n        }\n        handled = true;\n        break;\n    }\n\n    // Prefer mixin result if it's defined, otherwise use base result.\n    return handled || (super[keydown] && super[keydown](event));\n  }\n\n  /**\n   * The prompt text shown in the input if it is empty.\n   *\n   * @type {string}\n   */\n  get placeholder() {\n    return this[state].placeholder;\n  }\n  set placeholder(placeholder) {\n    this[setState]({\n      placeholder: String(placeholder),\n    });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n\n    renderParts(this[shadowRoot], this[state], changed);\n\n    if (changed.inputPartType) {\n      this[ids].input.addEventListener(\"blur\", () => {\n        this[setState]({\n          focused: false,\n        });\n        // Don't close on blur if we're debugging popups.\n        if (!elixdebugpopup) {\n          // If we're open and lose focus, then close.\n          if (this.opened) {\n            this[raiseChangeEvents] = true;\n            this.close();\n            this[raiseChangeEvents] = false;\n          }\n        }\n      });\n\n      this[ids].input.addEventListener(\"focus\", () => {\n        this[raiseChangeEvents] = true;\n        this[setState]({\n          focused: true,\n        });\n        this[raiseChangeEvents] = false;\n      });\n\n      this[ids].input.addEventListener(\"input\", () => {\n        this[raiseChangeEvents] = true;\n        /** @type {any} */\n        const cast = this[ids].input;\n        const value = cast.value;\n        /** @type {PlainObject} */ const changes = {\n          value,\n          selectText: false,\n        };\n        if (this.closed && value > \"\") {\n          // If user types while popup is closed, implicitly open it.\n          changes.opened = true;\n        }\n        this[setState](changes);\n        this[raiseChangeEvents] = false;\n      });\n\n      this[ids].input.addEventListener(\"keydown\", () => {\n        this[raiseChangeEvents] = true;\n        this[setState]({\n          selectText: false,\n        });\n        this[raiseChangeEvents] = false;\n      });\n\n      // If the user clicks on the input and the popup is closed, open it.\n      this[ids].input.addEventListener(\"mousedown\", (event) => {\n        // Only process events for the main (usually left) button.\n        if (/** @type {MouseEvent} */ (event).button !== 0) {\n          return;\n        }\n        this[raiseChangeEvents] = true;\n        this[setState]({\n          selectText: false,\n        });\n        if (this.closed && !this.disabled) {\n          this.open();\n        }\n        this[raiseChangeEvents] = false;\n      });\n    }\n\n    // If input wants to know whether combo box is opened, let it know.\n    if (changed.opened || changed.inputPartType) {\n      /** @type {any} */ const input = this[ids].input;\n      if (\"opened\" in input) {\n        const { opened } = this[state];\n        input.opened = opened;\n      }\n    }\n\n    if (changed.popupTogglePartType) {\n      const popupToggle = this[ids].popupToggle;\n      const input = this[ids].input;\n      popupToggle.addEventListener(\"mousedown\", (event) => {\n        // Only process events for the main (usually left) button.\n        if (/** @type {MouseEvent} */ (event).button !== 0) {\n          return;\n        }\n        // Ignore mousedown if we're presently disabled.\n        if (this[state].disabled) {\n          event.preventDefault();\n          return;\n        }\n        this[raiseChangeEvents] = true;\n        if (this.opened) {\n          this[setState]({\n            closeResult: {\n              canceled: \"toggle\",\n            },\n          });\n        }\n        this.toggle();\n        this[raiseChangeEvents] = false;\n      });\n      if (popupToggle instanceof HTMLElement && input instanceof HTMLElement) {\n        // Forward focus for new toggle button.\n        forwardFocus(popupToggle, input);\n      }\n    }\n\n    if (changed.popupPartType) {\n      const popup = this[ids].popup;\n      /** @type {any} */ const cast = popup;\n\n      // Make popup not focusable.\n      popup.removeAttribute(\"tabindex\");\n\n      // Override popup's backdrop to hide it.\n      if (\"backdropPartType\" in popup) {\n        cast.backdropPartType = Hidden;\n      }\n      if (\"autoFocus\" in popup) {\n        cast.autoFocus = false;\n      }\n      if (\"closeOnWindowResize\" in popup) {\n        cast.closeOnWindowResize = false;\n      }\n    }\n\n    if (changed.disabled) {\n      const { disabled } = this[state];\n      /** @type {any} */ (this[ids].input).disabled = disabled;\n      /** @type {any} */ (this[ids].popupToggle).disabled = disabled;\n    }\n\n    if (changed.placeholder) {\n      const { placeholder } = this[state];\n      /** @type {any} */ (this[ids].input).placeholder = placeholder;\n    }\n\n    if (changed.value) {\n      const { value } = this[state];\n      /** @type {any} */ (this[ids].input).value = value;\n    }\n  }\n\n  [rendered](/** @type {ChangedFlags} */ changed) {\n    super[rendered](changed);\n    if (this[state].selectText) {\n      // Select the text in the input after giving the inner input a chance to render the value.\n      setTimeout(() => {\n        // Text selection might have been turned off in the interim;\n        // double-check that we still want to select text.\n        if (this[state].selectText) {\n          /** @type {any} */\n          const cast = this[ids].input;\n          const value = cast.value;\n          if (value > \"\") {\n            cast.selectionStart = 0;\n            cast.selectionEnd = cast.value.length;\n          }\n        }\n      });\n    }\n  }\n\n  [stateEffects](state, changed) {\n    const effects = super[stateEffects](state, changed);\n\n    // If the value changes while the popup is closed (or closing), consider the\n    // value to be confirmed. This confirmed value will be restored if the user\n    // later opens the popup and then cancels it. On the other hand, if the user\n    // is cancelling the popup, then restore the value from the most recent\n    // confirmed value.\n    if (changed.opened || changed.value) {\n      const { closeResult, opened } = state;\n      if (!opened) {\n        const canceled = closeResult && closeResult.canceled;\n        if (canceled) {\n          // Restore previous confirmed value.\n          Object.assign(effects, {\n            value: state.confirmedValue,\n          });\n        } else {\n          // Confirm current value.\n          Object.assign(effects, {\n            confirmedValue: state.value,\n          });\n        }\n      }\n    }\n\n    // Select text on closing.\n    // Exception: on mobile devices, leaving the text selected may show\n    // selection handles, which may suggest to the user that there's something\n    // more they should be doing with the text even though they're done with it.\n    // We therefore avoid leaving text selected if an on-screen keyboard is in\n    // use. Since we can't actually detect that, we use the absence of a\n    // fine-grained pointer (mouse) as a proxy for mobile.\n    if (changed.opened && !state.opened) {\n      const probablyMobile = matchMedia(\"(pointer: coarse)\").matches;\n      const selectText = !probablyMobile;\n      Object.assign(effects, { selectText });\n    }\n\n    return effects;\n  }\n\n  get [template]() {\n    const result = super[template];\n\n    // Put an input element and toggle in the source.\n    const sourceSlot = result.content.querySelector('slot[name=\"source\"]');\n    if (sourceSlot) {\n      sourceSlot.replaceWith(fragmentFrom.html`\n        <input id=\"input\" part=\"input\"></input>\n      `);\n    }\n\n    renderParts(result.content, this[state]);\n\n    result.content.append(\n      fragmentFrom.html`\n        <style>\n          [part~=\"source\"] {\n            background-color: inherit;\n            display: inline-grid;\n            grid-template-columns: 1fr auto;\n            position: relative;\n          }\n\n          [part~=\"input\"] {\n            outline: none;\n          }\n        </style>\n      `\n    );\n\n    return result;\n  }\n\n  get value() {\n    return this[state].value;\n  }\n  set value(value) {\n    this[setState]({ value });\n  }\n}\n\n/**\n * Render parts for the template or an instance.\n *\n * @private\n * @param {DocumentFragment} root\n * @param {PlainObject} state\n * @param {ChangedFlags} [changed]\n */\nfunction renderParts(root, state, changed) {\n  if (!changed || changed.inputPartType) {\n    const { inputPartType } = state;\n    const input = root.getElementById(\"input\");\n    if (input) {\n      transmute(input, inputPartType);\n    }\n  }\n}\n\nexport default ComboBox;\n","import ReactiveElement from \"../core/ReactiveElement.js\"; // eslint-disable-line no-unused-vars\nimport { defaultState, stateEffects } from \"./internal.js\";\n\n/**\n * Keeps the current item and selected item in sync.\n *\n * This can be used to connect [ItemsCursorMixin](ItemsCursorMixin) with\n * [SingleSelectAPIMixin](SingleSelectAPIMixin).\n *\n * @module CursorSelectMixin\n * @param {Constructor<ReactiveElement>} Base\n */\nexport default function CursorSelectMixin(Base) {\n  // The class prototype added by the mixin.\n  return class CursorSelect extends Base {\n    // @ts-ignore\n    get [defaultState]() {\n      return Object.assign(super[defaultState] || {}, {\n        selectedIndex: -1,\n        selectedItem: null,\n      });\n    }\n\n    [stateEffects](state, changed) {\n      const effects = super[stateEffects]\n        ? super[stateEffects](state, changed)\n        : {};\n\n      if (changed.currentIndex) {\n        // Priority one: selected index tracks current index.\n        Object.assign(effects, {\n          selectedIndex: state.currentIndex,\n        });\n      } else if (changed.selectedIndex) {\n        // Priority two: current index tracks selected index.\n        // These priorities ensure that, both current index and selected index\n        // are changed, current index wins.\n        Object.assign(effects, {\n          currentIndex: state.selectedIndex,\n        });\n      }\n\n      // Same priorities as above.\n      if (changed.currentItem) {\n        Object.assign(effects, {\n          selectedItem: state.currentItem,\n        });\n      } else if (changed.selectedItem) {\n        Object.assign(effects, {\n          currentItem: state.selectedItem,\n        });\n      }\n\n      return effects;\n    }\n  };\n}\n","import ReactiveElement from \"../core/ReactiveElement.js\"; // eslint-disable-line no-unused-vars\nimport {\n  goFirst,\n  goLast,\n  goNext,\n  goPrevious,\n  itemsDelegate,\n  setState,\n} from \"./internal.js\";\n\n/**\n * has the effect of adding the component to the tab order in document order.\n *\n * @module DelegateCursorMixin\n * @param {Constructor<ReactiveElement>} Base\n */\nexport default function DelegateCursorMixin(Base) {\n  // The class prototype added by the mixin.\n  class DelegateCursor extends Base {\n    [goFirst]() {\n      return delegateCursorOperation(this, goFirst);\n    }\n\n    [goLast]() {\n      return delegateCursorOperation(this, goLast);\n    }\n\n    [goNext]() {\n      return delegateCursorOperation(this, goNext);\n    }\n\n    [goPrevious]() {\n      return delegateCursorOperation(this, goPrevious);\n    }\n  }\n\n  return DelegateCursor;\n}\n\nfunction delegateCursorOperation(element, operation) {\n  /** @type {any} */ const cast = element[itemsDelegate];\n  if (!cast[operation]) {\n    return false;\n  }\n\n  const changed = cast[operation]();\n  if (changed) {\n    const currentIndex = cast.currentIndex;\n    element[setState]({ currentIndex });\n  }\n\n  return changed;\n}\n","import ReactiveElement from \"../core/ReactiveElement.js\"; // eslint-disable-line no-unused-vars\nimport {\n  defaultState,\n  itemsDelegate,\n  render,\n  rendered,\n  setState,\n  state,\n} from \"./internal.js\";\n\n/** @type {any} */\nconst itemsChangedListenerKey = Symbol(\"itemsChangedListener\");\n/** @type {any} */\nconst previousItemsDelegateKey = Symbol(\"previousItemsDelegate\");\n/** @type {any} */\nconst currentIndexChangedListenerKey = Symbol(\"currentIndexChangedListener\");\n\n/**\n * Treats the items inside a shadow element as the component's own items.\n *\n * @module DelegateItemsMixin\n * @param {Constructor<ReactiveElement>} Base\n */\nexport default function DelegateItemsMixin(Base) {\n  // The class prototype added by the mixin.\n  class DelegateItems extends Base {\n    constructor() {\n      super();\n      // @ts-ignore\n      this[itemsChangedListenerKey] = (event) => {\n        /** @type {any} */\n        const cast = event.target;\n        const delegateItems = cast.items;\n        if (this[state].items !== delegateItems) {\n          this[setState]({\n            items: delegateItems,\n          });\n        }\n      };\n      // @ts-ignore\n      this[currentIndexChangedListenerKey] = (event) => {\n        /** @type {any} */\n        const cast = event;\n        const delegateCurrentIndex = cast.detail.currentIndex;\n        if (this[state].currentIndex !== delegateCurrentIndex) {\n          this[setState]({\n            currentIndex: delegateCurrentIndex,\n          });\n        }\n      };\n    }\n\n    // @ts-ignore\n    get [defaultState]() {\n      return Object.assign(super[defaultState] || {}, {\n        items: null,\n      });\n    }\n\n    /**\n     * The current set of items drawn from the element's current state.\n     *\n     * @returns {Element[]|null} the element's current items\n     */\n    get items() {\n      return this[state] ? this[state].items : null;\n    }\n\n    [render](/** @type {ChangedFlags} */ changed) {\n      if (super[render]) {\n        super[render](changed);\n      }\n\n      if (changed.currentIndex) {\n        if (typeof this[itemsDelegate] === \"undefined\") {\n          throw `To use DelegateItemsMixin, ${this.constructor.name} must define a getter for [itemsDelegate].`;\n        }\n        if (\"currentIndex\" in this[itemsDelegate]) {\n          this[itemsDelegate].currentIndex = this[state].currentIndex;\n        }\n      }\n    }\n\n    [rendered](/** @type {ChangedFlags} */ changed) {\n      if (super[rendered]) {\n        super[rendered](changed);\n      }\n\n      // If the delegate changed, wire up event handlers.\n      const previousItemsDelegate = this[previousItemsDelegateKey];\n      if (this[itemsDelegate] !== previousItemsDelegate) {\n        if (previousItemsDelegate) {\n          // Stop listening to events on previous delegate.\n          previousItemsDelegate.removeEventListener(\n            this[itemsChangedListenerKey]\n          );\n          previousItemsDelegate.removeEventListener(\n            this[currentIndexChangedListenerKey]\n          );\n        }\n        // Start listening to events on new delegate.\n        this[itemsDelegate].addEventListener(\n          \"itemschange\",\n          this[itemsChangedListenerKey]\n        );\n        this[itemsDelegate].addEventListener(\n          \"currentindexchange\",\n          this[currentIndexChangedListenerKey]\n        );\n        this[previousItemsDelegateKey] = this[itemsDelegate];\n      }\n    }\n  }\n\n  return DelegateItems;\n}\n","import ReactiveElement from \"../core/ReactiveElement.js\";\nimport { firstRender, render } from \"./internal.js\";\n\n/**\n * An element with no visible appearance\n *\n * In some situations, you may be using a component that defines an\n * [element role](customizing#element-part-types) that you don't want to fill.\n * In such cases, you can indicate that the `Hidden` element class should be\n * used to fill that role. The component will create an instance of this class\n * inside its shadow tree, but the element will be invisible to the user.\n *\n * @inherits ReactiveElement\n */\nclass Hidden extends ReactiveElement {\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n    if (this[firstRender]) {\n      this.setAttribute(\"hidden\", \"\");\n    }\n  }\n}\n\nexport default Hidden;\n","import { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\";\nimport AriaListMixin from \"./AriaListMixin.js\";\nimport ComposedFocusMixin from \"./ComposedFocusMixin.js\";\nimport CursorAPIMixin from \"./CursorAPIMixin.js\";\nimport CursorInViewMixin from \"./CursorInViewMixin.js\";\nimport CursorSelectMixin from \"./CursorSelectMixin.js\";\nimport DirectionCursorMixin from \"./DirectionCursorMixin.js\";\nimport FocusVisibleMixin from \"./FocusVisibleMixin.js\";\nimport FormElementMixin from \"./FormElementMixin.js\";\nimport {\n  defaultState,\n  ids,\n  render,\n  scrollTarget,\n  setState,\n  state,\n  template,\n} from \"./internal.js\";\nimport ItemsAPIMixin from \"./ItemsAPIMixin.js\";\nimport ItemsCursorMixin from \"./ItemsCursorMixin.js\";\nimport ItemsTextMixin from \"./ItemsTextMixin.js\";\nimport KeyboardDirectionMixin from \"./KeyboardDirectionMixin.js\";\nimport KeyboardMixin from \"./KeyboardMixin.js\";\nimport KeyboardPagedCursorMixin from \"./KeyboardPagedCursorMixin.js\";\nimport KeyboardPrefixCursorMixin from \"./KeyboardPrefixCursorMixin.js\";\nimport LanguageDirectionMixin from \"./LanguageDirectionMixin.js\";\nimport SelectedTextAPIMixin from \"./SelectedTextAPIMixin.js\";\nimport SelectedValueAPIMixin from \"./SelectedValueAPIMixin.js\";\nimport SingleSelectAPIMixin from \"./SingleSelectAPIMixin.js\";\nimport SlotItemsMixin from \"./SlotItemsMixin.js\";\nimport TapCursorMixin from \"./TapCursorMixin.js\";\n\nconst Base = AriaListMixin(\n  ComposedFocusMixin(\n    CursorAPIMixin(\n      CursorInViewMixin(\n        CursorSelectMixin(\n          DirectionCursorMixin(\n            FocusVisibleMixin(\n              FormElementMixin(\n                ItemsAPIMixin(\n                  ItemsCursorMixin(\n                    ItemsTextMixin(\n                      KeyboardDirectionMixin(\n                        KeyboardMixin(\n                          KeyboardPagedCursorMixin(\n                            KeyboardPrefixCursorMixin(\n                              LanguageDirectionMixin(\n                                SingleSelectAPIMixin(\n                                  SelectedTextAPIMixin(\n                                    SelectedValueAPIMixin(\n                                      SlotItemsMixin(\n                                        TapCursorMixin(ReactiveElement)\n                                      )\n                                    )\n                                  )\n                                )\n                              )\n                            )\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n);\n\n/**\n * Single-selection list box\n *\n * This component supports ARIA support and full keyboard navigation. See\n * [KeyboardDirectionMixin](KeyboardDirectionMixin),\n * [KeyboardPagedCursorMixin](KeyboardPagedCursorMixin), and\n * [KeyboardPrefixCursorMixin](KeyboardPrefixCursorMixin) for keyboard\n * details.\n *\n * @inherits ReactiveElement\n * @mixes AriaListMixin\n * @mixes ComposedFocusMixin\n * @mixes CursorInViewMixin\n * @mixes CursorAPIMixin\n * @mixes DirectionCursorMixin\n * @mixes FocusVisibleMixin\n * @mixes FormElementMixin\n * @mixes ItemsAPIMixin\n * @mixes ItemsCursorMixin\n * @mixes ItemsTextMixin\n * @mixes KeyboardDirectionMixin\n * @mixes KeyboardMixin\n * @mixes KeyboardPagedCursorMixin\n * @mixes KeyboardPrefixCursorMixin\n * @mixes LanguageDirectionMixin\n * @mixes SelectedTextAPIMixin\n * @mixes SelectedValueAPIMixin\n * @mixes SingleSelectAPIMixin\n * @mixes SlotItemsMixin\n * @mixes TapCursorMixin\n */\nclass ListBox extends Base {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      orientation: \"vertical\",\n    });\n  }\n\n  get orientation() {\n    return this[state].orientation;\n  }\n  set orientation(orientation) {\n    this[setState]({ orientation });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n    if (changed.items || changed.currentIndex) {\n      // Apply `selected` style to the selected item only.\n      const { currentIndex, items } = this[state];\n      if (items) {\n        items.forEach((item, index) => {\n          item.toggleAttribute(\"selected\", index === currentIndex);\n        });\n      }\n    }\n    if (changed.orientation) {\n      // Update list orientation styling.\n      const style =\n        this[state].orientation === \"vertical\"\n          ? {\n              display: \"block\",\n              flexDirection: \"\",\n              overflowX: \"hidden\",\n              overflowY: \"auto\",\n            }\n          : {\n              display: \"flex\",\n              flexDirection: \"row\",\n              overflowX: \"auto\",\n              overflowY: \"hidden\",\n            };\n      Object.assign(this[ids].container.style, style);\n    }\n  }\n\n  // @ts-ignore\n  get [scrollTarget]() {\n    return this[ids].container;\n  }\n\n  get [template]() {\n    const result = super[template];\n    result.content.append(fragmentFrom.html`\n      <style>\n        :host {\n          box-sizing: border-box;\n          cursor: default;\n          display: flex;\n          overflow: hidden; /* Container element is responsible for scrolling */\n          -webkit-tap-highlight-color: transparent;\n        }\n\n        #container {\n          display: flex;\n          flex: 1;\n          -webkit-overflow-scrolling: touch; /* for momentum scrolling */\n        }\n      </style>\n      <div id=\"container\" role=\"none\">\n        <slot id=\"slot\"></slot>\n      </div>\n    `);\n    return result;\n  }\n}\n\nexport default ListBox;\n","import { forwardFocus } from \"../core/dom.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport { transmute } from \"../core/template.js\";\nimport ComboBox from \"./ComboBox.js\";\nimport { getDefaultText } from \"./content.js\";\nimport CursorAPIMixin from \"./CursorAPIMixin.js\";\nimport DelegateCursorMixin from \"./DelegateCursorMixin.js\";\nimport DelegateItemsMixin from \"./DelegateItemsMixin.js\";\nimport {\n  defaultState,\n  getItemText,\n  goFirst,\n  goLast,\n  goNext,\n  goPrevious,\n  ids,\n  itemsDelegate,\n  keydown,\n  render,\n  rendered,\n  setState,\n  shadowRoot,\n  state,\n  stateEffects,\n  template,\n} from \"./internal.js\";\nimport ListBox from \"./ListBox.js\";\nimport PopupListMixin from \"./PopupListMixin.js\";\nimport SingleSelectAPIMixin from \"./SingleSelectAPIMixin.js\";\n\nconst Base = CursorAPIMixin(\n  DelegateCursorMixin(\n    DelegateItemsMixin(PopupListMixin(SingleSelectAPIMixin(ComboBox)))\n  )\n);\n\n/**\n * A combo box whose popup presents a list of choices\n *\n * @inherits ComboBox\n * @mixes CursorAPIMixin\n * @mixes DelegateCursorMixin\n * @mixes DelegateItemsMixin\n * @mixes PopupListMixin\n * @mixes SingleSelectAPIMixin\n * @part {ListBox} list - the list of choices\n */\nclass ListComboBox extends Base {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      currentIndex: -1,\n      listPartType: ListBox,\n      popupAlign: \"stretch\",\n      selectedIndex: -1,\n      selectedItem: null,\n    });\n  }\n\n  /**\n   * Extract the text from the given item.\n   *\n   * The default implementation returns an item's `aria-label`, `alt` attribute,\n   * `innerText`, or `textContent`, in that order. You can override this to\n   * return the text that should be used.\n   *\n   * @param {ListItemElement} item\n   * @returns {string}\n   */\n  [getItemText](item) {\n    return getDefaultText(item);\n  }\n\n  // We do our own handling of the Up and Down arrow keys, rather than relying\n  // on KeyboardDirectionMixin. The latter supports Home and End, and we don't\n  // want to handle those -- we want to let the text input handle them.\n  // We also need to forward PageDown/PageUp to the list element.\n  [keydown](/** @type {KeyboardEvent} */ event) {\n    let handled;\n    /** @type {any} */\n    const list = this[ids].list;\n\n    switch (event.key) {\n      case \"ArrowDown\":\n        if (this.opened) {\n          handled = event.altKey ? this[goLast]() : this[goNext]();\n        }\n        break;\n\n      case \"ArrowUp\":\n        if (this.opened) {\n          handled = event.altKey ? this[goFirst]() : this[goPrevious]();\n        }\n        break;\n\n      case \"PageDown\":\n        if (this.opened) {\n          handled = list.pageDown && list.pageDown();\n        }\n        break;\n\n      case \"PageUp\":\n        if (this.opened) {\n          handled = list.pageUp && list.pageUp();\n        }\n        break;\n    }\n\n    // If the list's current index changed as a result of a keyboard operation,\n    // update the selected index. We distinguish between keyboard operations\n    // (which update both cursor and selection) and mouse hover operations\n    // (which update the cursor, but not the selection).\n    if (handled) {\n      const { selectedIndex } = this[state];\n      if (selectedIndex !== list.currentIndex) {\n        this[setState]({\n          selectedIndex: list.currentIndex,\n        });\n      }\n    }\n\n    // Prefer mixin result if it's defined, otherwise use base result.\n    return handled || (super[keydown] && super[keydown](event));\n  }\n\n  /**\n   * The class or tag used to create the `list` part - the list of\n   * available choices shown in the popup.\n   *\n   * @type {PartDescriptor}\n   * @default ListBox\n   */\n  get listPartType() {\n    return this[state].listPartType;\n  }\n  set listPartType(listPartType) {\n    this[setState]({ listPartType });\n  }\n\n  get [itemsDelegate]() {\n    return this[ids].list;\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    if (changed.listPartType && this[ids].list) {\n      // Turn off focus handling for old list.\n      /** @type {any} */\n      const cast = this[ids].list;\n      forwardFocus(cast, null);\n    }\n\n    super[render](changed);\n\n    renderParts(this[shadowRoot], this[state], changed);\n\n    if (changed.listPartType) {\n      // Keep focus off of the list and on the top level combo box (which should\n      // delegate focus to the input).\n      const list = this[ids].list;\n      if (list instanceof HTMLElement) {\n        forwardFocus(list, this);\n      }\n    }\n  }\n\n  [rendered](changed) {\n    super[rendered](changed);\n\n    // Indicate which component is the popup's list.\n    if (changed.listPartType) {\n      this[setState]({\n        popupList: this[ids].list,\n      });\n    }\n  }\n\n  /**\n   * The `value` attribute of the selected item. If no item is selected, this\n   * returns the empty string.\n   *\n   * You can set this property to select the item with a matching `value`\n   * attribute.\n   *\n   * @type {string}\n   */\n  get selectedItemValue() {\n    const { items, selectedIndex } = this[state];\n    const selectedItem = items ? items[selectedIndex] : null;\n    return selectedItem ? selectedItem.getAttribute(\"value\") : \"\";\n  }\n  set selectedItemValue(selectedItemValue) {\n    const { items } = this[state];\n    const s = String(selectedItemValue);\n    const selectedIndex = items.findIndex(\n      (item) => item.getAttribute(\"value\") === s\n    );\n    this[setState]({ selectedIndex });\n  }\n\n  [stateEffects](state, changed) {\n    const effects = super[stateEffects](state, changed);\n\n    // We want the cursor to track the selection, but we don't always want the\n    // selection to track the cursor. (A mouse hover operation on the list will\n    // update the cursor, but shouldn't update the selection.) For that reason,\n    // we can't use the CursorSelectMixin, which updates in both directions.\n    if (changed.selectedIndex) {\n      Object.assign(effects, {\n        currentIndex: state.selectedIndex,\n      });\n    }\n    if (changed.selectedItem) {\n      Object.assign(effects, {\n        currentItem: state.selectedItem,\n      });\n    }\n\n    // If value was changed directly or typed, or items have updated, select the\n    // corresponding item in list.\n    if (changed.items || changed.value) {\n      const { value } = state;\n      /** @type {ListItemElement[]} */ const items = state.items;\n      if (items && value != null) {\n        const searchText = value.toLowerCase();\n        const currentIndex = items.findIndex((item) => {\n          const itemText = this[getItemText](item);\n          return itemText.toLowerCase() === searchText;\n        });\n        Object.assign(effects, {\n          currentIndex,\n        });\n      }\n    }\n\n    // If closing normally (not canceled), make current item the selected item,\n    // and make its text the value. Leave the text selected.\n    const { closeResult, opened } = state;\n    const closing = changed.opened && !opened;\n    const canceled = closeResult && closeResult.canceled;\n    const closingNormally = closing && !canceled;\n    if (closingNormally) {\n      const { currentIndex, items } = state;\n      const currentItem = items ? items[currentIndex] : null;\n      const currentItemText = currentItem ? this[getItemText](currentItem) : \"\";\n      // See notes on mobile at ComboBox.defaultState.\n      const probablyMobile = matchMedia(\"(pointer: coarse)\").matches;\n      const selectText = !probablyMobile;\n      Object.assign(effects, {\n        selectText,\n        selectedIndex: currentIndex,\n      });\n      if (currentItemText !== \"\") {\n        Object.assign(effects, {\n          value: currentItemText,\n        });\n      }\n    }\n\n    // If the selected index is updated while the combo box is closed (i.e., the\n    // value was not changed by the user), then update the text value to match.\n    if (changed.selectedIndex && !state.opened) {\n      const { items, selectedIndex } = state;\n      const selectedItem = items ? items[selectedIndex] : null;\n      if (selectedItem) {\n        Object.assign(effects, {\n          value: this[getItemText](selectedItem),\n        });\n      }\n    }\n\n    // When items change, we need to recalculate popup size.\n    if (changed.items) {\n      Object.assign(effects, {\n        popupMeasured: false,\n      });\n    }\n\n    return effects;\n  }\n\n  get [template]() {\n    const result = super[template];\n\n    // Wrap default slot with a list.\n    const defaultSlot = result.content.querySelector(\"slot:not([name])\");\n    if (defaultSlot) {\n      defaultSlot.replaceWith(fragmentFrom.html`\n        <div id=\"list\" part=\"list\" tabindex=\"-1\">\n          <slot></slot>\n        </div>\n      `);\n    }\n\n    result.content.append(fragmentFrom.html`\n      <style>\n        [part~=\"list\"] {\n          border: none;\n          flex: 1;\n          height: 100%;\n          max-height: 100%;\n          overscroll-behavior: contain;\n          width: 100%;\n        }\n      </style>\n    `);\n\n    renderParts(result.content, this[state]);\n\n    return result;\n  }\n}\n\n/**\n * Render parts for the template or an instance.\n *\n * @private\n * @param {DocumentFragment} root\n * @param {PlainObject} state\n * @param {ChangedFlags} [changed]\n */\nfunction renderParts(root, state, changed) {\n  if (!changed || changed.listPartType) {\n    const { listPartType } = state;\n    const list = root.getElementById(\"list\");\n    if (list) {\n      transmute(list, listPartType);\n    }\n  }\n}\n\nexport default ListComboBox;\n","import ReactiveElement from \"../core/ReactiveElement.js\"; // eslint-disable-line no-unused-vars\nimport { getDefaultText } from \"./content.js\";\nimport {\n  defaultState,\n  getItemText,\n  setState,\n  state,\n  stateEffects,\n} from \"./internal.js\";\n\n/**\n * Exposes a public API for the selected text of a list-like element.\n *\n * This mixin exists for list-like components that want to provide a more\n * convenient way to get/set the selected item using text. It adds a `selectedText`\n * property that gets the `textContent` of a component's `selectedItem`. The\n * `selectedText` property can also be set to set the selection to the first item in\n * the `items` collection that has the requested `textContent`. If the indicated\n * text is not found in `items`, the selection is cleared.\n *\n * This mixin expects a component to provide an `items` array of all elements in\n * the list. A standard way to do that with is\n * [ContentItemsMixin](ContentItemsMixin). This also expects the definition of a\n * `selectedIndex` state, which can be obtained from\n * [CursorSelectMixin](CursorSelectMixin).\n *\n * @module SelectedTextAPIMixin\n * @param {Constructor<ReactiveElement>} Base\n */\nexport default function SelectedTextAPIMixin(Base) {\n  // The class prototype added by the mixin.\n  class SelectedTextAPI extends Base {\n    // @ts-ignore\n    get [defaultState]() {\n      return Object.assign(super[defaultState] || {}, {\n        selectedText: \"\",\n      });\n    }\n\n    /**\n     * Extract the text from the given item.\n     *\n     * The default implementation returns an item's `aria-label`, `alt`\n     * attribute, `innerText`, or `textContent`, in that order. You can override\n     * this to return the text that should be used.\n     *\n     * @param {Element} item\n     * @returns {string}\n     */\n    [getItemText](item) {\n      return super[getItemText]\n        ? super[getItemText](item)\n        : getDefaultText(item);\n    }\n\n    [stateEffects](state, changed) {\n      const effects = super[stateEffects]\n        ? super[stateEffects](state, changed)\n        : {};\n\n      // selectedText tracks text of selected item\n      if (changed.items || changed.selectedIndex) {\n        const { items, selectedIndex } = state;\n        const selectedItem = items ? items[selectedIndex] : null;\n        const selectedText = selectedItem\n          ? this[getItemText](selectedItem)\n          : \"\";\n        Object.assign(effects, { selectedText });\n      }\n\n      return effects;\n    }\n\n    /**\n     * The text content of the selected item.\n     *\n     * Setting this value to a string will attempt to select the first list item\n     * whose text matches that string. Setting this to a string not matching any\n     * list item will result in no selection.\n     *\n     * @type {string}\n     */\n    get selectedText() {\n      return this[state].selectedText;\n    }\n    set selectedText(selectedText) {\n      // Find index of item with desired text.\n      const { items } = this[state];\n      const selectedIndex = items\n        ? indexOfItemWithText(items, this[getItemText], String(selectedText))\n        : -1;\n      this[setState]({ selectedIndex });\n    }\n  }\n\n  return SelectedTextAPI;\n}\n\n/**\n * @private\n * @param {Element[]} items\n * @param {string} text\n */\nfunction indexOfItemWithText(items, getText, text) {\n  return items.findIndex((item) => getText(item) === text);\n}\n","import ReactiveElement from \"../core/ReactiveElement.js\"; // eslint-disable-line no-unused-vars\nimport { defaultState, setState, state, stateEffects } from \"./internal.js\";\n\n/**\n * Exposes a public API for the value of a list-like element.\n *\n * @module SelectedValueAPIMixin\n * @param {Constructor<ReactiveElement>} Base\n */\nexport default function SelectedValueAPIMixin(Base) {\n  // The class prototype added by the mixin.\n  class SelectedValueAPI extends Base {\n    // @ts-ignore\n    get [defaultState]() {\n      return Object.assign(super[defaultState] || {}, {\n        value: \"\",\n      });\n    }\n\n    [stateEffects](state, changed) {\n      const effects = super[stateEffects]\n        ? super[stateEffects](state, changed)\n        : {};\n\n      // Value tracks the value attribute on the selected item.\n      if (changed.items || changed.selectedIndex) {\n        const { items, selectedIndex } = state;\n        const selectedItem = items ? items[selectedIndex] : null;\n        const value = selectedItem ? selectedItem.getAttribute(\"value\") : \"\";\n        Object.assign(effects, { value });\n      }\n\n      return effects;\n    }\n\n    /**\n     * The value attribute of the selected item.\n     *\n     * Setting this to a string will attempt to select the first list item whose\n     * value attribute matches that string. Setting this to a string not\n     * matching any value attribute will result in no selection.\n     *\n     * @type {string}\n     */\n    get value() {\n      return this[state].value;\n    }\n    set value(value) {\n      // Find index of item with desired value.\n      const { items } = this[state];\n      const selectedIndex = items\n        ? indexOfItemWithValue(items, String(value))\n        : -1;\n      this[setState]({ selectedIndex });\n    }\n  }\n\n  return SelectedValueAPI;\n}\n\n/**\n * @private\n * @param {Element[]} items\n * @param {string} value\n */\nfunction indexOfItemWithValue(items, value) {\n  return items.findIndex((item) => item.getAttribute(\"value\") === value);\n}\n","import ReactiveElement from \"../core/ReactiveElement.js\"; // eslint-disable-line no-unused-vars\nimport { raiseChangeEvents, rendered, setState, state } from \"./internal.js\";\n\n/**\n * Exposes a public API for single selection on a list-like element\n *\n * This mixin expects a component to provide an `items` Array of all elements in\n * the list. This mixin also expects the component to apply\n * [ItemsCursorMixin](ItemsCursorMixin) and\n * [CursorSelectMixin](CursorSelectMixin) or otherwise define a compatible\n * `selectedIndex` state and other state members for navigating the current\n * item.\n *\n * Given the above, this mixin exposes a consistent public API for reading and\n * manipulating the current item as a selection. This includes public members\n * `selectedIndex` and `selectedItem`, selection navigation methods, and a\n * `selected-index-changed` event.\n *\n * This mixin does not produce any user-visible effects to represent selection;\n * that is up to the component to provide.\n *\n * @module SingleSelectAPIMixin\n * @param {Constructor<ReactiveElement>} Base\n */\nexport default function SingleSelectAPIMixin(Base) {\n  // The class prototype added by the mixin.\n  class SingleSelectAPI extends Base {\n    attributeChangedCallback(name, oldValue, newValue) {\n      if (name === \"selected-index\") {\n        this.selectedIndex = Number(newValue);\n      } else {\n        super.attributeChangedCallback(name, oldValue, newValue);\n      }\n    }\n\n    [rendered](/** @type {ChangedFlags} */ changed) {\n      if (super[rendered]) {\n        super[rendered](changed);\n      }\n\n      if (changed.selectedIndex && this[raiseChangeEvents]) {\n        const selectedIndex = this[state].selectedIndex;\n        /**\n         * Raised when the `selectedIndex` property changes.\n         *\n         * @event selectedindexchange\n         */\n        const event = new CustomEvent(\"selectedindexchange\", {\n          bubbles: true,\n          detail: { selectedIndex },\n        });\n        this.dispatchEvent(event);\n      }\n    }\n\n    /**\n     * The index of the selected item, or -1 if no item is selected.\n     *\n     * @type {number}\n     */\n    get selectedIndex() {\n      const { items, selectedIndex } = this[state];\n      return items && items.length > 0 ? selectedIndex : -1;\n    }\n    set selectedIndex(selectedIndex) {\n      if (!isNaN(selectedIndex)) {\n        this[setState]({ selectedIndex });\n      }\n    }\n\n    /**\n     * The selected item, or null if no item is selected.\n     *\n     * @type {Element}\n     */\n    get selectedItem() {\n      const { items, selectedIndex } = this[state];\n      return items && items[selectedIndex];\n    }\n    set selectedItem(selectedItem) {\n      const { items } = this[state];\n      if (!items) {\n        return;\n      }\n      const index = items.indexOf(selectedItem);\n      if (index >= 0) {\n        this[setState]({ selectedIndex: index });\n      }\n    }\n  }\n\n  return SingleSelectAPI;\n}\n","// Generated from\n// https://github.com/unicode-cldr/cldr-core/blob/master/supplemental/weekData.json\nconst weekData = {\n  \"firstDay\": {\n    \"001\": 1,\n    \"AD\": 1,\n    \"AE\": 6,\n    \"AF\": 6,\n    \"AG\": 0,\n    \"AI\": 1,\n    \"AL\": 1,\n    \"AM\": 1,\n    \"AN\": 1,\n    \"AR\": 1,\n    \"AS\": 0,\n    \"AT\": 1,\n    \"AU\": 0,\n    \"AX\": 1,\n    \"AZ\": 1,\n    \"BA\": 1,\n    \"BD\": 0,\n    \"BE\": 1,\n    \"BG\": 1,\n    \"BH\": 6,\n    \"BM\": 1,\n    \"BN\": 1,\n    \"BR\": 0,\n    \"BS\": 0,\n    \"BT\": 0,\n    \"BW\": 0,\n    \"BY\": 1,\n    \"BZ\": 0,\n    \"CA\": 0,\n    \"CH\": 1,\n    \"CL\": 1,\n    \"CM\": 1,\n    \"CN\": 0,\n    \"CO\": 0,\n    \"CR\": 1,\n    \"CY\": 1,\n    \"CZ\": 1,\n    \"DE\": 1,\n    \"DJ\": 6,\n    \"DK\": 1,\n    \"DM\": 0,\n    \"DO\": 0,\n    \"DZ\": 6,\n    \"EC\": 1,\n    \"EE\": 1,\n    \"EG\": 6,\n    \"ES\": 1,\n    \"ET\": 0,\n    \"FI\": 1,\n    \"FJ\": 1,\n    \"FO\": 1,\n    \"FR\": 1,\n    \"GB\": 1,\n    \"GB-alt-variant\": 0,\n    \"GE\": 1,\n    \"GF\": 1,\n    \"GP\": 1,\n    \"GR\": 1,\n    \"GT\": 0,\n    \"GU\": 0,\n    \"HK\": 0,\n    \"HN\": 0,\n    \"HR\": 1,\n    \"HU\": 1,\n    \"ID\": 0,\n    \"IE\": 1,\n    \"IL\": 0,\n    \"IN\": 0,\n    \"IQ\": 6,\n    \"IR\": 6,\n    \"IS\": 1,\n    \"IT\": 1,\n    \"JM\": 0,\n    \"JO\": 6,\n    \"JP\": 0,\n    \"KE\": 0,\n    \"KG\": 1,\n    \"KH\": 0,\n    \"KR\": 0,\n    \"KW\": 6,\n    \"KZ\": 1,\n    \"LA\": 0,\n    \"LB\": 1,\n    \"LI\": 1,\n    \"LK\": 1,\n    \"LT\": 1,\n    \"LU\": 1,\n    \"LV\": 1,\n    \"LY\": 6,\n    \"MC\": 1,\n    \"MD\": 1,\n    \"ME\": 1,\n    \"MH\": 0,\n    \"MK\": 1,\n    \"MM\": 0,\n    \"MN\": 1,\n    \"MO\": 0,\n    \"MQ\": 1,\n    \"MT\": 0,\n    \"MV\": 5,\n    \"MX\": 0,\n    \"MY\": 1,\n    \"MZ\": 0,\n    \"NI\": 0,\n    \"NL\": 1,\n    \"NO\": 1,\n    \"NP\": 0,\n    \"NZ\": 1,\n    \"OM\": 6,\n    \"PA\": 0,\n    \"PE\": 0,\n    \"PH\": 0,\n    \"PK\": 0,\n    \"PL\": 1,\n    \"PR\": 0,\n    \"PT\": 0,\n    \"PY\": 0,\n    \"QA\": 6,\n    \"RE\": 1,\n    \"RO\": 1,\n    \"RS\": 1,\n    \"RU\": 1,\n    \"SA\": 0,\n    \"SD\": 6,\n    \"SE\": 1,\n    \"SG\": 0,\n    \"SI\": 1,\n    \"SK\": 1,\n    \"SM\": 1,\n    \"SV\": 0,\n    \"SY\": 6,\n    \"TH\": 0,\n    \"TJ\": 1,\n    \"TM\": 1,\n    \"TR\": 1,\n    \"TT\": 0,\n    \"TW\": 0,\n    \"UA\": 1,\n    \"UM\": 0,\n    \"US\": 0,\n    \"UY\": 1,\n    \"UZ\": 1,\n    \"VA\": 1,\n    \"VE\": 0,\n    \"VI\": 0,\n    \"VN\": 1,\n    \"WS\": 0,\n    \"XK\": 1,\n    \"YE\": 0,\n    \"ZA\": 0,\n    \"ZW\": 0\n  },\n  \"weekendEnd\": {\n    \"001\": 0,\n    \"AE\": 6,\n    \"AF\": 5,\n    \"BH\": 6,\n    \"DZ\": 6,\n    \"EG\": 6,\n    \"IL\": 6,\n    \"IQ\": 6,\n    \"IR\": 5,\n    \"JO\": 6,\n    \"KW\": 6,\n    \"LY\": 6,\n    \"OM\": 6,\n    \"QA\": 6,\n    \"SA\": 6,\n    \"SD\": 6,\n    \"SY\": 6,\n    \"YE\": 6\n  },\n  \"weekendStart\": {\n    \"001\": 6,\n    \"AE\": 5,\n    \"AF\": 4,\n    \"BH\": 5,\n    \"DZ\": 5,\n    \"EG\": 5,\n    \"IL\": 5,\n    \"IN\": 0,\n    \"IQ\": 5,\n    \"IR\": 5,\n    \"JO\": 5,\n    \"KW\": 5,\n    \"LY\": 5,\n    \"OM\": 5,\n    \"QA\": 5,\n    \"SA\": 5,\n    \"SD\": 5,\n    \"SY\": 5,\n    \"UG\": 0,\n    \"YE\": 5\n  }\n};\nexport default weekData;\n","/**\n * Helpers for date math and locale-sensitive calendar preferences.\n *\n * The visual representation of calendars varies quite a bit from place to\n * place; see the discussion at\n * [CalendarMonth](CalendarMonth#international-support). The `calendar` helpers\n * provide some assistance in determining a locale's calendar presentation\n * preferences, and working with date math in general.\n *\n *\n * Where these functions take a `locale` string parameter, that should follow\n * the same format as the [locales\n * argument](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument)\n * of the `Intl` internationalization API. Moreover, the locale should identify\n * at least a language and a region. Examples: \"en-US\" identifies US English,\n * while \"en-GB\" identifies English in Great Britain. The use of \"en\" on its own\n * would be insufficient.\n *\n * @module calendar\n */\n\nimport weekData from \"./weekData.js\";\n\n// Default region is \"World\", see https://www.ctrl.blog/entry/en-001\nconst defaultRegion = \"001\";\n\nexport const millisecondsPerDay = 24 * 60 * 60 * 1000;\n\n/**\n * Create a `DateTimeFormat` object for the given location and options.\n *\n * @param {string} locale\n * @param {Intl.DateTimeFormatOptions} options\n */\nexport function dateTimeFormat(locale, options) {\n  const caExtension = locale.includes(\"-ca-\") ? \"\" : \"-ca-gregory\";\n  const nuExtension = locale.includes(\"-nu-\") ? \"\" : \"-nu-latn\";\n  const extension = caExtension || nuExtension ? \"-u\" : \"\";\n  const extendedLocale = `${locale}${extension}${caExtension}${nuExtension}`;\n  return new Intl.DateTimeFormat(extendedLocale, options);\n}\n\n/**\n * Return true if both date object represent the same point in time or are both\n * null.\n *\n * @param {Date|null} date1\n * @param {Date|null} date2\n * @returns {boolean}\n */\nexport function datesEqual(date1, date2) {\n  if (date1 === null && date2 === null) {\n    return true;\n  } else if (date1 !== null && date2 !== null) {\n    return date1.getTime() === date2.getTime();\n  } else {\n    return false;\n  }\n}\n\n/**\n * Return the number of days between the two dates.\n *\n * @param {Date} date1\n * @param {Date} date2\n */\nexport function daysBetweenDates(date1, date2) {\n  const days = Math.round(\n    (date2.getTime() - date1.getTime()) / millisecondsPerDay\n  );\n  return days;\n}\n\n/**\n * Returns the number of days between the first day of the calendar week in the\n * indicated locale and the given date. In other words, the result indicates\n * which column of a typical calendar the date would appear in.\n *\n * Example: Suppose the given date is a Monday. In the locale 'en-US', the first\n * day of the calendar week is a Sunday, so this function would return 1. In the\n * locale 'en-GB', the first day of the calendar week is a Monday, in which case\n * this function would return 0.\n *\n * @param {Date} date - the target date\n * @param {string} locale - the calendar locale\n * @returns {number} the number of days between the first day of the week in\n * the locale's calendar and the target date\n */\nexport function daysSinceFirstDayOfWeek(date, locale) {\n  const firstDay = firstDayOfWeek(locale);\n  return (date.getDay() - firstDay + 7) % 7;\n}\n\n/**\n * Returns the first day of the week in a typical calendar in the indicated\n * locale, where 0 is Sunday, 1 is Monday, ..., and 6 = Saturday.\n *\n * @param {string} locale - the calendar locale\n * @returns {number} the number of the first day of the week in the locale\n */\nexport function firstDayOfWeek(locale) {\n  const region = getLocaleRegion(locale);\n  const firstDay = weekData.firstDay[region];\n  return firstDay !== undefined ? firstDay : weekData.firstDay[defaultRegion];\n}\n\n/**\n * Return the date of the first day of the week in the locale's calendar that\n * contains the given date.\n *\n * @param {Date} date - the target date\n * @param {string} locale - the calendar locale\n * @returns {Date}\n */\nexport function firstDateOfWeek(date, locale) {\n  const days = daysSinceFirstDayOfWeek(date, locale);\n  const firstDate = offsetDateByDays(date, -days);\n  return midnightOnDate(firstDate);\n}\n\n/**\n * Returns the first date of the month that contains the indicated target date.\n *\n * @param {Date} date - the target date\n * @returns {Date}\n */\nexport function firstDateOfMonth(date) {\n  const result = midnightOnDate(date);\n  result.setDate(1);\n  return result;\n}\n\n/**\n * Format the given date using the `DateTimeFormatOptions`.\n *\n * The `options` object includes a string `locale` and a `dateTimeFormatOptions`\n * of type `DateTimeFormatOptions`.\n *\n * @param {Date} date\n * @param {PlainObject} options\n */\nexport function formatDate(date, options) {\n  const { locale, dateTimeFormatOptions } = options;\n  const format = dateTimeFormat(locale, dateTimeFormatOptions);\n  return format.format(date);\n}\n\n/**\n * Returns the last date of the month that contains the indicated target date.\n *\n * @param {Date} date - the target date\n * @returns {Date}\n */\nexport function lastDateOfMonth(date) {\n  // Get last day of month by going to first day of next month and backing up a day.\n  const result = firstDateOfMonth(date);\n  result.setMonth(result.getMonth() + 1);\n  result.setDate(result.getDate() - 1);\n  return result;\n}\n\n/**\n * Return the date of the last day of the week in the locale's calendar that\n * contains the given date.\n *\n * @param {Date} date - the target date\n * @param {string} locale - the calendar locale\n * @returns {Date}\n */\nexport function lastDateOfWeek(date, locale) {\n  const days = daysSinceFirstDayOfWeek(date, locale);\n  const firstDate = offsetDateByDays(date, 6 - days);\n  return midnightOnDate(firstDate);\n}\n\n/**\n * Returns midnight on the indicated target date.\n *\n * @param {Date} date - the target date\n * @returns {Date}\n */\nexport function midnightOnDate(date) {\n  const midnight = new Date(date.getTime());\n  midnight.setHours(0);\n  midnight.setMinutes(0);\n  midnight.setSeconds(0);\n  midnight.setMilliseconds(0);\n  return midnight;\n}\n\n/**\n * Returns noon on the indicated target date.\n *\n * @param {Date} date - the target date\n * @returns {Date}\n */\nexport function noonOnDate(date) {\n  const midnight = new Date(date.getTime());\n  midnight.setHours(12);\n  midnight.setMinutes(0);\n  midnight.setSeconds(0);\n  midnight.setMilliseconds(0);\n  return midnight;\n}\n\n/**\n * Parse a text string as a date using the formatting preferences of the\n * indicated locale and the `Intl.DateTimeFormat` formatting options.\n *\n * The `Intl.DateTimeFormat` facility can format dates as text; this `parse`\n * function performs the reverse operation.\n *\n * Parsing is limited to supporting numeric day/month/year formats. The locale\n * and options only dictate the presence of the day, month, and year, and the\n * order in which they will be expected. Missing day/month/year values will\n * be inferred from the current date.\n *\n * @param {string} text - the text to parse as a date\n * @param {Intl.DateTimeFormat} dateTimeFormat - the format to parse\n * @returns {Date|null} - the parsed date\n */\nexport function parse(text, dateTimeFormat) {\n  const today = new Date();\n  // @ts-ignore\n  /** @type {any[]} */ const parts = dateTimeFormat.formatToParts(today);\n  // Convert parts to a regex.\n  // For reference, literals/separators we need to support are: `/‏/.年月. -:`\n  // (Those two slashes are different Unicode characters.) That said, since\n  // we're only supporting numeric day/month/year, we just take anything\n  // that's not a digit as a separator.\n  const regExText = parts\n    .map((part) =>\n      part.type === \"literal\"\n        ? \"(\\\\D+)\"\n        : // TODO: use named capture group `(<${part.type}>\\\\d+)`\n          // when that's widely supported.\n          `(\\\\d+)`\n    )\n    .join(\"\");\n  const regEx = new RegExp(regExText);\n  // Match against the text.\n  const match = regEx.exec(text);\n  if (!match) {\n    return null;\n  }\n  // Convert match values to (effectively) named capture groups.\n  /** @type {PlainObject} */ const groups = {};\n  parts.forEach((part, index) => {\n    groups[part.type] = match[index + 1];\n  });\n  // @ts-ignore\n  const { day, hour, minute, month, second, year } = groups;\n  // Adjust short year to current century.\n  const yearValue = year && parseInt(year);\n  const adjustedYear = yearValue < 100 ? 2000 + yearValue : year;\n  return new Date(\n    adjustedYear || today.getFullYear(),\n    month !== undefined ? month - 1 : today.getMonth(),\n    day || today.getDate(),\n    hour || 0,\n    minute || 0,\n    second || 0\n  );\n}\n\n/**\n * Parse the indicated text as a date, first as a full date that includes the\n * year or, if that fails to parse, as an abbreviated date that omits the year.\n *\n * @param {string} text - the text to parse as a date\n * @param {Intl.DateTimeFormat} dateTimeFormat - the format to parse\n * @param {'future'|'past'} [timeBias] - bias towards future if true, past if false\n * @returns {Date|null} - the parsed date\n */\nexport function parseWithOptionalYear(text, dateTimeFormat, timeBias) {\n  // Try parsing using requested DateTimeFormat.\n  const fullDate = parse(text, dateTimeFormat);\n  if (fullDate) {\n    return fullDate;\n  }\n  // Try parsing without year. Create an identical DateTimeFormat options, but\n  // mark `year` as undefined so it won't be used.\n  const { day, locale, month } = dateTimeFormat.resolvedOptions();\n  // @ts-ignore Puzzling type differences between options vs resolved options.\n  const abbreviatedFormat = new Intl.DateTimeFormat(locale, { day, month });\n  const abbreviatedDate = parse(text, abbreviatedFormat);\n  if (abbreviatedDate && timeBias) {\n    const today = new Date();\n    const todayDay = today.getDate();\n    const todayMonth = today.getMonth();\n    const abbreviatedDay = abbreviatedDate.getDate();\n    const abbreviatedMonth = abbreviatedDate.getMonth();\n    const abbreviatedYear = abbreviatedDate.getFullYear();\n    if (timeBias === \"future\") {\n      if (\n        abbreviatedMonth < todayMonth ||\n        (abbreviatedMonth === todayMonth && abbreviatedDay < todayDay)\n      ) {\n        abbreviatedDate.setFullYear(abbreviatedYear + 1);\n      }\n    } else if (timeBias === \"past\") {\n      if (\n        abbreviatedMonth > todayMonth ||\n        (abbreviatedMonth === todayMonth && abbreviatedDay > todayDay)\n      ) {\n        abbreviatedDate.setFullYear(abbreviatedYear - 1);\n      }\n    }\n  }\n  return abbreviatedDate;\n}\n\n/**\n * Return true if the two dates fall in the same month and year.\n *\n * @param {Date} date1 - the first date to compare\n * @param {Date} date2 - the second date to compare\n * @returns {boolean}\n */\nexport function sameMonthAndYear(date1, date2) {\n  return (\n    date1.getFullYear() === date2.getFullYear() &&\n    date1.getMonth() === date2.getMonth()\n  );\n}\n\n/**\n * Return the result of adding/subtracting a number of days to a date.\n *\n * @param {Date} date - the target date\n * @param {number} days - the number of days to add/subtract\n * @returns {Date}\n */\nexport function offsetDateByDays(date, days) {\n  // Use noon hour for date math, since adding/subtracting multiples of 24 hours\n  // starting from noon is guaranteed to end up on the correct date (although\n  // the hours might have changed).\n  // TODO: Given the nature of date, there could easily be gnarly date math bugs\n  // here. Ideally some time-geek library should be used for this calculation.\n  const result = noonOnDate(date);\n  result.setDate(result.getDate() + days);\n  copyTimeFromDateToDate(date, result); // Restore original hours\n  return result;\n}\n\n/**\n * TODO: Docs\n *\n * @param {Date} date\n * @param {number} months\n * @returns {Date}\n */\nexport function offsetDateByMonths(date, months) {\n  const result = noonOnDate(date);\n  result.setMonth(date.getMonth() + months);\n  copyTimeFromDateToDate(date, result); // Restore original hours\n  return result;\n}\n\n/**\n * Returns midnight today.\n *\n * @returns {Date}\n */\nexport function today() {\n  return midnightOnDate(new Date());\n}\n\n/**\n * Returns the day of week (0 = Sunday, 1 = Monday, etc.) for the last day of\n * the weekend in the indicated locale.\n *\n * @param {string} locale - the calendar locale\n * @returns {number}\n */\nexport function weekendEnd(locale) {\n  const region = getLocaleRegion(locale);\n  const day = weekData.weekendEnd[region];\n  return day !== undefined ? day : weekData.weekendEnd[defaultRegion];\n}\n\n/**\n * Returns the day of week (0 = Sunday, 1 = Monday, etc.) for the first day of\n * the weekend in the indicated locale.\n *\n * @param {string} locale - the calendar locale\n * @returns {number}\n */\nexport function weekendStart(locale) {\n  const region = getLocaleRegion(locale);\n  const day = weekData.weekendStart[region];\n  return day !== undefined ? day : weekData.weekendStart[defaultRegion];\n}\n\n/**\n * Update the time on date2 to match date1.\n *\n * @private\n * @param {Date} date1\n * @param {Date} date2\n */\nfunction copyTimeFromDateToDate(date1, date2) {\n  date2.setHours(date1.getHours());\n  date2.setMinutes(date1.getMinutes());\n  date2.setSeconds(date1.getSeconds());\n  date2.setMilliseconds(date1.getMilliseconds());\n}\n\nfunction getLocaleRegion(/** @type {string} */ locale) {\n  const localeParts = locale ? locale.split(\"-\") : null;\n  return localeParts ? localeParts[1] : defaultRegion;\n}\n","import ReactiveElement from \"../core/ReactiveElement.js\"; // eslint-disable-line no-unused-vars\nimport * as calendar from \"./calendar.js\";\nimport {\n  defaultState,\n  raiseChangeEvents,\n  rendered,\n  setState,\n  state,\n} from \"./internal.js\";\n\n/**\n * Adds locale-sensitive date support.\n *\n * This mixin is typically used in creating calendar components. All of the Elix\n * calendar components attempt to provide full [international calendar\n * support](CalendarMonth#international-support) to the extent currently\n * possible in the user's web browser.\n *\n * @module CalendarElementMixin\n * @param {Constructor<ReactiveElement>} Base\n */\nexport default function CalendarElementMixin(Base) {\n  // The class prototype added by the mixin.\n  class CalendarElement extends Base {\n    attributeChangedCallback(name, oldValue, newValue) {\n      if (name === \"date\") {\n        this.date = new Date(newValue);\n      } else {\n        super.attributeChangedCallback(name, oldValue, newValue);\n      }\n    }\n\n    /**\n     * The date that should be shown by the element. For elements that show a\n     * range of dates (a month, a week, etc.), the referenced date will be\n     * included in the range.\n     *\n     * This property can be set as a string, which will be parsed and converted\n     * to a JavaScript `Date`.\n     *\n     * If not specified, the default `date` value is the current date.\n     *\n     * @type {Date}\n     */\n    get date() {\n      return this[state].date;\n    }\n    set date(date) {\n      // Only update state if actual date value differs from current state.\n      if (!calendar.datesEqual(date, this[state].date)) {\n        this[setState]({ date });\n      }\n    }\n\n    // @ts-ignore\n    get [defaultState]() {\n      return Object.assign(super[defaultState] || {}, {\n        date: null,\n        locale: navigator.language,\n      });\n    }\n\n    /**\n     * A string that identifies a language and a region using a BCP 47\n     * language tag. This is the same format used by to identify a\n     * locale in the standard `Intl` internationalization API.\n     * See the\n     * [locales argument](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument)\n     * documentation for details.\n     *\n     * Calendar elements are region-sensitive, so language alone is\n     * insufficient. Accordingly, the locale should identify at least a language\n     * and a region. Examples: \"en-US\" identifies US English, while \"en-GB\"\n     * identifies English in Great Britain. The use of \"en\" on its own would\n     * be insufficient.\n     *\n     * @type {string}\n     */\n    get locale() {\n      return this[state].locale;\n    }\n    set locale(locale) {\n      this[setState]({\n        locale: String(locale),\n      });\n    }\n\n    [rendered](/** @type {ChangedFlags} */ changed) {\n      if (super[rendered]) {\n        super[rendered](changed);\n      }\n\n      // TODO: call calendar.datesEqual(date, previousState.date)?\n      if (changed.date && this[raiseChangeEvents]) {\n        const date = this[state].date;\n        /**\n         * Raised when the `date` property changes.\n         *\n         * @event datechange\n         */\n        const event = new CustomEvent(\"datechange\", {\n          bubbles: true,\n          detail: { date },\n        });\n        this.dispatchEvent(event);\n      }\n    }\n  }\n\n  return CalendarElement;\n}\n","import { booleanAttributeValue } from \"../core/AttributeMarshallingMixin.js\";\nimport { setInternalState } from \"../core/dom.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\"; // eslint-disable-line no-unused-vars\nimport { defaultState, render, rendered, setState, state } from \"./internal.js\";\n\n// Elements listening for changes in prefers-color-scheme.\nconst colorSchemeElements = new Set();\n\n/**\n * Lets a component automatically or explicitly configure itself for dark backgrounds\n *\n * @module DarkModeMixin\n * @param {Constructor<ReactiveElement>} Base\n */\nexport default function DarkModeMixin(Base) {\n  return class dark extends Base {\n    attributeChangedCallback(name, oldValue, newValue) {\n      if (name === \"dark\") {\n        const value = booleanAttributeValue(name, newValue);\n        if (this.dark !== value) {\n          this.dark = value;\n        }\n      } else {\n        super.attributeChangedCallback(name, oldValue, newValue);\n      }\n    }\n\n    disconnectedCallback() {\n      if (super.disconnectedCallback) {\n        super.disconnectedCallback();\n      }\n      // This element no longer needs to listen to changes in color scheme.\n      colorSchemeElements.delete(this);\n    }\n\n    /**\n     * True if the component should configure itself for display on a dark background;\n     * false if the component should assume a light background.\n     *\n     * The default value of this property is inferred when the component is\n     * initially added to the page. The component will look up its hierarchy for\n     * an ancestor that has an explicit background color. If the color's\n     * lightness value in the HSL cylindrical-coordinate system is below 50%,\n     * the background is assumed to be dark and `dark` will default to true.\n     * If the color is lighter than that, or no explicit background color can be\n     * found, the default value of `dark` will be false.\n     *\n     * @type {boolean}\n     */\n    get dark() {\n      return this[state].dark;\n    }\n    set dark(dark) {\n      this[setState]({ dark });\n    }\n\n    // @ts-ignore\n    get [defaultState]() {\n      return Object.assign(super[defaultState] || {}, {\n        dark: false,\n        detectDarkMode: \"auto\",\n      });\n    }\n\n    /**\n     * Determines whether the component should automatially try to detect\n     * whether it should apply dark mode.\n     *\n     * @type {'auto'|'off'}\n     * @default 'auto'\n     */\n    get detectDarkMode() {\n      return this[state].detectDarkMode;\n    }\n    set detectDarkMode(detectDarkMode) {\n      if (detectDarkMode === \"auto\" || detectDarkMode === \"off\") {\n        this[setState]({ detectDarkMode });\n      }\n    }\n\n    [render](changed) {\n      if (super[render]) {\n        super[render](changed);\n      }\n\n      if (changed.dark) {\n        const { dark } = this[state];\n        setInternalState(this, \"dark\", dark);\n      }\n    }\n\n    [rendered](changed) {\n      if (super[rendered]) {\n        super[rendered](changed);\n      }\n\n      if (changed.detectDarkMode) {\n        const { detectDarkMode } = this[state];\n        // Add/remove element to/from list of elements listening to color\n        // scheme.\n        if (detectDarkMode === \"auto\") {\n          colorSchemeElements.add(this);\n          setDarkModeFromBackgroundColor(this);\n        } else {\n          colorSchemeElements.delete(this);\n        }\n      }\n    }\n  };\n}\n\n// Infer dark mode from effective background color.\nfunction setDarkModeFromBackgroundColor(element) {\n  const backgroundColor = findBackgroundColor(element);\n  const rgb = parseRgb(backgroundColor);\n  if (rgb) {\n    const hsl = rgbToHsl(rgb);\n    // We consider any lightness below 50% to be dark.\n    const dark = hsl.l < 0.5;\n    element[setState]({ dark });\n  }\n}\n\n/**\n * Return the background color of the given element. If the color is\n * \"transparent\" (the default in Mozilla) or \"rgba(0, 0, 0, 0)\" (the default\n * transparent value in Blink and Webkit), walk up the parent chain until a\n * non-transparent color is found.\n *\n * @private\n * @param {Element} element\n * @returns {string}\n */\nfunction findBackgroundColor(element) {\n  const defaultBackgroundColor = \"rgb(255,255,255)\";\n  if (element instanceof Document) {\n    // This element has no background, assume white.\n    return defaultBackgroundColor;\n  }\n  const backgroundColor = getComputedStyle(element).backgroundColor;\n  const hasColor =\n    backgroundColor !== \"transparent\" && backgroundColor !== \"rgba(0, 0, 0, 0)\";\n  if (backgroundColor && hasColor) {\n    return backgroundColor;\n  }\n  if (element.assignedSlot) {\n    return findBackgroundColor(element.assignedSlot);\n  }\n  const parent = element.parentNode;\n  if (parent instanceof ShadowRoot) {\n    return findBackgroundColor(parent.host);\n  } else if (parent instanceof Element) {\n    return findBackgroundColor(parent);\n  } else {\n    return defaultBackgroundColor;\n  }\n}\n\n// Return the individual RGB values from a CSS RGB/RGBA color string.\nfunction parseRgb(/** @type {string} */ rgbString) {\n  const rgbRegex = /rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*[\\d.]+\\s*)?\\)/;\n  const match = rgbRegex.exec(rgbString);\n  if (match) {\n    const r = match[1];\n    const g = match[2];\n    const b = match[3];\n    return { r, g, b };\n  } else {\n    return null;\n  }\n}\n\n// Convert an RGB color to an HSL color.\n// From https://stackoverflow.com/a/3732187/76472.\nfunction rgbToHsl(/** @type {PlainObject} */ rgb) {\n  const r = rgb.r / 255;\n  const g = rgb.g / 255;\n  const b = rgb.b / 255;\n\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n\n  let h = 0; // achromatic\n  let s = 0;\n  let l = (max + min) / 2;\n\n  const d = max - min;\n  if (d !== 0) {\n    s = l > 0.5 ? d / (2 - d) : d / (max + min);\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n\n  return { h, s, l };\n}\n\n// Listen to changes in user preference for dark mode.\nwindow.matchMedia(\"(prefers-color-scheme: dark)\").addListener(() => {\n  colorSchemeElements.forEach((element) => {\n    setDarkModeFromBackgroundColor(element);\n  });\n});\n","import ReactiveElement from \"../core/ReactiveElement.js\"; // eslint-disable-line no-unused-vars\nimport { defaultState, firstRender, rendered, setState } from \"./internal.js\";\n\n/**\n * Simple foundation for component with visual effects\n *\n * At present, this mixin's only responsibility to ensure that a component\n * does not show visual effects when it is initially rendered.\n *\n * @module EffectMixin\n * @param {Constructor<ReactiveElement>} Base\n */\nexport default function EffectMixin(Base) {\n  // The class prototype added by the mixin.\n  class Transition extends Base {\n    // @ts-ignore\n    get [defaultState]() {\n      return Object.assign(super[defaultState] || {}, {\n        enableEffects: false,\n      });\n    }\n\n    [rendered](/** @type {ChangedFlags} */ changed) {\n      if (super[rendered]) {\n        super[rendered](changed);\n      }\n\n      if (this[firstRender]) {\n        // Once everything's finished rendering, enable transition effects.\n        setTimeout(() => {\n          this[setState]({ enableEffects: true });\n        });\n      }\n    }\n  }\n\n  return Transition;\n}\n","import ReactiveElement from \"../core/ReactiveElement.js\"; // eslint-disable-line no-unused-vars\nimport {\n  defaultState,\n  setState,\n  state,\n  stateEffects,\n  toggleSelectedFlag,\n} from \"./internal.js\";\n\n/**\n * Tracks multiple selection state for a list-like element.\n *\n * @module ItemsMultiSelectMixin\n * @param {Constructor<ReactiveElement>} Base\n */\nexport default function ItemsMultiSelectMixin(Base) {\n  // The class prototype added by the mixin.\n  class ItemsMultiSelect extends Base {\n    // @ts-ignore\n    get [defaultState]() {\n      return Object.assign(super[defaultState] || {}, {\n        selectedItemFlags: null,\n        selectedItems: null,\n      });\n    }\n\n    [stateEffects](state, changed) {\n      const effects = super[stateEffects]\n        ? super[stateEffects](state, changed)\n        : {};\n\n      if (changed.selectedItemFlags && state.items && state.selectedItemFlags) {\n        const { items, selectedItemFlags } = state;\n\n        // If new selectedItemFlags array size doesn't match that of items array,\n        // create a new selectedItemFlags array that matches size.\n        if (selectedItemFlags.length !== items.length) {\n          const newSelectedFlags =\n            selectedItemFlags.length > items.length\n              ? // Trim to fit\n                selectedItemFlags.slice(0, items.length)\n              : // Stretch to fit\n                [\n                  ...selectedItemFlags,\n                  ...Array(items.length - selectedItemFlags.length).fill(false),\n                ];\n          Object.assign(effects, {\n            selectedItemFlags: newSelectedFlags,\n          });\n        } else {\n          // Size of selectedItemFlags matches items array. Reflect the new\n          // selection in selectedItems.\n          const selectedItems = items.filter(\n            (item, index) => selectedItemFlags[index]\n          );\n          Object.assign(effects, { selectedItems });\n        }\n      } else if (changed.items && state.items) {\n        // If items change but selectedItemFlags doesn't, try to (re)initialize\n        // selectedItemFlags using the latest set of selectedItems.\n        const { items, selectedItems } = state;\n        const selectedItemFlags = selectedItemsToFlags(items, selectedItems);\n        Object.assign(effects, { selectedItemFlags });\n      }\n\n      return effects;\n    }\n\n    /**\n     * Toggle the element of the `selectedItemFlags` array with the given index.\n     *\n     * If the `toggle` parameter is omitted, the indicated flag is flipped. If a\n     * boolean value is supplied for `toggle`, the flag is set to that value.\n     *\n     * @protected\n     * @param {number} index - the index into the `selectedItemFlags` array\n     * @param {boolean} [toggle] - if supplied, the value to set the flag to\n     */\n    [toggleSelectedFlag](index, toggle) {\n      if (super[toggleSelectedFlag]) {\n        super[toggleSelectedFlag](index, toggle);\n      }\n\n      // Create a new copy of selectedItemFlags\n      const newSelectedFlags = [...this[state].selectedItemFlags];\n\n      // Apply the toggle. If undefined, flip the current value.\n      newSelectedFlags[index] =\n        toggle !== undefined ? toggle : !newSelectedFlags[index];\n\n      this[setState]({\n        selectedItemFlags: newSelectedFlags,\n      });\n    }\n  }\n\n  return ItemsMultiSelect;\n}\n\n// Given a complete set of items and a subset of selected items, return an array\n// of booleans indicating which items are selected.\nexport function selectedItemsToFlags(items, selectedItems) {\n  return items.map((item) =>\n    selectedItems ? selectedItems.indexOf(item) >= 0 : false\n  );\n}\n","import { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\"; // eslint-disable-line no-unused-vars\nimport { ids, render, state } from \"./internal.js\";\n\nconst wrap = Symbol(\"wrap\");\n\n/**\n * Adds a page number and total page count to a carousel-like element.\n *\n * This can be applied to components like [Carousel](Carousel) that renders\n * their content as pages.\n *\n * @module PageNumbersMixin\n * @param {Constructor<ReactiveElement>} Base\n * @part {div} page-number - the page number\n */\nfunction PageNumbersMixin(Base) {\n  class PageNumbers extends Base {\n    [render](/** @type {ChangedFlags} */ changed) {\n      if (super[render]) {\n        super[render](changed);\n      }\n      if (changed.currentIndex) {\n        const { items, currentIndex } = this[state];\n        const textContent =\n          currentIndex >= 0 && items\n            ? `${currentIndex + 1} / ${items.length}`\n            : \"\";\n        this[ids].pageNumber.textContent = textContent;\n      }\n    }\n\n    /**\n     * Destructively wrap a node with elements to show page numbers.\n     *\n     * @param {Element} target - the element that should be wrapped by page numbers\n     */\n    [wrap](target) {\n      const pageNumbers = fragmentFrom.html`\n        <div\n          id=\"pageNumbers\"\n          role=\"none\"\n          style=\"display: flex; flex: 1; overflow: hidden;\"\n        >\n          <style>\n            [part~=\"page-number\"] {\n              bottom: 0;\n              color: white;\n              padding: 0.5em;\n              position: absolute;\n              right: 0;\n            }\n          </style>\n          <div\n            id=\"pageNumbersContainer\"\n            role=\"none\"\n            style=\"display: flex; flex: 1; overflow: hidden; position: relative;\"\n          ></div>\n          <div id=\"pageNumber\" part=\"page-number\"></div>\n        </div>\n      `;\n\n      // Wrap the target with the page numbers.\n      const container = pageNumbers.getElementById(\"pageNumbersContainer\");\n      if (container) {\n        target.replaceWith(pageNumbers);\n        container.append(target);\n      }\n    }\n  }\n\n  return PageNumbers;\n}\n\nPageNumbersMixin.wrap = wrap;\n\nexport default PageNumbersMixin;\n","import DarkModeMixin from \"../base/DarkModeMixin.js\";\nimport { template } from \"../base/internal.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport PlainButton from \"./PlainButton.js\";\n\nconst Base = DarkModeMixin(PlainButton);\n\n/**\n * Left/right arrow button in the Plain reference design system\n *\n * This component is used by\n * [PlainArrowDirectionMixin](PlainArrowDirectionMixin) for its default\n * left/right arrow buttons.\n *\n * @inherits PlainButton\n * @mixes DarkModeMixin\n */\nclass PlainArrowDirectionButton extends Base {\n  get [template]() {\n    const result = super[template];\n    result.content.append(\n      fragmentFrom.html`\n        <style>\n          :host {\n            color: rgba(0, 0, 0, 0.7);\n          }\n\n          :host(:not([disabled]):hover) {\n            background: rgba(0, 0, 0, 0.2);\n            color: rgba(0, 0, 0, 0.8);\n            cursor: pointer;\n          }\n\n          :host([disabled]) {\n            color: rgba(0, 0, 0, 0.3);\n          }\n\n          [part~=\"button\"] {\n            fill: currentcolor;\n          }\n\n          :host([dark]) {\n            color: rgba(255, 255, 255, 0.7);\n          }\n\n          :host([dark]:not([disabled]):hover) {\n            background: rgba(255, 255, 255, 0.2);\n            color: rgba(255, 255, 255, 0.8);\n          }\n\n          :host([dark][disabled]) {\n            color: rgba(255, 255, 255, 0.3);\n          }\n        </style>\n      `\n    );\n    return result;\n  }\n}\n\nexport default PlainArrowDirectionButton;\n","import {\n  defaultState,\n  ids,\n  render,\n  state,\n  template,\n} from \"../base/internal.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\"; // eslint-disable-line no-unused-vars\nimport PlainArrowDirectionButton from \"./PlainArrowDirectionButton.js\";\n\n/**\n * ArrowDirectionMixin styles in the Plain reference design system\n *\n * @module PlainArrowDirectionMixin\n * @param {Constructor<ReactiveElement>} Base\n * @part {PlainArrowDirectionButton} arrow-button\n * @part arrow-icon - both of the default arrow icons used in the arrow buttons\n * @part arrow-icon-next - the arrow icon that points to the next item\n * @part arrow-icon-previous - the arrow icon that points to the previous item\n */\nexport default function PlainArrowDirectionMixin(Base) {\n  return class PlainArrowDirection extends Base {\n    // @ts-ignore\n    get [defaultState]() {\n      return Object.assign(super[defaultState] || {}, {\n        arrowButtonPartType: PlainArrowDirectionButton,\n      });\n    }\n\n    [render](/** @type {ChangedFlags} */ changed) {\n      super[render](changed);\n\n      // Rotate the default icons for vertical orientation, flip the default\n      // icons for right-to-left.\n      if (changed.orientation || changed.rightToLeft) {\n        const { orientation, rightToLeft } = this[state];\n        const vertical = orientation === \"vertical\";\n        const transform = vertical\n          ? \"rotate(90deg)\"\n          : rightToLeft\n          ? \"rotateZ(180deg)\"\n          : \"\";\n        if (this[ids].arrowIconPrevious) {\n          this[ids].arrowIconPrevious.style.transform = transform;\n        }\n        if (this[ids].arrowIconNext) {\n          this[ids].arrowIconNext.style.transform = transform;\n        }\n      }\n\n      // Apply dark mode to buttons.\n      if (changed.dark) {\n        const { dark } = this[state];\n        /** @type {any} */ const arrowButtonPrevious = this[ids]\n          .arrowButtonPrevious;\n        /** @type {any} */ const arrowButtonNext = this[ids].arrowButtonNext;\n        if (\"dark\" in arrowButtonPrevious) {\n          /** @type {any} */ (arrowButtonPrevious).dark = dark;\n        }\n        if (\"dark\" in arrowButtonNext) {\n          /** @type {any} */ (arrowButtonNext).dark = dark;\n        }\n      }\n    }\n\n    get [template]() {\n      const result = super[template];\n\n      // Insert our icons into the button slots.\n      const arrowButtonPrevious = result.content.querySelector(\n        'slot[name=\"arrowButtonPrevious\"]'\n      );\n      if (arrowButtonPrevious) {\n        arrowButtonPrevious.append(\n          fragmentFrom.html`\n            <svg\n              id=\"arrowIconPrevious\"\n              part=\"arrow-icon arrow-icon-previous\"\n              viewBox=\"0 0 24 24\"\n              preserveAspectRatio=\"xMidYMid meet\"\n              style=\"fill: currentColor; height: 1em; width: 1em;\"\n            >\n              <g>\n                <path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"></path>\n              </g>\n            </svg>\n          `\n        );\n      }\n      const arrowButtonNext = result.content.querySelector(\n        'slot[name=\"arrowButtonNext\"]'\n      );\n      if (arrowButtonNext) {\n        arrowButtonNext.append(\n          fragmentFrom.html`\n            <svg\n              id=\"arrowIconNext\"\n              part=\"arrow-icon arrow-icon-next\"\n              viewBox=\"0 0 24 24\"\n              preserveAspectRatio=\"xMidYMid meet\"\n              style=\"fill: currentColor; height: 1em; width: 1em;\"\n            >\n              <g>\n                <path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"></path>\n              </g>\n            </svg>\n          `\n        );\n      }\n\n      return result;\n    }\n  };\n}\n","import { updateChildNodes } from \"../core/dom.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport { transmute } from \"../core/template.js\";\nimport Input from \"./Input.js\";\nimport {\n  defaultState,\n  firstRender,\n  ids,\n  inputDelegate,\n  matchText,\n  raiseChangeEvents,\n  render,\n  rendered,\n  setState,\n  shadowRoot,\n  state,\n  template,\n} from \"./internal.js\";\nimport ListBox from \"./ListBox.js\";\n\n/**\n * A text input box that completes text as the user types\n *\n * @inherits Input\n */\nclass AutoCompleteInput extends Input {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      autoCompleteSelect: false,\n      opened: false,\n      originalText: \"\",\n      textIndex: -1,\n      texts: [],\n    });\n  }\n\n  /**\n   * Search the given array of text strings for one that matches `prefix`.\n   *\n   * This method is invoked by the auto-complete algorithm when the user types\n   * characters into the input.\n   *\n   * The default implementation does a case-insensitive prefix search. You can\n   * override this method to define custom auto-complete behavior. Return the\n   * complete matching string if a match was found, or null if there was no\n   * match.\n   *\n   * @param {string[]} texts\n   * @param {string} prefix\n   * @returns {string|null}\n   */\n  [matchText](texts, prefix) {\n    if (prefix.length === 0 || !texts) {\n      return null;\n    }\n    const prefixLowerCase = prefix.toLowerCase();\n    const match = texts.find((text) =>\n      text.toLowerCase().startsWith(prefixLowerCase)\n    );\n    return match || null;\n  }\n\n  get opened() {\n    return this[state].opened;\n  }\n  set opened(opened) {\n    this[setState]({ opened });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n    if (this[firstRender]) {\n      // In many ways it would be cleaner to do AutoComplete work in a keydown\n      // listener. Unfortunately, Chrome for Android sets the keyCode on *all*\n      // keydown events to a mysterious 229 value, making it impossible for us\n      // to look at the keyCode and determine whether the user is typing a key\n      // that should trigger AutoComplete.\n      //\n      // Instead, we listen to input events. That comes with its own set of\n      // headaches, noted below.\n      this[ids].inner.addEventListener(\"input\", () => {\n        // Gboard will generate multiple input events for a single keypress. In\n        // particular, if we do AutoComplete and leave the text selected, then\n        // when the user types the next key, we'll get *three* input events: one\n        // for the actual change, and two other events (probably related to\n        // Gboard's own AutoComplete behavior). We give the input value a chance\n        // to stabilize by waiting a tick.\n        setTimeout(() => {\n          this[raiseChangeEvents] = true;\n          /** @type {any} */\n          const inner = this.inner;\n          const text = this.value.toLowerCase();\n          // We only AutoComplete if the user's typing at the end of the input.\n          // Read the selection start and end directly off the inner element to\n          // ensure they're up to date.\n          const typingAtEnd =\n            inner.selectionStart === text.length &&\n            inner.selectionEnd === text.length;\n          // Moreover, we only AutoComplete if we're sure the user's added a\n          // single character to the value seen on the previous input event.\n          // Among other things, we want to ensure the user can delete text from\n          // the end without having AutoComplete kick in.\n          const originalText = this[state].originalText;\n          const userAddedText =\n            text.startsWith(originalText) &&\n            text.length === originalText.length + 1;\n          if (typingAtEnd && userAddedText) {\n            autoComplete(this);\n          }\n          // Remember what the user typed for next time.\n          this[setState]({\n            originalText: text,\n          });\n          this[raiseChangeEvents] = false;\n        });\n      });\n\n      transmute(this[ids].accessibleList, ListBox);\n    }\n\n    // Let ARIA know whether combo box is open.\n    if (changed.opened) {\n      const { opened } = this[state];\n      this[ids].inner.setAttribute(\"aria-expanded\", opened.toString());\n    }\n\n    // Copy the text values to the invisible, accessible list.\n    // TODO: We could defer this work to after the component gets focus.\n    if (changed.texts) {\n      const { texts } = this[state];\n      const options =\n        texts === null\n          ? []\n          : texts.map((text) => {\n              const div = document.createElement(\"div\");\n              div.textContent = text;\n              return div;\n            });\n      updateChildNodes(this[ids].accessibleList, options);\n    }\n\n    // Select the the accessible list item for the current text.\n    if (changed.textIndex) {\n      const { textIndex } = this[state];\n\n      /** @type {any} */ const list = this[ids].accessibleList;\n      if (\"currentIndex\" in list) {\n        list.currentIndex = textIndex;\n      }\n\n      const item = list.currentItem;\n      const id = item ? item.id : null;\n      if (id) {\n        this[inputDelegate].setAttribute(\"aria-activedescendant\", id);\n      } else {\n        this[inputDelegate].removeAttribute(\"aria-activedescendant\");\n      }\n    }\n  }\n\n  [rendered](/** @type {ChangedFlags} */ changed) {\n    super[rendered](changed);\n    const { autoCompleteSelect, originalText } = this[state];\n    if (changed.originalText && autoCompleteSelect) {\n      // We've finished rendering new auto-completed text.\n      // Leave the auto-completed portion (after the part the user originally\n      // typed) selected.\n      this[setState]({\n        autoCompleteSelect: false,\n        selectionEnd: this[state].value.length,\n        selectionStart: originalText.length,\n      });\n\n      // Dispatch an input event so that listeners can process the\n      // auto-completed text.\n      // @ts-ignore\n      const InputEvent = window.InputEvent || Event;\n      const event = new InputEvent(\"input\", {\n        // @ts-ignore\n        detail: {\n          originalText,\n        },\n      });\n      this.dispatchEvent(event);\n    }\n  }\n\n  get [template]() {\n    const result = super[template];\n\n    // Apply ARIA combobox attributes to the input.\n    const inner = result.content.querySelector('[part~=\"input\"]');\n    if (inner) {\n      inner.setAttribute(\"aria-autocomplete\", \"both\");\n      inner.setAttribute(\"aria-controls\", \"accessibleList\");\n      inner.setAttribute(\"role\", \"combobox\");\n    }\n\n    // Add an accessible list.\n    result.content.append(fragmentFrom.html`\n      <style>\n        #accessibleList {\n          height: 0;\n          position: absolute;\n          width: 0;\n        }\n      </style>\n      <div id=\"accessibleList\" tabindex=\"-1\"></div>\n    `);\n\n    return result;\n  }\n\n  /**\n   * The set of texts the input will match against.\n   *\n   * @type {string[]}\n   */\n  get texts() {\n    return this[state].texts;\n  }\n  set texts(texts) {\n    this[setState]({ texts });\n  }\n\n  // Setting the value from the outside is treated as if the user had typed the\n  // value. This way the component's value can be prepopulated, and the user can\n  // start typing at the end of it to get AutoComplete.\n  // @ts-ignore\n  get value() {\n    return super.value;\n  }\n  set value(value) {\n    super.value = value;\n    // If the input has focus, we assume the user is typing, and rely on\n    // the `input` event to update the originalText state.\n    if (this[shadowRoot] && !this.inner.matches(\":focus\")) {\n      this[setState]({\n        originalText: value,\n      });\n    }\n  }\n}\n\nexport function autoComplete(/** @type {AutoCompleteInput} */ element) {\n  const match = element[matchText](element.texts, element.value);\n\n  // If found, update the input value to the match.\n  // Leave the auto-completed portion selected.\n  if (match) {\n    element[setState]({\n      autoCompleteSelect: true,\n      value: match,\n    });\n  }\n\n  return match;\n}\n\nexport default AutoCompleteInput;\n","import AutoCompleteInput from \"./AutoCompleteInput.js\";\nimport { defaultState, ids, render, state } from \"./internal.js\";\nimport ItemsTextMixin from \"./ItemsTextMixin.js\";\nimport ListComboBox from \"./ListComboBox.js\";\n\nconst Base = ItemsTextMixin(ListComboBox);\n\n/**\n * A combo box that auto-completes the user's input against the list items\n *\n * @inherits ListComboBox\n * @mixes ItemsTextMixin\n * @part {AutoCompleteInput} input\n */\nclass AutoCompleteComboBox extends Base {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      inputPartType: AutoCompleteInput,\n    });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n    if (changed.texts) {\n      if (\"texts\" in this[ids].input) {\n        /** @type {any} */ (this[ids].input).texts = this[state].texts;\n      }\n    }\n  }\n}\n\nexport default AutoCompleteComboBox;\n","import AutoCompleteInput from \"../base/AutoCompleteInput.js\";\nimport PlainInputMixin from \"./PlainInputMixin.js\";\n\n/**\n * AutoCompleteInput component in the Plain reference design system\n *\n * @inherits AutoCompleteInput\n */\nclass PlainAutoCompleteInput extends PlainInputMixin(AutoCompleteInput) {}\n\nexport default PlainAutoCompleteInput;\n","import AutoCompleteComboBox from \"../base/AutoCompleteComboBox.js\";\nimport { defaultState } from \"../base/internal.js\";\nimport PlainAutoCompleteInput from \"./PlainAutoCompleteInput.js\";\nimport PlainComboBoxMixin from \"./PlainComboBoxMixin.js\";\nimport PlainListBox from \"./PlainListBox.js\";\n\n/**\n * AutoCompleteComboBox component in the Plain reference design system\n *\n * @inherits AutoCompleteComboBox\n * @mixes PlainComboBoxMixin\n * @part {PlainListBox} list\n */\nclass PlainAutoCompleteComboBox extends PlainComboBoxMixin(\n  AutoCompleteComboBox\n) {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      inputPartType: PlainAutoCompleteInput,\n      listPartType: PlainListBox,\n    });\n  }\n}\n\nexport default PlainAutoCompleteComboBox;\n","import { templateFrom } from \"../core/htmlLiterals.js\";\nimport FormElementMixin from \"./FormElementMixin.js\";\nimport {\n  defaultState,\n  firstRender,\n  ids,\n  raiseChangeEvents,\n  render,\n  rendered,\n  setState,\n  state,\n  stateEffects,\n  template,\n} from \"./internal.js\";\nimport SlotContentMixin from \"./SlotContentMixin.js\";\nimport TrackTextSelectionMixin from \"./TrackTextSelectionMixin.js\";\nimport WrappedStandardElement from \"./WrappedStandardElement.js\";\n\nconst Base = FormElementMixin(\n  SlotContentMixin(\n    TrackTextSelectionMixin(WrappedStandardElement.wrap(\"textarea\"))\n  )\n);\n\n/**\n * Text area that grows to accommodate its content\n *\n * [This text area grows as you add text](/demos/autoSizeTextarea.html)\n *\n * This text input component is useful in situations where you want to ask the\n * user to enter as much text as they want, but don't want to take up a lot of\n * room on the page.\n *\n * *Note:* This component uses [WrappedStandardElement](WrappedStandardElement)\n * to wrap a standard `<textarea>` element. This allows it to provide all\n * standard `HTMLTextAreaElement` properties, methods, and events, in addition\n * to those specifically listed in the `AutoSizeTextarea` API.\n *\n * @inherits WrappedStandardElement\n * @mixes FormElementMixin\n * @mixes SlotContentMixin\n * @mixes TrackTextSelectionMixin\n * @part textarea - the inner standard HTML textarea\n */\nclass AutoSizeTextarea extends Base {\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name === \"minimum-rows\") {\n      this.minimumRows = Number(newValue);\n    } else {\n      super.attributeChangedCallback(name, oldValue, newValue);\n    }\n  }\n\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      minimumRows: 1,\n      value: null,\n      valueTracksContent: true,\n    });\n  }\n\n  /**\n   * Determines the minimum number of rows shown. This is similar to the rows\n   * attribute on a standard textarea, but because this element can grow, is\n   * expressed as a minimum rather than a fixed number.\n   *\n   * By default, this property is 1, so when empty, the text area will be a\n   * single line tall. That's efficient in terms of the space it consumes, but\n   * until the user interacts with the element, they may not realize they can\n   * enter multiple lines of text. Setting the property to a value higher than 1\n   * will signal to the user that they can enter multiple lines of a text.\n   *\n   * By setting this property, you can also communicate to the user some sense\n   * of how much text you're expecting them to provide. For example, on a\n   * feedback form, asking the user to enter their feedback in a single-line\n   * text box implies you don't really want them to enter much text — even if\n   * the text box will grow when they type. By setting this to a value like,\n   * say, 10 rows, you can signal that you're fully expecting them to enter more\n   * text.\n   *\n   * @type {number}\n   * @default 1\n   */\n  get minimumRows() {\n    return this[state].minimumRows;\n  }\n  set minimumRows(minimumRows) {\n    if (!isNaN(minimumRows)) {\n      this[setState]({ minimumRows });\n    }\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n\n    if (this[firstRender]) {\n      /**\n       * Raised when the user changes the element's text content.\n       *\n       * This is the standard `input` event; the component does not do any work\n       * to raise it. It is documented here to let people know it is available\n       * to detect when the user edits the content.\n       *\n       * @event input\n       */\n      this[ids].inner.addEventListener(\"input\", () => {\n        this[raiseChangeEvents] = true;\n        /** @type {any} */\n        const inner = this[ids].inner;\n        this[setState]({\n          value: inner.value,\n          valueTracksContent: false,\n        });\n        this[raiseChangeEvents] = false;\n      });\n    }\n\n    const { copyStyle, lineHeight, minimumRows, value } = this[state];\n    if (changed.copyStyle) {\n      Object.assign(this[ids].copyContainer.style, copyStyle);\n    }\n\n    if (changed.lineHeight || (changed.minimumRows && lineHeight != null)) {\n      const minHeight = minimumRows * lineHeight;\n      this[ids].copyContainer.style.minHeight = `${minHeight}px`;\n    }\n\n    if (changed.value) {\n      /** @type {HTMLTextAreaElement} */ (this[ids].inner).value = value;\n      this[ids].textCopy.textContent = value;\n    }\n  }\n\n  [rendered](/** @type {ChangedFlags} */ changed) {\n    super[rendered](changed);\n    if (this[firstRender]) {\n      // For auto-sizing to work, we need the text copy to have the same border,\n      // padding, and other relevant characteristics as the original text area.\n      // Since those aspects are affected by CSS, we have to wait until the\n      // element is in the document before we can update the text copy.\n      const textareaStyle = getComputedStyle(this[ids].inner);\n      const lineHeight = this[ids].extraSpace.clientHeight;\n      this[setState]({\n        copyStyle: {\n          \"border-bottom-style\": textareaStyle.borderBottomStyle,\n          \"border-bottom-width\": textareaStyle.borderBottomWidth,\n          \"border-left-style\": textareaStyle.borderLeftStyle,\n          \"border-left-width\": textareaStyle.borderLeftWidth,\n          \"border-right-style\": textareaStyle.borderRightStyle,\n          \"border-right-width\": textareaStyle.borderRightWidth,\n          \"border-top-style\": textareaStyle.borderTopStyle,\n          \"border-top-width\": textareaStyle.borderTopWidth,\n          \"padding-bottom\": textareaStyle.paddingBottom,\n          \"padding-left\": textareaStyle.paddingLeft,\n          \"padding-right\": textareaStyle.paddingRight,\n          \"padding-top\": textareaStyle.paddingTop,\n        },\n        lineHeight,\n      });\n    }\n\n    if (changed.value && this[raiseChangeEvents]) {\n      const { value } = this[state];\n      /**\n       * Raised when the `value` property changes.\n       *\n       * @event input\n       */\n      const event = new CustomEvent(\"input\", {\n        bubbles: true,\n        detail: { value },\n      });\n      this.dispatchEvent(event);\n    }\n  }\n\n  // APIs like setRangeText need to be patched so we know when we need to\n  // updated our state that represents the textarea's value.\n  setRangeText(...args) {\n    super.setRangeText(...args);\n    const inner = /** @type {any} */ (this[ids].inner);\n    this[setState]({ value: inner.value });\n  }\n\n  [stateEffects](state, changed) {\n    const effects = super[stateEffects](state, changed);\n\n    // If the value is tracking content and content changes, update the value.\n    if (\n      (changed.content || changed.valueTracksContent) &&\n      state.valueTracksContent\n    ) {\n      /** @type {Node[]} */ const content = state.content;\n      const value = getTextFromContent(content);\n      Object.assign(effects, { value });\n    }\n\n    return effects;\n  }\n\n  /*\n   * Things to note about this component's DOM structure:\n   *\n   * * The component works by copying the text to an invisible element which\n   *   will automatically grow in size; the expanding copy will expand the\n   *   container, which in turn will vertically stretch the text area to match.\n   *\n   * * The invisible copyContainer contains an extra space element that ensures\n   *   that, even if the last line of the textarea is blank, there will be\n   *   something in the line that forces the text copy to grow by a line.\n   *\n   * * The inner text element has box-sizing: border-box, but the copy has\n   *   content-box. The latter makes it easier for us to set the minimum height\n   *   of the copy by just setting the height of the content, without having to\n   *   account for borders and padding.\n   *\n   * * We put the slot inside an element that's hidden. This gives us easy\n   *   access to assigned content so we can copy into the textarea, while\n   *   ensuring the original content doesn't show up directly.\n   */\n  get [template]() {\n    return templateFrom.html`\n      <style>\n        :host {\n          display: block;\n        }\n\n        #autoSizeContainer {\n          position: relative;\n        }\n\n        [part~=\"textarea\"],\n        #copyContainer {\n          font: inherit;\n          margin: 0;\n        }\n\n        [part~=\"textarea\"] {\n          box-sizing: border-box;\n          height: 100%;\n          overflow: hidden;\n          position: absolute;\n          resize: none;\n          top: 0;\n          width: 100%;\n        }\n\n        #copyContainer {\n          box-sizing: content-box;\n          visibility: hidden;\n          white-space: pre-wrap;\n          word-wrap: break-word;\n        }\n\n        #extraSpace {\n          display: inline-block;\n          width: 0;\n        }\n      </style>\n      <div id=\"autoSizeContainer\">\n        <textarea id=\"inner\" part=\"inner textarea\"></textarea>\n        <div id=\"copyContainer\"><span id=\"textCopy\"></span><span id=\"extraSpace\">&nbsp;</span></div>\n      </div>\n      <div hidden>\n        <slot></slot>\n      </div>\n    `;\n  }\n\n  /**\n   * The text currently shown in the textarea.\n   *\n   * Note that the text shown in the textarea can also be updated by changing\n   * the element's innerHTML/textContent. However, if the value property is\n   * explicitly set, that will override the innerHTML/textContent.\n   *\n   * @type {string}\n   */\n  get value() {\n    return this[state].value;\n  }\n  set value(value) {\n    this[setState]({\n      value: String(value),\n      valueTracksContent: false,\n    });\n  }\n}\n\n// Return the text represented by the given content nodes.\nfunction getTextFromContent(/** @type {Node[]} */ contentNodes) {\n  if (contentNodes === null) {\n    return \"\";\n  }\n  const texts = [...contentNodes].map((node) => node.textContent);\n  const text = texts.join(\"\").trim();\n  return unescapeHtml(text);\n}\n\nfunction unescapeHtml(/** @type {string} */ html) {\n  return html\n    .replace(/&amp;/g, \"&\")\n    .replace(/&lt;/g, \"<\")\n    .replace(/&gt;/g, \">\")\n    .replace(/&quot;/g, '\"')\n    .replace(/&#039;/g, \"'\");\n}\n\nexport default AutoSizeTextarea;\n","import { setInternalState } from \"../core/dom.js\";\nimport { templateFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\";\nimport * as calendar from \"./calendar.js\";\nimport CalendarElementMixin from \"./CalendarElementMixin.js\";\nimport {\n  defaultState,\n  ids,\n  render,\n  setState,\n  state,\n  template,\n} from \"./internal.js\";\nimport SelectableMixin from \"./SelectableMixin.js\";\n\nconst Base = CalendarElementMixin(SelectableMixin(ReactiveElement));\n\n/**\n * Calendar representation of a single day.\n *\n * [A default representation of the current day in browser's default locale](/demos/calendarDay.html)\n *\n * Given a reference `date` property, this component will show a calendar\n * representation of that date.\n *\n * [CalendarDays](CalendarDays), and [CalendarMonth](CalendarMonth) instantiate\n * `CalendarDay` as the default component for rendering days.\n *\n * All of the Elix calendar components attempt to provide full\n * [international calendar support](CalendarMonth#international-support)\n * to the extent currently possible in the user's web browser.\n *\n * @inherits ReactiveElement\n * @mixes CalendarElementMixin\n * @mixes SelectableMixin\n * @state alternate-month\n * @state first-day-of-month\n * @state first-week\n * @state friday\n * @state future\n * @state last-day-of-month\n * @state monday\n * @state outside-range\n * @state past\n * @state saturday\n * @state sunday\n * @state thursday\n * @state today\n * @state tuesday\n * @state wednesday\n * @state weekday\n * @state weekend\n */\nclass CalendarDay extends Base {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      date: calendar.today(),\n      outsideRange: false,\n    });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n\n    const { date } = this[state];\n    if (changed.date) {\n      const today = calendar.today();\n      const dayOfWeek = date.getDay();\n      const dayOfMonth = date.getDate();\n      const nextDate = calendar.offsetDateByDays(date, 1);\n      const daysFromToday =\n        Math.round(date.getTime() - today.getTime()) /\n        calendar.millisecondsPerDay;\n      setInternalState(\n        this,\n        \"alternate-month\",\n        Math.abs(date.getMonth() - today.getMonth()) % 2 === 1\n      );\n      setInternalState(this, \"first-day-of-month\", dayOfMonth === 1);\n      setInternalState(this, \"first-week\", dayOfMonth <= 7);\n      setInternalState(this, \"future\", date > today);\n      setInternalState(\n        this,\n        \"last-day-of-month\",\n        date.getMonth() !== nextDate.getMonth()\n      );\n      setInternalState(this, \"past\", date < today);\n      setInternalState(this, \"sunday\", dayOfWeek === 0);\n      setInternalState(this, \"monday\", dayOfWeek === 1);\n      setInternalState(this, \"tuesday\", dayOfWeek === 2);\n      setInternalState(this, \"wednesday\", dayOfWeek === 3);\n      setInternalState(this, \"thursday\", dayOfWeek === 4);\n      setInternalState(this, \"friday\", dayOfWeek === 5);\n      setInternalState(this, \"saturday\", dayOfWeek === 6);\n\n      setInternalState(this, \"today\", daysFromToday === 0);\n      this[ids].day.textContent = dayOfMonth.toString();\n    }\n\n    if (changed.date || changed.locale) {\n      const dayOfWeek = date.getDay();\n      const { locale } = this[state];\n      const weekend =\n        dayOfWeek === calendar.weekendStart(locale) ||\n        dayOfWeek === calendar.weekendEnd(locale);\n      setInternalState(this, \"weekday\", !weekend);\n      setInternalState(this, \"weekend\", weekend);\n    }\n\n    if (changed.outsideRange) {\n      setInternalState(this, \"outside-range\", this[state].outsideRange);\n    }\n  }\n\n  get outsideRange() {\n    return this[state].outsideRange;\n  }\n  set outsideRange(outsideRange) {\n    this[setState]({ outsideRange });\n  }\n\n  get [template]() {\n    return templateFrom.html`\n      <style>\n        :host {\n          box-sizing: border-box;\n          display: inline-block;\n        }\n      </style>\n      <div id=\"day\"></div>\n    `;\n  }\n}\n\nexport default CalendarDay;\n","import CalendarDay from \"../base/CalendarDay.js\";\nimport { template } from \"../base/internal.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\n\n/**\n * CalendarDay component in the Plain reference design system\n *\n * @inherits CalendarDay\n */\nclass PlainCalendarDay extends CalendarDay {\n  get [template]() {\n    const result = super[template];\n    result.content.append(\n      fragmentFrom.html`\n        <style>\n          :host {\n            padding: 0.3em;\n            text-align: right;\n          }\n\n          :host([weekend]) {\n            color: gray;\n          }\n\n          :host([outside-range]) {\n            color: lightgray;\n          }\n\n          :host([today]) {\n            color: darkred;\n            font-weight: bold;\n          }\n\n          :host([selected]) {\n            background: #ddd;\n          }\n        </style>\n      `\n    );\n    return result;\n  }\n}\n\nexport default PlainCalendarDay;\n","import Button from \"./Button.js\";\nimport SelectableMixin from \"./SelectableMixin.js\";\n\nconst Base = SelectableMixin(Button);\n\n/**\n * A button that tracks a selection state\n *\n * @inherits Button\n * @mixes SelectableMixin\n */\nclass SelectableButton extends Base {}\n\nexport default SelectableButton;\n","import { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport { createElement, transmute } from \"../core/template.js\";\nimport * as calendar from \"./calendar.js\";\nimport CalendarDay from \"./CalendarDay.js\";\nimport CalendarElementMixin from \"./CalendarElementMixin.js\";\nimport {\n  defaultState,\n  ids,\n  render,\n  setState,\n  state,\n  template,\n} from \"./internal.js\";\nimport SelectableButton from \"./SelectableButton.js\";\n\nconst Base = CalendarElementMixin(SelectableButton);\n\n/**\n * A selectable day button in an interactive calendar.\n *\n * @inherits SelectableButton\n * @mixes CalendarElementMixin\n * @part {CalendarDay} day - the day shown in the button\n */\nclass CalendarDayButton extends Base {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      date: calendar.today(),\n      dayPartType: CalendarDay,\n      outsideRange: false,\n      tabIndex: -1,\n    });\n  }\n\n  /**\n   * The class or tag used to create the `day` parts – the set of\n   * days shown in the calendar grid.\n   *\n   * @type {PartDescriptor}\n   * @default CalendarDay\n   */\n  get dayPartType() {\n    return this[state].dayPartType;\n  }\n  set dayPartType(dayPartType) {\n    this[setState]({ dayPartType });\n  }\n\n  get outsideRange() {\n    return this[state].outsideRange;\n  }\n  set outsideRange(outsideRange) {\n    this[setState]({ outsideRange });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n\n    if (changed.dayPartType) {\n      const { dayPartType } = this[state];\n      transmute(this[ids].day, dayPartType);\n    }\n\n    /** @type {any} */ const day = this[ids].day;\n    if (changed.dayPartType || changed.date) {\n      day.date = this[state].date;\n    }\n\n    if (changed.dayPartType || changed.locale) {\n      day.locale = this[state].locale;\n    }\n\n    if (changed.dayPartType || changed.outsideRange) {\n      day.outsideRange = this[state].outsideRange;\n    }\n\n    if (changed.dayPartType || changed.selected) {\n      // Reflect selected state to inner CalendarDay.\n      day.selected = this[state].selected;\n    }\n  }\n\n  get [template]() {\n    const result = super[template];\n\n    // Replace default slot with calendar day.\n    const defaultSlot = result.content.querySelector(\"slot:not([name])\");\n    if (defaultSlot) {\n      const dayPartType = this[state].dayPartType;\n      const day = createElement(dayPartType);\n      day.id = \"day\";\n      defaultSlot.replaceWith(day);\n    }\n\n    // Style outer button.\n    result.content.append(\n      fragmentFrom.html`\n        <style>\n          [part~=\"day\"] {\n            width: 100%;\n          }\n        </style>\n      `\n    );\n\n    return result;\n  }\n}\n\nexport default CalendarDayButton;\n","import CalendarDayButton from \"../base/CalendarDayButton.js\";\nimport { defaultState, template } from \"../base/internal.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport PlainCalendarDay from \"./PlainCalendarDay.js\";\n\n/**\n * CalendarDayButton component in the Plain reference design system\n *\n * @inherits CalendarDayButton\n * @part {PlainCalendarDay} day\n */\nclass PlainCalendarDayButton extends CalendarDayButton {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      dayPartType: PlainCalendarDay,\n    });\n  }\n\n  get [template]() {\n    const result = super[template];\n    result.content.append(\n      fragmentFrom.html`\n        <style>\n          :host {\n            border: 1px solid transparent;\n          }\n\n          :host(:hover) {\n            border-color: gray;\n          }\n\n          :host([selected]) {\n            background: #ddd;\n          }\n        </style>\n      `\n    );\n    return result;\n  }\n}\n\nexport default PlainCalendarDayButton;\n","import { templateFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\";\nimport * as calendar from \"./calendar.js\";\nimport {\n  defaultState,\n  render,\n  setState,\n  shadowRoot,\n  state,\n  template,\n} from \"./internal.js\";\n\n/**\n * Header showing the localized days of the week\n *\n * [A default representation of day names in browser's default locale](/demos/calendarDayNamesHeader.html)\n *\n * All of the Elix calendar components attempt to provide full\n * [international calendar support](CalendarMonth#international-support)\n * to the extent currently possible in the user's web browser.\n *\n * In the case of this component, it will show the appropriate names of the days\n * of the week for a specific locale (or, by default, the user's current\n * locale). The day(s) associated with the weekend in that locale will also be\n * indicated. It will also correctly reflect the typical first day of the week\n * for that locale. Example: U.S. calendars typically start with Sunday as the\n * first day of a week, while British calendars typically start with Monday as\n * the first day.\n *\n * @inherits ReactiveElement\n * @part day-name - any of the names for the days of the week\n */\nclass CalendarDayNamesHeader extends ReactiveElement {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      format: \"short\",\n      locale: navigator.language,\n    });\n  }\n\n  /**\n   * The format used to render the day names.\n   *\n   * @type {('long'|'narrow'|'short')}\n   * @default 'short'\n   */\n  get format() {\n    return this[state].format;\n  }\n  set format(format) {\n    this[setState]({ format });\n  }\n\n  /**\n   * A string that identifies a language and a region using a BCP 47 language\n   * tag. This works the same as the `CalendarElementMixin`\n   * [locale](CalendarElementMixin#locale) property.\n   *\n   * @type {string}\n   */\n  get locale() {\n    return this[state].locale;\n  }\n  set locale(locale) {\n    this[setState]({\n      locale: String(locale),\n    });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n    if (changed.format || changed.locale) {\n      const { format, locale } = this[state];\n      const formatter = calendar.dateTimeFormat(locale, {\n        weekday: format,\n      });\n      const firstDayOfWeek = calendar.firstDayOfWeek(locale);\n      const weekendStart = calendar.weekendStart(locale);\n      const weekendEnd = calendar.weekendEnd(locale);\n      const date = new Date(2017, 0, 1); // A Sunday\n      const dayNameParts = this[shadowRoot].querySelectorAll(\n        '[part~=\"day-name\"]'\n      );\n      for (let i = 0; i <= 6; i++) {\n        const dayOfWeek = (firstDayOfWeek + i) % 7;\n        date.setDate(dayOfWeek + 1);\n        const weekend = dayOfWeek === weekendStart || dayOfWeek === weekendEnd;\n        const dayElement = dayNameParts[i];\n        dayElement.toggleAttribute(\"weekday\", !weekend);\n        dayElement.toggleAttribute(\"weekend\", weekend);\n        dayElement.textContent = formatter.format(date);\n      }\n    }\n  }\n\n  get [template]() {\n    return templateFrom.html`\n      <style>\n        :host {\n          direction: ltr;\n          display: inline-grid;\n          grid-template-columns: repeat(7, 1fr);\n        }\n      </style>\n\n      <div id=\"day0\" part=\"day-name\"></div>\n      <div id=\"day1\" part=\"day-name\"></div>\n      <div id=\"day2\" part=\"day-name\"></div>\n      <div id=\"day3\" part=\"day-name\"></div>\n      <div id=\"day4\" part=\"day-name\"></div>\n      <div id=\"day5\" part=\"day-name\"></div>\n      <div id=\"day6\" part=\"day-name\"></div>\n    `;\n  }\n}\n\nexport default CalendarDayNamesHeader;\n","import CalendarDayNamesHeader from \"../base/CalendarDayNamesHeader.js\";\nimport { template } from \"../base/internal.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\n\n/**\n * CalendarDayNamesHeader component in the Plain reference design system\n *\n * @inherits CalendarDayNamesHeader\n */\nclass PlainCalendarDayNamesHeader extends CalendarDayNamesHeader {\n  get [template]() {\n    const result = super[template];\n    result.content.append(\n      fragmentFrom.html`\n        <style>\n          :host {\n            font-size: smaller;\n          }\n\n          [part~=\"day-name\"] {\n            padding: 0.3em;\n            text-align: center;\n            white-space: nowrap;\n          }\n\n          [weekend] {\n            color: gray;\n          }\n        </style>\n      `\n    );\n    return result;\n  }\n}\n\nexport default PlainCalendarDayNamesHeader;\n","import { updateChildNodes } from \"../core/dom.js\";\nimport { templateFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\";\nimport { createElement } from \"../core/template.js\";\nimport * as calendar from \"./calendar.js\";\nimport CalendarDay from \"./CalendarDay.js\";\nimport CalendarElementMixin from \"./CalendarElementMixin.js\";\nimport {\n  defaultState,\n  ids,\n  render,\n  setState,\n  state,\n  stateEffects,\n  template,\n} from \"./internal.js\";\n\nconst Base = CalendarElementMixin(ReactiveElement);\n\n/**\n * A 7-column grid of days for use in a month calendar or multi-week calendar.\n *\n * [A default representation of days in the current month in browser's default locale](/demos/calendarMonth.html)\n *\n * Given a `startDate` and `dayCount`, this component will show a calendar\n * representation of that many days starting from the indicated date.\n * [CalendarMonth](CalendarMonth) uses `CalendarDays` to render the days portion\n * of the month, to which it adds headers for the month/year and the days of the\n * week.\n *\n * All of the Elix calendar components attempt to provide full\n * [international calendar support](CalendarMonth#international-support)\n * to the extent currently possible in the user's web browser.\n *\n * @inherits ReactiveElement\n * @mixes CalendarElementMixin\n * @part {CalendarDay} day - any of the day elements in the grid\n * @part {div} day-container - container for the days\n */\nclass CalendarDays extends Base {\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name === \"start-date\") {\n      this.startDate = new Date(newValue);\n    } else {\n      super.attributeChangedCallback(name, oldValue, newValue);\n    }\n  }\n\n  /**\n   * Returns the day element corresponding to the given date, or null if the\n   * date falls outside this calendar week.\n   *\n   * @param {Date} date - the date to search for\n   */\n  dayElementForDate(date) {\n    /** @type {Element[]} */ const days = this.days || [];\n    return days.find((day) => {\n      /** @type {any} */ const cast = day;\n      return calendar.datesEqual(cast.date, date);\n    });\n  }\n\n  get dayCount() {\n    return this[state].dayCount;\n  }\n  set dayCount(dayCount) {\n    this[setState]({ dayCount });\n  }\n\n  /**\n   * The class or tag used to create the `day` parts – the set of\n   * days shown in the calendar grid.\n   *\n   * @type {PartDescriptor}\n   * @default CalendarDay\n   */\n  get dayPartType() {\n    return this[state].dayPartType;\n  }\n  set dayPartType(dayPartType) {\n    this[setState]({ dayPartType });\n  }\n\n  /**\n   * The elements for the days being displayed.\n   *\n   * @type {Element[]|null}\n   */\n  get days() {\n    return this[state].days;\n  }\n\n  // @ts-ignore\n  get [defaultState]() {\n    const today = calendar.today();\n    return Object.assign(super[defaultState], {\n      date: today,\n      dayCount: 1,\n      dayPartType: CalendarDay,\n      days: null,\n      showCompleteWeeks: false,\n      showSelectedDay: false,\n      startDate: today,\n    });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n    if (changed.days) {\n      updateChildNodes(this[ids].dayContainer, this[state].days);\n    }\n    if (changed.date || changed.locale || changed.showSelectedDay) {\n      // Ensure only current date has \"selected\" class.\n      const showSelectedDay = this[state].showSelectedDay;\n      const { date } = this[state];\n      const selectedDate = date.getDate();\n      const selectedMonth = date.getMonth();\n      const selectedYear = date.getFullYear();\n      /** @type {Element[]} */ const days = this.days || [];\n      days.forEach((day) => {\n        const dayDate = /** @type {any} */ (day).date;\n        const selected =\n          showSelectedDay &&\n          dayDate.getDate() === selectedDate &&\n          dayDate.getMonth() === selectedMonth &&\n          dayDate.getFullYear() === selectedYear;\n        day.toggleAttribute(\"selected\", selected);\n      });\n    }\n    if (changed.dayCount || changed.startDate) {\n      // Mark dates as inside or outside of range.\n      const { dayCount, startDate } = this[state];\n      const firstDateAfterRange = calendar.offsetDateByDays(\n        startDate,\n        dayCount\n      );\n      /** @type {any[]} */\n      const days = this[state].days || [];\n      days.forEach((day) => {\n        if (\"outsideRange\" in day) {\n          const dayDate = day.date;\n          const dayTime = dayDate.getTime();\n          const outsideRange =\n            dayTime < startDate.getTime() ||\n            dayTime >= firstDateAfterRange.getTime();\n          day.outsideRange = outsideRange;\n        }\n      });\n    }\n  }\n\n  get showCompleteWeeks() {\n    return this[state].showCompleteWeeks;\n  }\n  set showCompleteWeeks(showCompleteWeeks) {\n    this[setState]({ showCompleteWeeks });\n  }\n\n  get showSelectedDay() {\n    return this[state].showSelectedDay;\n  }\n  set showSelectedDay(showSelectedDay) {\n    this[setState]({ showSelectedDay });\n  }\n\n  get startDate() {\n    return this[state].startDate;\n  }\n  set startDate(startDate) {\n    if (!calendar.datesEqual(this[state].startDate, startDate)) {\n      this[setState]({ startDate });\n    }\n  }\n\n  [stateEffects](state, changed) {\n    const effects = super[stateEffects](state, changed);\n\n    // If any date-related state changes, regenerate the set of days.\n    if (\n      changed.dayCount ||\n      changed.dayPartType ||\n      changed.locale ||\n      changed.showCompleteWeeks ||\n      changed.startDate\n    ) {\n      const days = updateDays(state, changed.dayPartType);\n      Object.assign(effects, { days });\n    }\n\n    return effects;\n  }\n\n  get [template]() {\n    return templateFrom.html`\n      <style>\n        :host {\n          display: inline-block;\n        }\n\n        [part~=\"day-container\"] {\n          direction: ltr;\n          display: grid;\n          grid-template-columns: repeat(7, 1fr);\n        }\n      </style>\n\n      <div id=\"dayContainer\" part=\"day-container\"></div>\n    `;\n  }\n}\n\n/**\n * Create days as necessary for the given state.\n * Reuse existing day elements to the degree possible.\n *\n * @private\n * @param {PlainObject} state\n * @param {boolean} forceCreation\n */\nfunction updateDays(state, forceCreation) {\n  const { dayCount, dayPartType, locale, showCompleteWeeks, startDate } = state;\n  const workingStartDate = showCompleteWeeks\n    ? calendar.firstDateOfWeek(startDate, locale)\n    : calendar.midnightOnDate(startDate);\n  let workingDayCount;\n  if (showCompleteWeeks) {\n    const endDate = calendar.offsetDateByDays(startDate, dayCount - 1);\n    const workingEndDate = calendar.lastDateOfWeek(endDate, locale);\n    workingDayCount =\n      calendar.daysBetweenDates(workingStartDate, workingEndDate) + 1;\n  } else {\n    workingDayCount = dayCount;\n  }\n\n  let days = state.days ? state.days.slice() : [];\n\n  let date = workingStartDate;\n  for (let i = 0; i < workingDayCount; i++) {\n    const createNewElement = forceCreation || i >= days.length;\n    const day = createNewElement ? createElement(dayPartType) : days[i];\n    day.date = new Date(date.getTime());\n    day.locale = locale;\n    if (\"part\" in day) {\n      day.part = \"day\";\n    }\n    day.style.gridColumnStart = \"\";\n    if (createNewElement) {\n      days[i] = day;\n    }\n    date = calendar.offsetDateByDays(date, 1);\n  }\n\n  if (workingDayCount < days.length) {\n    // Trim days which are no longer needed.\n    days = days.slice(0, workingDayCount);\n  }\n\n  const firstDay = days[0];\n  if (firstDay && !showCompleteWeeks) {\n    // Set the grid-column on the first day. This will cause all the subsequent\n    // days to line up in the calendar grid.\n    const dayOfWeek = calendar.daysSinceFirstDayOfWeek(\n      firstDay.date,\n      state.locale\n    );\n    firstDay.style.gridColumnStart = dayOfWeek + 1;\n  }\n\n  Object.freeze(days);\n  return days;\n}\n\nexport default CalendarDays;\n","import CalendarDays from \"../base/CalendarDays.js\";\nimport { defaultState } from \"../base/internal.js\";\nimport PlainCalendarDay from \"./PlainCalendarDay.js\";\n\n/**\n * CalendarDays component in the Plain reference design system\n *\n * @inherits CalendarDays\n * @part {PlainCalendarDay} day\n */\nclass PlainCalendarDays extends CalendarDays {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      dayPartType: PlainCalendarDay,\n    });\n  }\n}\n\nexport default PlainCalendarDays;\n","import { templateFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\";\nimport * as calendar from \"./calendar.js\";\nimport CalendarElementMixin from \"./CalendarElementMixin.js\";\nimport {\n  defaultState,\n  ids,\n  render,\n  setState,\n  state,\n  template,\n} from \"./internal.js\";\n\nconst Base = CalendarElementMixin(ReactiveElement);\n\n/**\n * Header showing a localized month name and the year\n *\n * [A default representation of the month and year in browser's default locale](/demos/calendarMonthYearHeader.html)\n *\n * Given a reference `date` property, this component will show a calendar\n * representation of that month and year.\n *\n * All of the Elix calendar components attempt to provide full\n * [international calendar support](CalendarMonth#international-support)\n * to the extent currently possible in the user's web browser.\n *\n * [CalendarMonth](CalendarMonth) instantiates `CalendarMonthYearHeader` to show\n * the name of the current month and the year as a header for the calendar\n * month.\n *\n * @inherits ReactiveElement\n * @mixes CalendarElementMixin\n */\nclass CalendarMonthYearHeader extends Base {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      date: calendar.today(),\n      monthFormat: \"long\",\n      yearFormat: \"numeric\",\n    });\n  }\n\n  /**\n   * The format used to render the month name.\n   *\n   * The allowable formats are the same as the `month` formats in\n   * [Intl.DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat).\n   *\n   * @type {('numeric'|'2-digit'|'long'|'short'|'narrow')}\n   * @default 'long'\n   */\n  get monthFormat() {\n    return this[state].monthFormat;\n  }\n  set monthFormat(monthFormat) {\n    this[setState]({ monthFormat });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n    if (\n      changed.date ||\n      changed.locale ||\n      changed.monthFormat ||\n      changed.yearFormat\n    ) {\n      const { date, locale, monthFormat, yearFormat } = this[state];\n      /** @type {PlainObject} */ const formatOptions = {};\n      if (monthFormat) {\n        formatOptions.month = monthFormat;\n      }\n      if (yearFormat) {\n        formatOptions.year = yearFormat;\n      }\n      const formatter = calendar.dateTimeFormat(locale, formatOptions);\n      this[ids].formatted.textContent = formatter.format(date);\n    }\n  }\n\n  get [template]() {\n    return templateFrom.html`\n      <style>\n        :host {\n          display: inline-block;\n          text-align: center;\n        }\n      </style>\n      <div id=\"formatted\"></div>\n    `;\n  }\n\n  /**\n   * The format used to render the year.\n   *\n   * The allowable formats are the same as the `year` formats in\n   * [Intl.DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat).\n   *\n   * @type {('numeric'|'2-digit')}\n   * @default 'numeric'\n   */\n  get yearFormat() {\n    return this[state].yearFormat;\n  }\n  set yearFormat(yearFormat) {\n    this[setState]({ yearFormat });\n  }\n}\n\nexport default CalendarMonthYearHeader;\n","import { templateFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\";\nimport { transmute } from \"../core/template.js\";\nimport * as calendar from \"./calendar.js\";\nimport CalendarDay from \"./CalendarDay.js\";\nimport CalendarDayNamesHeader from \"./CalendarDayNamesHeader.js\";\nimport CalendarDays from \"./CalendarDays.js\";\nimport CalendarElementMixin from \"./CalendarElementMixin.js\";\nimport CalendarMonthYearHeader from \"./CalendarMonthYearHeader.js\";\nimport {\n  defaultState,\n  ids,\n  render,\n  setState,\n  shadowRoot,\n  state,\n  template,\n} from \"./internal.js\";\n\nconst Base = CalendarElementMixin(ReactiveElement);\n\n/**\n * A single calendar month, optimized for a given locale\n *\n * [A default representation for the current month in browser's default locale](/demos/calendarMonth.html)\n *\n * Given a reference `date` property, this component will show a calendar\n * representation of that month. To the extent possible, this representation is\n * sensitive to a specified locale: the names of the months and days of the week\n * will be in the appropriate language, and the day(s) associated with the\n * weekend in that locale will also be indicated.\n *\n * @inherits ReactiveElement\n * @mixes CalendarElementMixin\n * @part {CalendarDay} day - any of the day elements in the month grid\n * @part {CalendarDayNamesHeader} day-names-header - the column header showing the names of the days\n * @part {CalendarDays} month-days - the grid of days for the month\n * @part {CalendarMonthYearHeader} month-year-header - the calendar header showing the month and/or year\n * @part day-name - any of the names for the days of the week\n */\nclass CalendarMonth extends Base {\n  /**\n   * Returns the day element corresponding to the given date, or null if the\n   * date falls outside the range currently covered by this calendar.\n   *\n   * @param {Date} date - the date to search for\n   * @returns {Element|null}\n   */\n  dayElementForDate(date) {\n    /** @type {any} */\n    const monthDays = this[ids].monthDays;\n    return (\n      monthDays &&\n      \"dayElementForDate\" in monthDays &&\n      monthDays.dayElementForDate(date)\n    );\n  }\n\n  /**\n   * The class or tag used to create the header showing the\n   * day names.\n   *\n   * @type {PartDescriptor}\n   * @default CalendarDayNamesHeader\n   */\n  get dayNamesHeaderPartType() {\n    return this[state].dayNamesHeaderPartType;\n  }\n  set dayNamesHeaderPartType(dayNamesHeaderPartType) {\n    this[setState]({ dayNamesHeaderPartType });\n  }\n\n  /**\n   * The class or tag used to create the `day` parts – the set of\n   * days shown in the calendar grid.\n   *\n   * @type {PartDescriptor}\n   * @default CalendarDay\n   */\n  get dayPartType() {\n    return this[state].dayPartType;\n  }\n  set dayPartType(dayPartType) {\n    this[setState]({ dayPartType });\n  }\n\n  /**\n   * Returns the day elements contained by this calendar. Note that this may\n   * include days from the previous/next month that fall in the same week as\n   * the first/last day of the present month.\n   *\n   * @type {Element[]}\n   */\n  get days() {\n    return this[shadowRoot]\n      ? /** @type {any} */ (this[ids].monthDays).days\n      : [];\n  }\n\n  /**\n   * The format used to render the day names in the week days header.\n   *\n   * The allowable formats are the same as the `weekday` formats in\n   * [Intl.DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat).\n   *\n   * @type {('long'|'narrow'|'short')}\n   * @default 'short'\n   */\n  get daysOfWeekFormat() {\n    return this[state].daysOfWeekFormat;\n  }\n  set daysOfWeekFormat(daysOfWeekFormat) {\n    this[setState]({ daysOfWeekFormat });\n  }\n\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      date: calendar.today(),\n      dayNamesHeaderPartType: CalendarDayNamesHeader,\n      dayPartType: CalendarDay,\n      daysOfWeekFormat: \"short\",\n      monthDaysPartType: CalendarDays,\n      monthFormat: \"long\",\n      monthYearHeaderPartType: CalendarMonthYearHeader,\n      showCompleteWeeks: false,\n      showSelectedDay: false,\n      yearFormat: \"numeric\",\n    });\n  }\n\n  /**\n   * The format used to render the month name.\n   *\n   * The allowable formats are the same as the `month` formats in\n   * [Intl.DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat).\n   *\n   * @type {('numeric'|'2-digit'|'long'|'short'|'narrow')}\n   * @default 'long'\n   */\n  get monthFormat() {\n    return this[state].monthFormat;\n  }\n  set monthFormat(monthFormat) {\n    this[setState]({ monthFormat });\n  }\n\n  /**\n   * The class or tag used to create the grid of days.\n   *\n   * @type {PartDescriptor}\n   * @default CalendarDays\n   */\n  get monthDaysPartType() {\n    return this[state].monthDaysPartType;\n  }\n  set monthDaysPartType(monthDaysPartType) {\n    this[setState]({ monthDaysPartType });\n  }\n\n  /**\n   * The class or tag used to create the header showing the\n   * month and year.\n   *\n   * @type {PartDescriptor}\n   * @default CalendarMonthYearHeader\n   */\n  get monthYearHeaderPartType() {\n    return this[state].monthYearHeaderPartType;\n  }\n  set monthYearHeaderPartType(monthYearHeaderPartType) {\n    this[setState]({ monthYearHeaderPartType });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n    renderParts(this[shadowRoot], this[state], changed);\n\n    if (changed.dayPartType || changed.monthDaysPartType) {\n      /** @type {any} */ (this[ids].monthDays).dayPartType = this[\n        state\n      ].dayPartType;\n    }\n\n    if (\n      changed.locale ||\n      changed.monthDaysPartType ||\n      changed.monthYearHeaderPartType ||\n      changed.dayNamesHeaderPartType\n    ) {\n      const locale = this[state].locale;\n      /** @type {any} */ (this[ids].monthDays).locale = locale;\n      /** @type {any} */ (this[ids].monthYearHeader).locale = locale;\n      /** @type {any} */ (this[ids].dayNamesHeader).locale = locale;\n    }\n\n    if (changed.date || changed.monthDaysPartType) {\n      const { date } = this[state];\n      if (date) {\n        const startDate = calendar.firstDateOfMonth(date);\n        const endDate = calendar.lastDateOfMonth(date);\n        const dayCount = endDate.getDate();\n        Object.assign(this[ids].monthDays, {\n          date,\n          dayCount,\n          startDate,\n        });\n        /** @type {any} */ (this[ids]\n          .monthYearHeader).date = calendar.firstDateOfMonth(date);\n      }\n    }\n\n    if (changed.daysOfWeekFormat || changed.dayNamesHeaderPartType) {\n      const { daysOfWeekFormat } = this[state];\n      /** @type {any} */ (this[ids].dayNamesHeader).format = daysOfWeekFormat;\n    }\n\n    if (changed.showCompleteWeeks || changed.monthDaysPartType) {\n      const { showCompleteWeeks } = this[state];\n      /** @type {any} */ (this[ids]\n        .monthDays).showCompleteWeeks = showCompleteWeeks;\n    }\n\n    if (changed.showSelectedDay || changed.monthDaysPartType) {\n      const { showSelectedDay } = this[state];\n      /** @type {any} */ (this[ids]\n        .monthDays).showSelectedDay = showSelectedDay;\n    }\n\n    if (changed.monthFormat || changed.monthYearHeaderPartType) {\n      const { monthFormat } = this[state];\n      /** @type {any} */ (this[ids].monthYearHeader).monthFormat = monthFormat;\n    }\n\n    if (changed.yearFormat || changed.monthYearHeaderPartType) {\n      const { yearFormat } = this[state];\n      /** @type {any} */ (this[ids].monthYearHeader).yearFormat = yearFormat;\n    }\n  }\n\n  get showCompleteWeeks() {\n    return this[state].showCompleteWeeks;\n  }\n  set showCompleteWeeks(showCompleteWeeks) {\n    this[setState]({ showCompleteWeeks });\n  }\n\n  get showSelectedDay() {\n    return this[state].showSelectedDay;\n  }\n  set showSelectedDay(showSelectedDay) {\n    this[setState]({ showSelectedDay });\n  }\n\n  get [template]() {\n    const result = templateFrom.html`\n      <style>\n        :host {\n          display: inline-block;\n        }\n\n        [part~=\"month-year-header\"] {\n          display: block;\n        }\n\n        [part~=\"day-names-header\"] {\n          display: grid;\n        }\n\n        [part~=\"month-days\"] {\n          display: block;\n        }\n      </style>\n\n      <div id=\"monthYearHeader\" part=\"month-year-header\"></div>\n      <div\n        id=\"dayNamesHeader\"\n        part=\"day-names-header\"\n        exportparts=\"day-name\"\n        format=\"short\"\n      ></div>\n      <div id=\"monthDays\" part=\"month-days\" exportparts=\"day\"></div>\n    `;\n    renderParts(result.content, this[state]);\n    return result;\n  }\n\n  /**\n   * The format used to render the year.\n   *\n   * The allowable formats are the same as the `year` formats in\n   * [Intl.DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat).\n   *\n   * @type {('numeric'|'2-digit')}\n   * @default 'numeric'\n   */\n  get yearFormat() {\n    return this[state].yearFormat;\n  }\n  set yearFormat(yearFormat) {\n    this[setState]({ yearFormat });\n  }\n}\n\n/**\n * Render parts for the template or an instance.\n *\n * @private\n * @param {DocumentFragment} root\n * @param {PlainObject} state\n * @param {ChangedFlags} [changed]\n */\nfunction renderParts(root, state, changed) {\n  if (!changed || changed.dayNamesHeaderPartType) {\n    const { dayNamesHeaderPartType } = state;\n    const dayNamesHeader = root.getElementById(\"dayNamesHeader\");\n    if (dayNamesHeader) {\n      transmute(dayNamesHeader, dayNamesHeaderPartType);\n    }\n  }\n  if (!changed || changed.monthYearHeaderPartType) {\n    const { monthYearHeaderPartType } = state;\n    const monthYearHeader = root.getElementById(\"monthYearHeader\");\n    if (monthYearHeader) {\n      transmute(monthYearHeader, monthYearHeaderPartType);\n    }\n  }\n  if (!changed || changed.monthDaysPartType) {\n    const { monthDaysPartType } = state;\n    const monthDays = root.getElementById(\"monthDays\");\n    if (monthDays) {\n      transmute(monthDays, monthDaysPartType);\n    }\n  }\n}\n\nexport default CalendarMonth;\n","import CalendarMonthYearHeader from \"../base/CalendarMonthYearHeader.js\";\nimport { template } from \"../base/internal.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\n\n/**\n * CalendarMonthYearHeader component in the Plain reference design system\n *\n * @inherits CalendarMonthYearHeader\n */\nclass PlainCalendarMonthYearHeader extends CalendarMonthYearHeader {\n  get [template]() {\n    const result = super[template];\n    result.content.append(\n      fragmentFrom.html`\n        <style>\n          :host {\n            font-size: larger;\n            font-weight: bold;\n            padding: 0.3em;\n          }\n        </style>\n      `\n    );\n    return result;\n  }\n}\n\nexport default PlainCalendarMonthYearHeader;\n","import CalendarMonth from \"../base/CalendarMonth.js\";\nimport { defaultState } from \"../base/internal.js\";\nimport PlainCalendarDay from \"./PlainCalendarDay.js\";\nimport PlainCalendarDayNamesHeader from \"./PlainCalendarDayNamesHeader.js\";\nimport PlainCalendarMonthYearHeader from \"./PlainCalendarMonthYearHeader.js\";\n\n/**\n * CalendarMonth component in the Plain reference design system\n *\n * @inherits CalendarMonth\n * @part {PlainCalendarDayNamesHeader} day-names-header\n * @part {PlainCalendarDay} day\n * @part {PlainCalendarMonthYearHeader} month-year-header\n */\nclass PlainCalendarMonth extends CalendarMonth {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      dayNamesHeaderPartType: PlainCalendarDayNamesHeader,\n      dayPartType: PlainCalendarDay,\n      monthYearHeaderPartType: PlainCalendarMonthYearHeader,\n    });\n  }\n}\n\nexport default PlainCalendarMonth;\n","import { forwardFocus } from \"../core/dom.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\"; // eslint-disable-line no-unused-vars\nimport { transmute } from \"../core/template.js\";\nimport Button from \"./Button.js\";\nimport {\n  defaultState,\n  goNext,\n  goPrevious,\n  ids,\n  raiseChangeEvents,\n  render,\n  setState,\n  shadowRoot,\n  state,\n} from \"./internal.js\";\n\nconst wrap = Symbol(\"wrap\");\n\n/**\n * Adds previous/next arrow buttons to a carousel-like component.\n *\n * @module ArrowDirectionMixin\n * @param {Constructor<ReactiveElement>} Base\n * @part {Button} arrow-button - both of the arrow buttons\n * @part arrow-button-next - the arrow button that navigates to the next item\n * @part arrow-button-previous - the arrow button that navigates to the previous item\n */\nfunction ArrowDirectionMixin(Base) {\n  // The class prototype added by the mixin.\n  class ArrowDirection extends Base {\n    /**\n     * True if the arrow buttons should overlap the component contents;\n     * false if they should appear to the side of the contents.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    get arrowButtonOverlap() {\n      return this[state].arrowButtonOverlap;\n    }\n    set arrowButtonOverlap(arrowButtonOverlap) {\n      this[setState]({ arrowButtonOverlap });\n    }\n\n    /**\n     * The class or tag used to create the `arrow-button` parts – the\n     * previous/next arrow buttons.\n     *\n     * @type {PartDescriptor}\n     */\n    get arrowButtonPartType() {\n      return this[state].arrowButtonPartType;\n    }\n    set arrowButtonPartType(arrowButtonPartType) {\n      this[setState]({ arrowButtonPartType });\n    }\n\n    // TODO: Symbols\n    arrowButtonPrevious() {\n      if (super.arrowButtonPrevious) {\n        return super.arrowButtonPrevious();\n      } else {\n        return this[goPrevious]();\n      }\n    }\n\n    arrowButtonNext() {\n      if (super.arrowButtonNext) {\n        return super.arrowButtonNext();\n      } else {\n        return this[goNext]();\n      }\n    }\n\n    attributeChangedCallback(name, oldValue, newValue) {\n      if (name === \"arrow-button-overlap\") {\n        this.arrowButtonOverlap = String(newValue) === \"true\";\n      } else if (name === \"show-arrow-buttons\") {\n        this.showArrowButtons = String(newValue) === \"true\";\n      } else {\n        super.attributeChangedCallback(name, oldValue, newValue);\n      }\n    }\n\n    // @ts-ignore\n    get [defaultState]() {\n      return Object.assign(super[defaultState] || {}, {\n        arrowButtonOverlap: true,\n        arrowButtonPartType: Button,\n        orientation: \"horizontal\",\n        showArrowButtons: true,\n      });\n    }\n\n    [render](/** @type {ChangedFlags} */ changed) {\n      if (changed.arrowButtonPartType) {\n        const arrowButtonPrevious = this[ids].arrowButtonPrevious;\n        if (arrowButtonPrevious instanceof HTMLElement) {\n          // Turn off focus handling for old previous button.\n          forwardFocus(arrowButtonPrevious, null);\n        }\n        const arrowButtonNext = this[ids].arrowButtonNext;\n        if (arrowButtonNext instanceof HTMLElement) {\n          // Turn off focus handling for old next button.\n          forwardFocus(arrowButtonNext, null);\n        }\n      }\n\n      if (super[render]) {\n        super[render](changed);\n      }\n\n      renderParts(this[shadowRoot], this[state], changed);\n\n      if (changed.arrowButtonPartType) {\n        /** @type {any} */\n        const cast = this;\n\n        const arrowButtonPrevious = this[ids].arrowButtonPrevious;\n        if (arrowButtonPrevious instanceof HTMLElement) {\n          forwardFocus(arrowButtonPrevious, cast);\n        }\n        const previousButtonHandler = createButtonHandler(this, () =>\n          this.arrowButtonPrevious()\n        );\n        arrowButtonPrevious.addEventListener(\n          \"mousedown\",\n          previousButtonHandler\n        );\n\n        const arrowButtonNext = this[ids].arrowButtonNext;\n        if (arrowButtonNext instanceof HTMLElement) {\n          forwardFocus(arrowButtonNext, cast);\n        }\n        const nextButtonHandler = createButtonHandler(this, () =>\n          this.arrowButtonNext()\n        );\n        arrowButtonNext.addEventListener(\"mousedown\", nextButtonHandler);\n      }\n\n      const {\n        arrowButtonOverlap,\n        canGoNext,\n        canGoPrevious,\n        orientation,\n        rightToLeft,\n      } = this[state];\n      const vertical = orientation === \"vertical\";\n      /** @type {any} */ const arrowButtonPrevious = this[ids]\n        .arrowButtonPrevious;\n      /** @type {any} */ const arrowButtonNext = this[ids].arrowButtonNext;\n\n      // Position the buttons.\n      if (\n        changed.arrowButtonOverlap ||\n        changed.orientation ||\n        changed.rightToLeft\n      ) {\n        this[ids].arrowDirection.style.flexDirection = vertical\n          ? \"column\"\n          : \"row\";\n        this[ids].arrowDirectionContainer.style.maxHeight = vertical\n          ? \"100%\"\n          : \"\";\n\n        const buttonStyle = {\n          bottom: null,\n          left: null,\n          right: null,\n          top: null,\n        };\n        if (arrowButtonOverlap) {\n          Object.assign(buttonStyle, {\n            position: \"absolute\",\n            \"z-index\": 1,\n          });\n        } else {\n          Object.assign(buttonStyle, {\n            position: null,\n            \"z-index\": null,\n          });\n        }\n        let previousButtonStyle;\n        let nextButtonStyle;\n        if (arrowButtonOverlap) {\n          if (vertical) {\n            // Vertical\n            Object.assign(buttonStyle, {\n              left: 0,\n              right: 0,\n            });\n            previousButtonStyle = {\n              top: 0,\n            };\n            nextButtonStyle = {\n              bottom: 0,\n            };\n          } else {\n            // Horizontal\n            Object.assign(buttonStyle, {\n              bottom: 0,\n              top: 0,\n            });\n            if (rightToLeft) {\n              previousButtonStyle = {\n                right: 0,\n              };\n              nextButtonStyle = {\n                left: 0,\n              };\n            } else {\n              // Typical condition: horizontal, left-to-right\n              previousButtonStyle = {\n                left: 0,\n              };\n              nextButtonStyle = {\n                right: 0,\n              };\n            }\n          }\n        }\n        Object.assign(\n          arrowButtonPrevious.style,\n          buttonStyle,\n          previousButtonStyle\n        );\n        Object.assign(arrowButtonNext.style, buttonStyle, nextButtonStyle);\n      }\n\n      // Disable the previous/next buttons if we can't go in those directions.\n      // WORKAROUND: We check to makes sure that can go previous/next state is\n      // defined (which happens once the component has items). Without that\n      // check, as of May 2019, a Chrome bug prevents the use of this mixin:\n      // multiple carousel instances on a page will have their next button\n      // initially disabled even when it should be enabled. Safari/Firefox do\n      // not exhibit that issue. Since identifying the root cause proved too\n      // difficult, this check was added.\n      if (changed.canGoNext && canGoNext !== null) {\n        arrowButtonNext.disabled = !canGoNext;\n      }\n      // See note for canGoNext above.\n      if (changed.canGoPrevious && canGoPrevious !== null) {\n        arrowButtonPrevious.disabled = !canGoPrevious;\n      }\n\n      if (changed.showArrowButtons) {\n        const display = this[state].showArrowButtons ? null : \"none\";\n        arrowButtonPrevious.style.display = display;\n        arrowButtonNext.style.display = display;\n      }\n    }\n\n    get showArrowButtons() {\n      return this[state].showArrowButtons;\n    }\n    set showArrowButtons(showArrowButtons) {\n      this[setState]({ showArrowButtons });\n    }\n\n    /**\n     * Destructively wrap a node with elements to show arrow buttons.\n     *\n     * @param {Element} target - the node that should be wrapped by buttons\n     */\n    [wrap](target) {\n      const arrowControls = fragmentFrom.html`\n        <div\n          id=\"arrowDirection\"\n          role=\"none\"\n          style=\"display: flex; flex: 1; overflow: hidden; position: relative;\"\n        >\n          <div\n            id=\"arrowButtonPrevious\"\n            part=\"arrow-button arrow-button-previous\"\n            exportparts=\"inner:arrow-button-inner\"\n            class=\"arrowButton\"\n            aria-hidden=\"true\"\n            tabindex=\"-1\"\n          >\n            <slot name=\"arrowButtonPrevious\"></slot>\n          </div>\n          <div\n            id=\"arrowDirectionContainer\"\n            role=\"none\"\n            style=\"flex: 1; position: relative;\"\n          ></div>\n          <div\n            id=\"arrowButtonNext\"\n            part=\"arrow-button arrow-button-next\"\n            exportparts=\"inner:arrow-button-inner\"\n            class=\"arrowButton\"\n            aria-hidden=\"true\"\n            tabindex=\"-1\"\n          >\n            <slot name=\"arrowButtonNext\"></slot>\n          </div>\n        </div>\n      `;\n\n      renderParts(arrowControls, this[state]);\n\n      // Wrap the target with the arrow controls.\n      const container = arrowControls.getElementById(\"arrowDirectionContainer\");\n      if (container) {\n        target.replaceWith(arrowControls);\n        container.append(target);\n      }\n    }\n  }\n\n  return ArrowDirection;\n}\n\n/**\n * @private\n * @param {ReactiveElement} element\n * @param {function} callback\n * @returns {EventListener}\n */\nfunction createButtonHandler(element, callback) {\n  return async function mousedown(/** @type {Event} */ event) {\n    // Only process events for the main (usually left) button.\n    /** @type {any} */ const cast = event;\n    if (cast.button !== 0) {\n      return;\n    }\n    element[raiseChangeEvents] = true;\n    const handled = callback();\n    if (handled) {\n      event.stopPropagation();\n    }\n    await Promise.resolve();\n    element[raiseChangeEvents] = false;\n  };\n}\n\n/**\n * Render parts for the template or an instance.\n *\n * @private\n * @param {DocumentFragment} root\n * @param {PlainObject} state\n * @param {ChangedFlags} [changed]\n */\nfunction renderParts(root, state, changed) {\n  if (!changed || changed.arrowButtonPartType) {\n    const { arrowButtonPartType } = state;\n    const arrowButtonPrevious = root.getElementById(\"arrowButtonPrevious\");\n    if (arrowButtonPrevious) {\n      transmute(arrowButtonPrevious, arrowButtonPartType);\n    }\n    const arrowButtonNext = root.getElementById(\"arrowButtonNext\");\n    if (arrowButtonNext) {\n      transmute(arrowButtonNext, arrowButtonPartType);\n    }\n  }\n}\n\nArrowDirectionMixin.wrap = wrap;\n\nexport default ArrowDirectionMixin;\n","import { forwardFocus, indexOfItemContainingTarget } from \"../core/dom.js\";\nimport { templateFrom } from \"../core/htmlLiterals.js\";\nimport ArrowDirectionMixin from \"./ArrowDirectionMixin.js\";\nimport * as calendar from \"./calendar.js\";\nimport CalendarDayButton from \"./CalendarDayButton.js\";\nimport CalendarElementMixin from \"./CalendarElementMixin.js\";\nimport CalendarMonth from \"./CalendarMonth.js\";\nimport FocusVisibleMixin from \"./FocusVisibleMixin.js\";\nimport FormElementMixin from \"./FormElementMixin.js\";\nimport {\n  defaultState,\n  goDown,\n  goLeft,\n  goRight,\n  goUp,\n  keydown,\n  raiseChangeEvents,\n  setState,\n  state,\n  stateEffects,\n  template,\n} from \"./internal.js\";\nimport KeyboardDirectionMixin from \"./KeyboardDirectionMixin.js\";\nimport KeyboardMixin from \"./KeyboardMixin.js\";\nimport LanguageDirectionMixin from \"./LanguageDirectionMixin.js\";\n\nconst Base = ArrowDirectionMixin(\n  CalendarElementMixin(\n    FocusVisibleMixin(\n      FormElementMixin(\n        KeyboardDirectionMixin(\n          KeyboardMixin(LanguageDirectionMixin(CalendarMonth))\n        )\n      )\n    )\n  )\n);\n\n/**\n * Interactive month calendar that lets the user select a date\n *\n * @inherits CalendarMonth\n * @mixes ArrowDirectionMixin\n * @mixes CalendarElementMixin\n * @mixes FocusVisibleMixin\n * @mixes FormElementMixin\n * @mixes KeyboardDirectionMixin\n * @mixes KeyboardMixin\n * @mixes LanguageDirectionMixin\n */\nclass CalendarMonthNavigator extends Base {\n  constructor() {\n    super();\n    this.addEventListener(\"mousedown\", (event) => {\n      // Only process events for the main (usually left) button.\n      if (event.button !== 0) {\n        return;\n      }\n      this[raiseChangeEvents] = true;\n      const target = event.composedPath()[0];\n      if (target instanceof Node) {\n        const days = this.days;\n        const index = indexOfItemContainingTarget(days, target);\n        /** @type {any} */\n        const day = days[index];\n        if (day) {\n          this.date = day.date;\n        }\n      }\n      this[raiseChangeEvents] = false;\n    });\n    // Any click within this element puts focus on the top-level element.\n    forwardFocus(this, this);\n  }\n\n  arrowButtonNext() {\n    // If we're asked to navigate to the next month, but don't have a date yet,\n    // assume the current date.\n    const date = this[state].date || calendar.today();\n    this[setState]({\n      date: calendar.offsetDateByMonths(date, 1),\n    });\n    return true;\n  }\n\n  arrowButtonPrevious() {\n    // See note in arrowButtonNext.\n    const date = this[state].date || calendar.today();\n    this[setState]({\n      date: calendar.offsetDateByMonths(date, -1),\n    });\n    return true;\n  }\n\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      arrowButtonOverlap: false,\n      canGoNext: true,\n      canGoPrevious: true,\n      date: calendar.today(),\n      dayPartType: CalendarDayButton,\n      orientation: \"both\",\n      showCompleteWeeks: true,\n      showSelectedDay: true,\n      value: null,\n    });\n  }\n\n  [keydown](/** @type {KeyboardEvent} */ event) {\n    let handled = false;\n\n    switch (event.key) {\n      case \"Home\":\n        this[setState]({\n          date: calendar.today(),\n        });\n        handled = true;\n        break;\n\n      case \"PageDown\":\n        this[setState]({\n          date: calendar.offsetDateByMonths(this[state].date, 1),\n        });\n        handled = true;\n        break;\n\n      case \"PageUp\":\n        this[setState]({\n          date: calendar.offsetDateByMonths(this[state].date, -1),\n        });\n        handled = true;\n        break;\n    }\n\n    // Prefer mixin result if it's defined, otherwise use base result.\n    return handled || (super[keydown] && super[keydown](event));\n  }\n\n  [goDown]() {\n    if (super[goDown]) {\n      super[goDown]();\n    }\n    this[setState]({\n      date: calendar.offsetDateByDays(this[state].date, 7),\n    });\n    return true;\n  }\n\n  [goLeft]() {\n    if (super[goLeft]) {\n      super[goLeft]();\n    }\n    this[setState]({\n      date: calendar.offsetDateByDays(this[state].date, -1),\n    });\n    return true;\n  }\n\n  [goRight]() {\n    if (super[goRight]) {\n      super[goRight]();\n    }\n    this[setState]({\n      date: calendar.offsetDateByDays(this[state].date, 1),\n    });\n    return true;\n  }\n\n  [goUp]() {\n    if (super[goUp]) {\n      super[goUp]();\n    }\n    this[setState]({\n      date: calendar.offsetDateByDays(this[state].date, -7),\n    });\n    return true;\n  }\n\n  [stateEffects](state, changed) {\n    const effects = super[stateEffects](state, changed);\n\n    // Reflect any change in date to value as well so that FormElementMixin can\n    // update form internals.\n    if (changed.date) {\n      Object.assign(effects, {\n        value: state.date ? state.date.toString() : \"\",\n      });\n    }\n\n    return effects;\n  }\n\n  get [template]() {\n    const result = super[template];\n    const monthYearHeader = result.content.querySelector(\"#monthYearHeader\");\n    /** @type {any} */ const cast = this;\n    cast[ArrowDirectionMixin.wrap](monthYearHeader);\n\n    const styleTemplate = templateFrom.html`\n      <style>\n        [part~=\"arrow-icon\"] {\n          font-size: 24px;\n        }\n      </style>\n    `;\n    result.content.append(styleTemplate.content);\n\n    return result;\n  }\n\n  // Expose `value` as a synonym for `date` for use in forms.\n  get value() {\n    return this.date;\n  }\n  set value(value) {\n    this.date = value;\n  }\n}\n\nexport default CalendarMonthNavigator;\n","import CalendarMonthNavigator from \"../base/CalendarMonthNavigator.js\";\nimport DarkModeMixin from \"../base/DarkModeMixin.js\";\nimport { defaultState } from \"../base/internal.js\";\nimport PlainArrowDirectionMixin from \"./PlainArrowDirectionMixin.js\";\nimport PlainCalendarDayButton from \"./PlainCalendarDayButton.js\";\nimport PlainCalendarDayNamesHeader from \"./PlainCalendarDayNamesHeader.js\";\nimport PlainCalendarMonthYearHeader from \"./PlainCalendarMonthYearHeader.js\";\n\n/**\n * CalendarMonthNavigator component in the Plain reference design system\n *\n * @inherits CalendarMonthNavigator\n * @mixes DarkModeMixin\n * @mixes PlainArrowDirectionMixin\n * @part {PlainCalendarDayNamesHeader} day-names-header\n * @part {PlainCalendarDayButton} day\n * @part {PlainCalendarMonthYearHeader} month-year-header\n */\nclass PlainCalendarMonthNavigator extends DarkModeMixin(\n  PlainArrowDirectionMixin(CalendarMonthNavigator)\n) {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      dayNamesHeaderPartType: PlainCalendarDayNamesHeader,\n      dayPartType: PlainCalendarDayButton,\n      monthYearHeaderPartType: PlainCalendarMonthYearHeader,\n    });\n  }\n}\n\nexport default PlainCalendarMonthNavigator;\n","import { templateFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\";\nimport CursorAPIMixin from \"./CursorAPIMixin.js\";\nimport CursorSelectMixin from \"./CursorSelectMixin.js\";\nimport { defaultState, render, state, template } from \"./internal.js\";\nimport ItemsAPIMixin from \"./ItemsAPIMixin.js\";\nimport ItemsCursorMixin from \"./ItemsCursorMixin.js\";\nimport SingleSelectAPIMixin from \"./SingleSelectAPIMixin.js\";\nimport SlotItemsMixin from \"./SlotItemsMixin.js\";\n\nconst Base = CursorAPIMixin(\n  CursorSelectMixin(\n    ItemsAPIMixin(\n      ItemsCursorMixin(SingleSelectAPIMixin(SlotItemsMixin(ReactiveElement)))\n    )\n  )\n);\n\n/**\n * Shows a single panel at a time\n *\n * This can be useful when a given UI element has multiple modes that present\n * substantially different elements, or for displaying a single item from a set\n * at a time.\n *\n * This component doesn't provide any UI for changing which mode is shown. A\n * common pattern in which buttons select the mode are tabs, a pattern\n * implemented by the [Tabs](Tabs) component.\n *\n * @inherits ReactiveElement\n * @mixes CursorAPIMixin\n * @mixes CursorSelectMixin\n * @mixes ItemsAPIMixin\n * @mixes ItemsCursorMixin\n * @mixes SingleSelectAPIMixin\n * @mixes SlotItemsMixin\n */\nclass Modes extends Base {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      currentItemRequired: true,\n    });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n\n    // Show the selected item only. Also, apply `selected` attribute to the\n    // selected item only.\n    if (changed.items || changed.currentIndex) {\n      const { currentIndex, items } = this[state];\n      if (items) {\n        items.forEach((item, index) => {\n          const selected = index === currentIndex;\n          item.style.display = selected ? \"\" : \"none\";\n          item.toggleAttribute(\"selected\", selected);\n        });\n      }\n    }\n  }\n\n  get [template]() {\n    return templateFrom.html`\n      <style>\n        :host {\n          display: inline-flex;\n        }\n        \n        #modesContainer {\n          display: flex;\n          flex: 1;\n          position: relative;\n        }\n      </style>\n      <div id=\"modesContainer\">\n        <slot></slot>\n      </div>\n    `;\n  }\n}\n\nexport default Modes;\n","import { updateChildNodes } from \"../core/dom.js\";\nimport { templateFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\";\nimport { createElement, transmute } from \"../core/template.js\";\nimport CursorAPIMixin from \"./CursorAPIMixin.js\";\nimport CursorSelectMixin from \"./CursorSelectMixin.js\";\nimport {\n  checkSize,\n  closestAvailableItemIndex,\n  defaultState,\n  firstRender,\n  ids,\n  raiseChangeEvents,\n  render,\n  setState,\n  shadowRoot,\n  state,\n  stateEffects,\n  template,\n} from \"./internal.js\";\nimport ItemsAPIMixin from \"./ItemsAPIMixin.js\";\nimport ItemsCursorMixin from \"./ItemsCursorMixin.js\";\nimport LanguageDirectionMixin from \"./LanguageDirectionMixin.js\";\nimport ListBox from \"./ListBox.js\";\nimport Modes from \"./Modes.js\";\nimport SingleSelectAPIMixin from \"./SingleSelectAPIMixin.js\";\nimport SlotItemsMixin from \"./SlotItemsMixin.js\";\n\n// Does a list position imply a lateral arrangement of list and stage?\n/** @type {IndexedObject<boolean>} */\nconst lateralPositions = {\n  end: true,\n  left: true,\n  right: true,\n  start: true,\n};\n\nconst Base = CursorAPIMixin(\n  CursorSelectMixin(\n    ItemsAPIMixin(\n      ItemsCursorMixin(\n        LanguageDirectionMixin(\n          SingleSelectAPIMixin(SlotItemsMixin(ReactiveElement))\n        )\n      )\n    )\n  )\n);\n\n/**\n * Combines a list with an area focusing on a single selected item.\n *\n * @inherits ReactiveElement\n * @mixes CursorAPIMixin\n * @mixes CursorSelectMixin\n * @mixes ItemsCursorMixin\n * @mixes LanguageDirectionMixin\n * @mixes SingleSelectAPIMixin\n * @mixes SlotItemsMixin\n * @part {div} proxy - an element representing an item in the list\n * @part {ListBox} proxy-list - the container for the list of proxies\n * @part {Modes} stage - the main element showing a single item from the list\n */\nclass Explorer extends Base {\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name === \"proxy-list-overlap\") {\n      this.proxyListOverlap = String(newValue) === \"true\";\n    } else {\n      super.attributeChangedCallback(name, oldValue, newValue);\n    }\n  }\n\n  /**\n   * True if the item cursor can be moved to the next item, false if not (the\n   * current item is the last item in the list).\n   *\n   * @type {boolean}\n   */\n  get canGoNext() {\n    return this[state].canGoNext;\n  }\n\n  /**\n   * True if the item cursor can be moved to the previous item, false if not\n   * (the current item is the first one in the list).\n   *\n   * @type {boolean}\n   */\n  get canGoPrevious() {\n    return this[state].canGoPrevious;\n  }\n\n  [checkSize]() {\n    if (super[checkSize]) {\n      super[checkSize]();\n    }\n    if (this[ids].stage[checkSize]) {\n      this[ids].stage[checkSize]();\n    }\n    if (this[ids].proxyList[checkSize]) {\n      this[ids].proxyList[checkSize]();\n    }\n  }\n\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      currentItemRequired: true,\n      proxies: [],\n      proxiesAssigned: false,\n      proxyListOverlap: false,\n      proxyListPartType: ListBox,\n      proxyListPosition: \"top\",\n      proxyPartType: \"div\",\n      stagePartType: Modes,\n    });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n\n    if (this[firstRender]) {\n      // When proxy slot's assigned nodes change, determine whether we need to\n      // generate default proxies or (if assigned nodes are present) treat the\n      // assigned nodes as the proxies.\n      this[ids].proxySlot.addEventListener(\"slotchange\", () => {\n        const proxySlot = /** @type {any} */ (this[ids].proxySlot);\n        const proxies = proxySlot.assignedNodes({ flatten: true });\n        const proxiesAssigned = proxies.length > 0;\n        if (proxiesAssigned) {\n          // Nodes assigned to slot become proxies.\n          this[setState]({\n            proxiesAssigned,\n            proxies,\n          });\n        } else {\n          // No nodes assigned -- we'll need to generate proxies.\n          this[setState]({ proxiesAssigned });\n        }\n      });\n    }\n\n    /** @type {any} */\n    const handleSelectedIndexChanged = (/** @type {CustomEvent} */ event) => {\n      // The proxy list and stage may raise events before they've actually\n      // had a chance to sync up their items to reflect the current state\n      // of the explorer component, so we only handle their events if\n      // their count of items matches ours.\n      /** @type {any} */ const cast = event.target;\n      if (cast && this.items.length === cast.items.length) {\n        const selectedIndex = event.detail.selectedIndex;\n        if (this.selectedIndex !== selectedIndex) {\n          this[raiseChangeEvents] = true;\n          this.selectedIndex = selectedIndex;\n          this[raiseChangeEvents] = false;\n        }\n      }\n    };\n\n    renderParts(this[shadowRoot], this[state], changed);\n\n    if (changed.proxyListPartType) {\n      this[ids].proxyList.addEventListener(\n        \"selectedindexchange\",\n        handleSelectedIndexChanged\n      );\n    }\n\n    if (changed.stagePartType) {\n      this[ids].stage.addEventListener(\n        \"selectedindexchange\",\n        handleSelectedIndexChanged\n      );\n      this[ids].stage.addEventListener(\"selectioneffectend\", (event) => {\n        const { selectedIndex } = /** @type {any} */ (event).detail;\n        /**\n         * This event is raised if the current `stage` applies a transition\n         * effect when changing the selection, and the selection effect has\n         * completed. [CrossfadeStage](CrossfadeStage) applies such an effect,\n         * for example.\n         *\n         * The order of events when the `selectedIndex` property changes is\n         * therefore: `selectedindexchange` (occurs immediately when the index\n         * changes), followed by `selectioneffectend` (occurs some time later).\n         *\n         * @event selectioneffectend\n         */\n        const selectedEffectEndEvent = new CustomEvent(\"selectioneffectend\", {\n          bubbles: true,\n          detail: { selectedIndex },\n        });\n        this.dispatchEvent(selectedEffectEndEvent);\n      });\n    }\n\n    const proxyList = this[ids].proxyList;\n    const stage = this[ids].stage;\n    if (changed.proxies || changed.proxiesAssigned) {\n      // Render the default proxies.\n      const { proxies, proxiesAssigned } = this[state];\n      const childNodes = proxiesAssigned\n        ? [this[ids].proxySlot]\n        : [this[ids].proxySlot, ...proxies];\n      updateChildNodes(this[ids].proxyList, childNodes);\n    }\n\n    if (\n      changed.proxyListOverlap ||\n      changed.proxyListPosition ||\n      changed.proxyListPartType\n    ) {\n      const { proxyListOverlap, proxyListPosition } = this[state];\n      const lateralPosition = lateralPositions[proxyListPosition];\n      Object.assign(proxyList.style, {\n        height: lateralPosition ? \"100%\" : null,\n        position: proxyListOverlap ? \"absolute\" : null,\n        width: lateralPosition ? null : \"100%\",\n        zIndex: proxyListOverlap ? \"1\" : null,\n      });\n    }\n\n    if (changed.proxyListPosition || changed.rightToLeft) {\n      // Map the relative position of the list vis-a-vis the stage to a position\n      // from the perspective of the list.\n      const cast = /** @type {any} */ (proxyList);\n      if (\"position\" in cast) {\n        const { proxyListPosition, rightToLeft } = this[state];\n        let position;\n        switch (proxyListPosition) {\n          case \"end\":\n            position = rightToLeft ? \"left\" : \"right\";\n            break;\n          case \"start\":\n            position = rightToLeft ? \"right\" : \"left\";\n            break;\n          default:\n            position = proxyListPosition;\n            break;\n        }\n        cast.position = position;\n      }\n    }\n\n    if (changed.proxyListPosition || changed.proxyListPartType) {\n      setListAndStageOrder(this, this[state]);\n      const { proxyListPosition } = this[state];\n      const lateralPosition = lateralPositions[proxyListPosition];\n      this[ids].explorerContainer.style.flexDirection = lateralPosition\n        ? \"row\"\n        : \"column\";\n      Object.assign(proxyList.style, {\n        bottom: proxyListPosition === \"bottom\" ? \"0\" : null,\n        left: proxyListPosition === \"left\" ? \"0\" : null,\n        right: proxyListPosition === \"right\" ? \"0\" : null,\n        top: proxyListPosition === \"top\" ? \"0\" : null,\n      });\n    }\n\n    if (changed.currentIndex || changed.proxyListPartType) {\n      if (\"selectedIndex\" in proxyList) {\n        const { currentIndex } = this[state];\n        /** @type {any} */ (proxyList).selectedIndex = currentIndex;\n      }\n    }\n\n    if (changed.currentIndex || changed.stagePartType) {\n      if (\"selectedIndex\" in stage) {\n        const { currentIndex } = this[state];\n        /** @type {any} */ (stage).selectedIndex = currentIndex;\n      }\n    }\n\n    if (changed.currentItemRequired || changed.proxyListPartType) {\n      if (\"selectionRequired\" in proxyList) {\n        const { selectionRequired } = this[state];\n        /** @type {any} */ (proxyList).selectionRequired = selectionRequired;\n      }\n    }\n\n    if (changed.swipeFraction || changed.proxyListPartType) {\n      if (\"swipeFraction\" in proxyList) {\n        const { swipeFraction } = this[state];\n        /** @type {any} */ (proxyList).swipeFraction = swipeFraction;\n      }\n    }\n\n    if (changed.swipeFraction || changed.stagePartType) {\n      if (\"swipeFraction\" in stage) {\n        const { swipeFraction } = this[state];\n        /** @type {any} */ (stage).swipeFraction = swipeFraction;\n      }\n    }\n  }\n\n  /**\n   * The current set of proxy elements that correspond to the component's\n   * main `items`. If you have assigned elements to the `proxy` slot, this\n   * returns the collection of those elements. Otherwise, this will return\n   * a collection of default proxies generated by the component, one for\n   * each item.\n   *\n   * @type {Element[]}\n   */\n  get proxies() {\n    return this[state].proxies;\n  }\n\n  /**\n   * True if the list of proxies should overlap the stage, false if not.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  get proxyListOverlap() {\n    return this[state].proxyListOverlap;\n  }\n  set proxyListOverlap(proxyListOverlap) {\n    this[setState]({ proxyListOverlap });\n  }\n\n  /**\n   * The position of the proxy list relative to the stage.\n   *\n   * The `start` and `end` values refer to text direction: in left-to-right\n   * languages such as English, these are equivalent to `left` and `right`,\n   * respectively.\n   *\n   * @type {('bottom'|'end'|'left'|'right'|'start'|'top')}\n   * @default 'start'\n   */\n  get proxyListPosition() {\n    return this[state].proxyListPosition;\n  }\n  set proxyListPosition(proxyListPosition) {\n    this[setState]({ proxyListPosition });\n  }\n\n  /**\n   * The class or tag used to create the `proxy-list` part - the list\n   * of selectable proxies representing the items in the list.\n   *\n   * @type {PartDescriptor}\n   * @default ListBox\n   */\n  get proxyListPartType() {\n    return this[state].proxyListPartType;\n  }\n  set proxyListPartType(proxyListPartType) {\n    this[setState]({ proxyListPartType });\n  }\n\n  /**\n   * The class or tag used to create the `proxy` parts - the default\n   * representations for the list's items.\n   *\n   * @type {PartDescriptor}\n   * @default 'div'\n   */\n  get proxyPartType() {\n    return this[state].proxyPartType;\n  }\n  set proxyPartType(proxyPartType) {\n    this[setState]({ proxyPartType });\n  }\n\n  /**\n   * The class or tag used for the main \"stage\" element that shows a\n   * single item at a time.\n   *\n   * @type {PartDescriptor}\n   * @default Modes\n   */\n  get stagePartType() {\n    return this[state].stagePartType;\n  }\n  set stagePartType(stagePartType) {\n    this[setState]({ stagePartType });\n  }\n\n  [stateEffects](state, changed) {\n    const effects = super[stateEffects](state, changed);\n\n    // If items for default proxies have changed, recreate the proxies.\n    // If nodes have been assigned to the proxy slot, use those instead.\n    if (changed.items || changed.proxiesAssigned || changed.proxyPartType) {\n      const { items, proxiesAssigned, proxyPartType } = state;\n      if ((changed.items || changed.proxyPartType) && !proxiesAssigned) {\n        // Generate sufficient default proxies.\n        Object.assign(effects, {\n          proxies: createDefaultProxies(items, proxyPartType),\n        });\n      }\n    }\n\n    // Update computed state members canGoNext/canGoPrevious.\n    if (\n      changed.currentIndex ||\n      changed.cursorOperationsWrap ||\n      changed.filter ||\n      changed.items\n    ) {\n      const { currentIndex, items } = state;\n      // Can go next/previous if there are items but no cursor.\n      const specialCase = items && items.length > 0 && currentIndex < 0;\n      const canGoNext =\n        specialCase ||\n        this[closestAvailableItemIndex](state, {\n          direction: 1,\n          index: currentIndex + 1,\n        }) >= 0;\n      const canGoPrevious =\n        specialCase ||\n        this[closestAvailableItemIndex](state, {\n          direction: -1,\n          index: currentIndex - 1,\n        }) >= 0;\n      Object.assign(effects, {\n        canGoNext,\n        canGoPrevious,\n      });\n    }\n\n    return effects;\n  }\n\n  get [template]() {\n    const result = templateFrom.html`\n      <style>\n        :host {\n          display: inline-flex;\n        }\n        \n        #explorerContainer {\n          display: flex;\n          flex: 1;\n          max-width: 100%; /* For Firefox */\n          position: relative;\n        }\n\n        [part~=\"proxy-list\"] {\n          box-sizing: border-box;\n        }\n\n        [part~=\"stage\"] {\n          flex: 1;\n        }\n      </style>\n      <div id=\"explorerContainer\" role=\"none\">\n        <div id=\"proxyList\" part=\"proxy-list\"><slot id=\"proxySlot\" name=\"proxy\"></slot></div>\n        <div id=\"stage\" part=\"stage\" role=\"none\"><slot></slot></div>\n      </div>\n    `;\n\n    renderParts(result.content, this[state]);\n\n    return result;\n  }\n}\n\n/**\n * Return the default list generated for the given items.\n *\n * @private\n * @param {ListItemElement[]} items\n * @param {PartDescriptor} proxyPartType\n */\nfunction createDefaultProxies(items, proxyPartType) {\n  const proxies = items ? items.map(() => createElement(proxyPartType)) : [];\n  proxies.forEach((proxy) => {\n    // As of February 2020, the `part` property is not available in all\n    // browsers, so we set it as an attribute instead.\n    /** @type {any} */ (proxy).setAttribute(\"part\", \"proxy\");\n  });\n  // Make the array immutable to avoid accidental mutation.\n  Object.freeze(proxies);\n  return proxies;\n}\n\n/**\n * Find the child of root that is or contains the given node.\n *\n * @private\n * @param {Node} root\n * @param {Node} node\n * @returns {Node|null}\n */\nfunction findChildContainingNode(root, node) {\n  const parentNode = node.parentNode;\n  return parentNode === root\n    ? node\n    : parentNode\n    ? findChildContainingNode(root, parentNode)\n    : null;\n}\n\n/**\n * Render parts for the template or an instance.\n *\n * @private\n * @param {DocumentFragment} root\n * @param {PlainObject} state\n * @param {ChangedFlags} [changed]\n */\nfunction renderParts(root, state, changed) {\n  if (!changed || changed.proxyListPartType) {\n    const proxyList = root.getElementById(\"proxyList\");\n    if (proxyList) {\n      const { proxyListPartType } = state;\n      transmute(proxyList, proxyListPartType);\n    }\n  }\n  if (!changed || changed.stagePartType) {\n    const stage = root.getElementById(\"stage\");\n    if (stage) {\n      const { stagePartType } = state;\n      transmute(stage, stagePartType);\n    }\n  }\n}\n\n/**\n * Physically reorder the list and stage to reflect the desired arrangement. We\n * could change the visual appearance by reversing the order of the flex box,\n * but then the visual order wouldn't reflect the document order, which\n * determines focus order. That would surprise a user trying to tab through the\n * controls.\n *\n * @private\n * @param {Explorer} element\n * @param {PlainObject} state\n */\nfunction setListAndStageOrder(element, state) {\n  const { proxyListPosition, rightToLeft } = state;\n  const listInInitialPosition =\n    proxyListPosition === \"top\" ||\n    proxyListPosition === \"start\" ||\n    (proxyListPosition === \"left\" && !rightToLeft) ||\n    (proxyListPosition === \"right\" && rightToLeft);\n  const container = element[ids].explorerContainer;\n  const stage = findChildContainingNode(container, element[ids].stage);\n  const list = findChildContainingNode(container, element[ids].proxyList);\n  const firstElement = listInInitialPosition ? list : stage;\n  const lastElement = listInInitialPosition ? stage : list;\n  if (firstElement && lastElement) {\n    const nextElementSibling = /** @type {any} */ (firstElement)\n      .nextElementSibling;\n    if (nextElementSibling !== lastElement) {\n      element[ids].explorerContainer.insertBefore(firstElement, lastElement);\n    }\n  }\n}\n\nexport default Explorer;\n","/**\n * Helpers for rendering transitions between selection states\n *\n * These functions help a component work with \"fractional selection\". This\n * notion can be very helpful in modeling components such as carousels (e.g.,\n * [Carousel](Carousel), in which the selection state during user\n * interaction may be partway between one item and the next. With fractional\n * selection, we add a real number between 0 and 1 to a selected index to obtain\n * a fractional selection value.\n *\n * Consider a carousel displaying a set of images. Suppose the image at index 3\n * is selected. The carousel's `selectedIndex` state at this point is 3. The\n * user begins dragging the carousel with their finger. Image 3 moves out of\n * view, and the image 4 moves into view. When the user is halfway through this\n * operation, we might say that the fractional selection value is 3.5.\n * Eventually, the user releases their finger, and the carousel shows the image\n * 4 selected; the `selectedIndex` is 4.\n *\n * These functions help components work consistently with fractional selection.\n *\n * @module fractionalSelection\n */\n\n/**\n * Dampen a selection that goes past the beginning or end of a list. This is\n * generally used to produce a visual effect of tension as the user tries to\n * go further in a direction that has no more items.\n *\n * Example: suppose `itemCount` is 5, indicating a list of 5 items. The index of\n * the last item is 4. If the `selection` parameter is 4.5, the user is trying\n * to go past this last item. When a damping function is applied, the resulting\n * value will be less than 4.5 (the actual value will be 4.25). When this\n * selection state is rendered, the user will see that, each unit distance the\n * drag travels has less and less visible effect. This is perceived as tension.\n *\n * @param {number} selection - A real number indicating a selection position\n * @param {number} itemCount - An integer for the number of items in the list\n * @returns {number} A real number representing the damped selection value.\n */\nexport function dampenListSelection(selection, itemCount) {\n  const bound = itemCount - 1;\n  let damped;\n  if (selection < 0) {\n    // Trying to go past beginning of list. Apply tension from the left edge.\n    damped = -dampen(-selection);\n  } else if (selection >= bound) {\n    // Trying to go past end of list. Apply tension from the right edge.\n    damped = bound + dampen(selection - bound);\n  } else {\n    // No damping required.\n    damped = selection;\n  }\n  return damped;\n}\n\n/**\n * Calculate damping as a function of the distance past the minimum/maximum\n * values.\n *\n * We want to asymptotically approach an absolute minimum of 1 unit\n * below/above the actual minimum/maximum. This requires calculating a\n * hyperbolic function.\n *\n * We use the formula `y = (-1/(x+1))+1`.\n * (See a [graph of this\n * function](http://www.wolframalpha.com/input/?i=y%3D(-1%2F(x%2B1))%2B1).)\n * The only portion of that function we care about is when x is zero or greater.\n * An important consideration is that the curve be tangent to the diagonal line\n * x=y at (0, 0). This ensures smooth continuity with the normal drag behavior,\n * in which the visible sliding is linear with the distance the touchpoint has\n * been dragged.\n *\n * @param {number} x - The number of dampen\n * @returns {number}\n */\nexport function dampen(x) {\n  const y = -1 / (x + 1) + 1;\n  return y;\n}\n","import { templateFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\";\nimport CursorAPIMixin from \"./CursorAPIMixin.js\";\nimport CursorSelectMixin from \"./CursorSelectMixin.js\";\nimport EffectMixin from \"./EffectMixin.js\";\nimport * as fractionalSelection from \"./fractionalSelection.js\";\nimport {\n  defaultState,\n  ids,\n  render,\n  setState,\n  state,\n  template,\n} from \"./internal.js\";\nimport ItemsAPIMixin from \"./ItemsAPIMixin.js\";\nimport ItemsCursorMixin from \"./ItemsCursorMixin.js\";\nimport LanguageDirectionMixin from \"./LanguageDirectionMixin.js\";\nimport SingleSelectAPIMixin from \"./SingleSelectAPIMixin.js\";\nimport SlotItemsMixin from \"./SlotItemsMixin.js\";\n\nconst Base = CursorAPIMixin(\n  CursorSelectMixin(\n    EffectMixin(\n      ItemsAPIMixin(\n        ItemsCursorMixin(\n          LanguageDirectionMixin(\n            SingleSelectAPIMixin(SlotItemsMixin(ReactiveElement))\n          )\n        )\n      )\n    )\n  )\n);\n\n/**\n * Slides between selected items on a horizontal axis\n *\n * This displays a single item completely visible at a time. When changing which\n * item is selected, it displays a simple sliding transition.\n *\n * This component is used as the main stage for a [Carousel](Carousel).\n *\n * @inherits ReactiveElement\n * @mixes CursorAPIMixin\n * @mixes CursorSelectMixin\n * @mixes EffectMixin\n * @mixes ItemsAPIMixin\n * @mixes ItemsCursorMixin\n * @mixes LanguageDirectionMixin\n * @mixes SingleSelectAPIMixin\n * @mixes SlotItemsMixin\n */\nclass SlidingStage extends Base {\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name === \"swipe-fraction\") {\n      this.swipeFraction = parseFloat(newValue);\n    } else {\n      super.attributeChangedCallback(name, oldValue, newValue);\n    }\n  }\n\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      currentItemRequired: true,\n      orientation: \"horizontal\",\n    });\n  }\n\n  get orientation() {\n    return this[state].orientation;\n  }\n  set orientation(orientation) {\n    this[setState]({ orientation });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n\n    // Apply `selected` attribute to the selected item only.\n    if (changed.items || changed.currentIndex) {\n      const { currentIndex, items } = this[state];\n      if (items) {\n        items.forEach((item, index) => {\n          item.toggleAttribute(\"selected\", index === currentIndex);\n        });\n      }\n    }\n\n    // Translate the container to show the selected item.\n    if (\n      changed.currentIndex ||\n      changed.enableEffects ||\n      changed.orientation ||\n      changed.swipeFraction\n    ) {\n      const { orientation, rightToLeft, currentIndex, items } = this[state];\n      const vertical = orientation === \"vertical\";\n      const sign = vertical ? -1 : rightToLeft ? 1 : -1;\n      const swiping = this[state].swipeFraction != null;\n      const swipeFraction = this[state].swipeFraction || 0;\n      let translation;\n      if (currentIndex >= 0) {\n        const selectionFraction = currentIndex + sign * swipeFraction;\n        const count = items ? items.length : 0;\n        const dampedSelection = fractionalSelection.dampenListSelection(\n          selectionFraction,\n          count\n        );\n        translation = sign * dampedSelection * 100;\n      } else {\n        translation = 0;\n      }\n\n      const slidingStageContent = this[ids].slidingStageContent;\n      const axis = vertical ? \"Y\" : \"X\";\n      slidingStageContent.style.transform = `translate${axis}(${translation}%)`;\n\n      const showTransition = this[state].enableEffects && !swiping;\n      slidingStageContent.style.transition = showTransition\n        ? \"transform 0.25s\"\n        : \"none\";\n    }\n    if (changed.orientation) {\n      const { orientation } = this[state];\n      const vertical = orientation === \"vertical\";\n      this[ids].slidingStageContent.style.flexDirection = vertical\n        ? \"column\"\n        : \"\";\n    }\n  }\n\n  get swipeFraction() {\n    return this[state].swipeFraction;\n  }\n  set swipeFraction(swipeFraction) {\n    this[setState]({ swipeFraction });\n  }\n\n  get [template]() {\n    // The trick here is to give the slotted elements a flex-basis of 100%. This\n    // makes them each as big as the component, spreading them out equally. The\n    // slidingStageContent container will only big as big as the host too, but\n    // all the elements slotted inside it will still be visible even if they\n    // fall outside its bounds. By translating the container left or right, we\n    // can cause any individual slotted item to become the sole visible item.\n    return templateFrom.html`\n      <style>\n        :host {\n          display: inline-flex;\n          overflow: hidden;\n          position: relative;\n        }\n\n        #slidingStageContent {\n          display: flex;\n          height: 100%;\n          min-width: 100%;\n          will-change: transform;\n        }\n\n        ::slotted(*) {\n          flex: 0 0 100%;\n          max-width: 100%; /* For Firefox */\n        }\n      </style>\n      <div id=\"slidingStageContent\" role=\"none\">\n        <slot></slot>\n      </div>\n    `;\n  }\n}\n\nexport default SlidingStage;\n","import ReactiveElement from \"../core/ReactiveElement.js\"; // eslint-disable-line no-unused-vars\nimport {\n  goDown,\n  goLeft,\n  goRight,\n  goUp,\n  swipeDown,\n  swipeLeft,\n  swipeRight,\n  swipeUp,\n} from \"./internal.js\";\n\n/**\n * Map swipe gestures to direction semantics.\n *\n * @module SwipeDirectionMixin\n * @param {Constructor<ReactiveElement>} Base\n */\nexport default function SwipeDirectionMixin(Base) {\n  // The class prototype added by the mixin.\n  return class SwipeDirection extends Base {\n    /**\n     * Invokes the [goUp](internal#internal.goUp) method.\n     */\n    [swipeDown]() {\n      this[goUp]();\n    }\n\n    /**\n     * Invokes the [goRight](internal#internal.goRight) method.\n     */\n    [swipeLeft]() {\n      this[goRight]();\n    }\n\n    /**\n     * Invokes the [goLeft](internal#internal.goLeft) method.\n     */\n    [swipeRight]() {\n      this[goLeft]();\n    }\n\n    /**\n     * Invokes the [goDown](internal#internal.goDown) method.\n     */\n    [swipeUp]() {\n      this[goDown]();\n    }\n  };\n}\n","import ReactiveElement from \"../core/ReactiveElement.js\"; // eslint-disable-line no-unused-vars\nimport {\n  defaultState,\n  firstRender,\n  raiseChangeEvents,\n  render,\n  setState,\n  state,\n  stateEffects,\n  swipeDown,\n  swipeLeft,\n  swipeRight,\n  swipeStart,\n  swipeTarget,\n  swipeUp,\n} from \"./internal.js\";\nimport { canScrollInDirection } from \"./scrolling.js\";\n\n/** @type {any} */\nconst deferToScrollingKey = Symbol(\"deferToScrolling\");\n/** @type {any} */\nconst multiTouchKey = Symbol(\"multiTouch\");\nconst previousTimeKey = Symbol(\"previousTime\");\nconst previousVelocityKey = Symbol(\"previousVelocity\");\nconst previousXKey = Symbol(\"previousX\");\nconst previousYKey = Symbol(\"previousY\");\nconst startXKey = Symbol(\"startX\");\nconst startYKey = Symbol(\"startY\");\nconst touchSequenceAxisKey = Symbol(\"touchSequenceAxis\");\n\n/**\n * Map touch events to swipe gestures.\n *\n * @module TouchSwipeMixin\n * @param {Constructor<ReactiveElement>} Base\n */\nexport default function TouchSwipeMixin(Base) {\n  // The class prototype added by the mixin.\n  return class TouchSwipe extends Base {\n    [render](/** @type {ChangedFlags} */ changed) {\n      if (super[render]) {\n        super[render](changed);\n      }\n\n      if (this[firstRender]) {\n        // In all touch events, only handle single touches. We don't want to\n        // inadvertently do work when the user's trying to pinch-zoom for\n        // example. TODO: Touch events should probably be factored out into its\n        // own mixin.\n\n        // Prefer using the older touch events if supported.\n        // See the rationale for this in the comments for rendered.\n        if (\"TouchEvent\" in window) {\n          this.addEventListener(\"touchstart\", async (event) => {\n            this[raiseChangeEvents] = true;\n            if (this[multiTouchKey]) {\n              return;\n            } else if (event.touches.length === 1) {\n              const { clientX, clientY } = event.changedTouches[0];\n              gestureStart(this, clientX, clientY);\n            } else {\n              this[multiTouchKey] = true;\n            }\n            await Promise.resolve();\n            this[raiseChangeEvents] = false;\n          });\n\n          this.addEventListener(\"touchmove\", async (event) => {\n            this[raiseChangeEvents] = true;\n            if (\n              !this[multiTouchKey] &&\n              event.touches.length === 1 &&\n              event.target\n            ) {\n              const { clientX, clientY } = event.changedTouches[0];\n              const handled = gestureContinue(\n                this,\n                clientX,\n                clientY,\n                event.target\n              );\n              if (handled) {\n                event.preventDefault();\n                event.stopPropagation();\n              }\n            }\n            await Promise.resolve();\n            this[raiseChangeEvents] = false;\n          });\n\n          this.addEventListener(\"touchend\", async (event) => {\n            this[raiseChangeEvents] = true;\n            if (event.touches.length === 0 && event.target) {\n              // All touches removed; gesture is complete.\n              if (!this[multiTouchKey]) {\n                // Single-touch swipe has finished.\n                const { clientX, clientY } = event.changedTouches[0];\n                gestureEnd(this, clientX, clientY, event.target);\n              }\n              this[multiTouchKey] = false;\n            }\n            await Promise.resolve();\n            this[raiseChangeEvents] = false;\n          });\n        } else if (\"PointerEvent\" in window) {\n          // Use pointer events.\n          this.addEventListener(\"pointerdown\", async (event) => {\n            this[raiseChangeEvents] = true;\n            if (isEventForPenOrPrimaryTouch(event)) {\n              const { clientX, clientY } = event;\n              gestureStart(this, clientX, clientY);\n            }\n            await Promise.resolve();\n            this[raiseChangeEvents] = false;\n          });\n\n          this.addEventListener(\"pointermove\", async (event) => {\n            this[raiseChangeEvents] = true;\n            if (isEventForPenOrPrimaryTouch(event) && event.target) {\n              const { clientX, clientY } = event;\n              const handled = gestureContinue(\n                this,\n                clientX,\n                clientY,\n                event.target\n              );\n              if (handled) {\n                event.preventDefault();\n                event.stopPropagation();\n              }\n            }\n            await Promise.resolve();\n            this[raiseChangeEvents] = false;\n          });\n\n          this.addEventListener(\"pointerup\", async (event) => {\n            this[raiseChangeEvents] = true;\n            if (isEventForPenOrPrimaryTouch(event) && event.target) {\n              const { clientX, clientY } = event;\n              gestureEnd(this, clientX, clientY, event.target);\n            }\n            await Promise.resolve();\n            this[raiseChangeEvents] = false;\n          });\n        }\n\n        //\n        // Choosing a touch-action value is unfortunately fraught with issues.\n        //\n        // As best as we can tell, touch-action has different behavior with the\n        // older TouchEvents and the newer PointerEvents.\n        //\n        // With TouchEvents, we can set touch-action: manipulation, and get what\n        // we want in all cases. In particular, a touch-sensitive component on a\n        // scrolling surface will still be able to scroll if TouchSwipeMixin\n        // declines to handle a touch event. (It appears that more specific\n        // touch-action values like \"pan-x\" would prevent touch scrolling in the\n        // cross-axis, where as \"manipulation\" allows cross-axis scrolling.)\n        //\n        // With PointerEvents, it looks like we can get what we want in many\n        // cases with touch-action: none, but that has the unfortunate\n        // side-effect of disabling useful default interactions like scrolling\n        // with touch.\n        //\n        // For this reason, we currently prefer using TouchEvents. Those are\n        // supported In Chrome, Safari, and Firefox. (As of Oct 2018, MDN says\n        // TouchEvents are not supported in Safari, but as far as we can tell,\n        // they actually are.) On those browsers, we set touch-action:\n        // manipulation.\n        //\n        // That leaves Edge, where we're forced to use PointerEvents, and the best\n        // touch-action we can find is \"none\". That allows many use cases to\n        // function properly. However, components using TouchSwipeMixin on a\n        // scrolling surface in Edge won't be able to retain support for built-in\n        // touch features like scrolling.\n        //\n        this.style.touchAction =\n          \"TouchEvent\" in window ? \"manipulation\" : \"none\";\n      }\n    }\n\n    // @ts-ignore\n    get [defaultState]() {\n      return Object.assign(super[defaultState] || {}, {\n        swipeAxis: \"horizontal\",\n        swipeDownWillCommit: false,\n        swipeFraction: null,\n        swipeFractionMax: 1,\n        swipeFractionMin: -1,\n        swipeLeftWillCommit: false,\n        swipeRightWillCommit: false,\n        swipeStartX: null,\n        swipeStartY: null,\n        swipeUpWillCommit: false,\n      });\n    }\n\n    /**\n     * See [swipeTarget](internal#internal.swipeTarget).\n     *\n     * @property internal.swipeTarget\n     * @memberof TouchSwipeMixin\n     * @type {HTMLElement}\n     */\n    get [swipeTarget]() {\n      const base = super[swipeTarget];\n      return base || this;\n    }\n\n    [stateEffects](state, changed) {\n      const effects = super[stateEffects]\n        ? super[stateEffects](state, changed)\n        : {};\n\n      // If the swipeFraction crosses the -0.5 or 0.5 mark, update our notion of\n      // whether we'll commit an operation if the swipe were to finish at that\n      // point. This definition is compatible with one defined by\n      // TrackpadSwipeMixin.\n      if (changed.swipeFraction) {\n        const { swipeAxis, swipeFraction } = state;\n        if (swipeFraction !== null) {\n          if (swipeAxis === \"horizontal\") {\n            Object.assign(effects, {\n              swipeLeftWillCommit: swipeFraction <= -0.5,\n              swipeRightWillCommit: swipeFraction >= 0.5,\n            });\n          } else {\n            Object.assign(effects, {\n              swipeUpWillCommit: swipeFraction <= -0.5,\n              swipeDownWillCommit: swipeFraction >= 0.5,\n            });\n          }\n        }\n      }\n\n      return effects;\n    }\n  };\n}\n\n/**\n * Return true if the pointer event is for the pen, or the primary touch point.\n *\n * @private\n * @param {PointerEvent} event\n */\nfunction isEventForPenOrPrimaryTouch(event) {\n  return (\n    event.pointerType === \"pen\" ||\n    (event.pointerType === \"touch\" && event.isPrimary)\n  );\n}\n\n/**\n * Invoked when the user has moved during a touch operation.\n *\n * @private\n * @param {ReactiveElement} element\n * @param {number} clientX\n * @param {number} clientY\n * @param {EventTarget} eventTarget\n */\nfunction gestureContinue(element, clientX, clientY, eventTarget) {\n  /** @type {any} */ const cast = element;\n\n  // Calculate and save the velocity since the last event. If this is the last\n  // movement of the gesture, this velocity will be used to determine whether\n  // the user is trying to flick.\n  const { swipeAxis, swipeFractionMax, swipeFractionMin } = element[state];\n  const deltaX = clientX - cast[previousXKey];\n  const deltaY = clientY - cast[previousYKey];\n  const now = Date.now();\n  const deltaTime = now - cast[previousTimeKey];\n  const deltaAlongAxis = swipeAxis === \"vertical\" ? deltaY : deltaX;\n  const velocity = (deltaAlongAxis / deltaTime) * 1000;\n\n  cast[previousXKey] = clientX;\n  cast[previousYKey] = clientY;\n  cast[previousTimeKey] = now;\n  cast[previousVelocityKey] = velocity;\n\n  // Was this specific event more vertical or more horizontal?\n  const eventAxis =\n    Math.abs(deltaY) > Math.abs(deltaX) ? \"vertical\" : \"horizontal\";\n\n  // Is this the first touch move event in a swipe sequence?\n  const eventBeginsSequence = cast[touchSequenceAxisKey] === null;\n  if (eventBeginsSequence) {\n    // This first event's axis will determine which axis we'll respect for the\n    // rest of the sequence.\n    cast[touchSequenceAxisKey] = eventAxis;\n  } else if (eventAxis !== cast[touchSequenceAxisKey]) {\n    // This event continues a sequence. If the event's axis is perpendicular to\n    // the sequence's axis, we'll absorb this event. E.g., if the user started a\n    // vertical swipe (to scroll, say), then we absorb all subsequent horizontal\n    // touch events in the sequence.\n    return true;\n  }\n\n  if (eventAxis !== swipeAxis) {\n    // Move wasn't along the axis we care about, ignore it.\n    return false;\n  }\n\n  // Scrolling initially takes precedence over swiping.\n  if (cast[deferToScrollingKey]) {\n    // Predict whether the browser's default behavior for this event would cause\n    // the swipe target or any of its ancestors to scroll.\n    const downOrRight = deltaAlongAxis < 0;\n    const willScroll = canScrollInDirection(\n      eventTarget,\n      swipeAxis,\n      downOrRight\n    );\n    if (willScroll) {\n      // Don't interfere with scrolling.\n      return false;\n    }\n  }\n\n  // Since we know we're not defering to scrolling, we can start tracking\n  // the start of the swipe.\n  if (!cast[startXKey]) {\n    cast[startXKey] = clientX;\n  }\n  if (!cast[startYKey]) {\n    cast[startYKey] = clientY;\n  }\n\n  const fraction = getSwipeFraction(element, clientX, clientY);\n  const swipeFraction = Math.max(\n    Math.min(fraction, swipeFractionMax),\n    swipeFractionMin\n  );\n  if (element[state].swipeFraction === swipeFraction) {\n    // Already at min or max; no need for us to do anything.\n    return false;\n  }\n\n  // If we get this far, we have a touch event we want to handle.\n\n  // From this point on, swiping will take precedence over scrolling.\n  cast[deferToScrollingKey] = false;\n\n  element[setState]({ swipeFraction });\n\n  // Indicate that the event was handled. It'd be nicer if we didn't have\n  // to do this so that, e.g., a user could be swiping left and right\n  // while simultaneously scrolling up and down. (Native touch apps can do\n  // that.) However, Mobile Safari wants to handle swipe events near the\n  // page and interpret them as navigations. To avoid having a horiziontal\n  // swipe misintepreted as a navigation, we indicate that we've handled\n  // the event, and prevent default behavior.\n  return true;\n}\n\n/**\n * Invoked when the user has finished a touch operation.\n *\n * @private\n * @param {ReactiveElement} element\n * @param {number} clientX\n * @param {number} clientY\n * @param {EventTarget} eventTarget\n */\n/* eslint-disable no-unused-vars */\nfunction gestureEnd(element, clientX, clientY, eventTarget) {\n  // Examine velocity of last movement to see if user is flicking.\n  const velocity = /** @type {any} */ (element)[previousVelocityKey];\n  const flickThresholdVelocity = 800; // speed in pixels/second\n\n  const { swipeAxis, swipeFraction } = element[state];\n  const vertical = swipeAxis === \"vertical\";\n\n  // Scrolling takes precedence over flick gestures.\n  let willScroll = false;\n  if (element[deferToScrollingKey]) {\n    // Predict whether the browser's default behavior for this event would cause\n    // the swipe target or any of its ancestors to scroll.\n    const downOrRight = velocity < 0;\n    willScroll = canScrollInDirection(eventTarget, swipeAxis, downOrRight);\n  }\n\n  // We only count a flick if the swipe wasn't already going in the opposite\n  // direction. E.g., if the user begins a swipe to the left, then flicks right,\n  // that doesn't count, because the user may have simply been trying to\n  // undo/cancel the swipe to the left.\n  if (!willScroll) {\n    let flickPositive;\n    if (velocity >= flickThresholdVelocity && swipeFraction >= 0) {\n      // Flicked right/down at high speed.\n      flickPositive = true;\n      if (vertical) {\n        element[setState]({\n          swipeDownWillCommit: true,\n        });\n      } else {\n        element[setState]({\n          swipeRightWillCommit: true,\n        });\n      }\n    } else if (velocity <= -flickThresholdVelocity && swipeFraction <= 0) {\n      // Flicked left/up at high speed.\n      flickPositive = false;\n      if (vertical) {\n        element[setState]({\n          swipeUpWillCommit: true,\n        });\n      } else {\n        element[setState]({\n          swipeLeftWillCommit: true,\n        });\n      }\n    } else {\n      // Finished at low speed.\n      // If the user swiped far enough to commit a gesture, handle it now.\n      if (\n        element[state].swipeLeftWillCommit ||\n        element[state].swipeUpWillCommit\n      ) {\n        flickPositive = false;\n      } else if (\n        element[state].swipeRightWillCommit ||\n        element[state].swipeDownWillCommit\n      ) {\n        flickPositive = true;\n      }\n    }\n\n    if (typeof flickPositive !== \"undefined\") {\n      const gesture = vertical\n        ? flickPositive\n          ? swipeDown\n          : swipeUp\n        : flickPositive\n        ? swipeRight\n        : swipeLeft;\n      // If component has method for indicated gesture, invoke it.\n      if (gesture && element[gesture]) {\n        element[gesture]();\n      }\n    }\n  }\n\n  /** @type {any} */ (element)[touchSequenceAxisKey] = null;\n\n  element[setState]({\n    swipeFraction: null,\n  });\n}\n\n/**\n * Invoked when the user has begun a touch operation.\n *\n * @private\n * @param {ReactiveElement} element\n * @param {number} clientX\n * @param {number} clientY\n */\nfunction gestureStart(element, clientX, clientY) {\n  /** @type {any} */ const cast = element;\n  cast[deferToScrollingKey] = true;\n  cast[previousTimeKey] = Date.now();\n  cast[previousVelocityKey] = 0;\n  cast[previousXKey] = clientX;\n  cast[previousYKey] = clientY;\n  cast[startXKey] = null;\n  cast[startYKey] = null;\n  cast[touchSequenceAxisKey] = null;\n\n  element[setState]({\n    swipeFraction: 0,\n  });\n\n  // Let component know a swipe is starting.\n  if (element[swipeStart]) {\n    element[swipeStart](clientX, clientY);\n  }\n}\n\n/**\n * Return the fraction represented by the swipe to the given x/y.\n *\n * @private\n * @param {ReactiveElement} element\n * @param {number} x\n * @param {number} y\n */\nfunction getSwipeFraction(element, x, y) {\n  const { swipeAxis } = element[state];\n  /** @type {any} */ const cast = element;\n  const vertical = swipeAxis === \"vertical\";\n  const dragDistance = vertical ? y - cast[startYKey] : x - cast[startXKey];\n  const swipeTargetSize = vertical\n    ? element[swipeTarget].offsetHeight\n    : element[swipeTarget].offsetWidth;\n  const fraction = swipeTargetSize > 0 ? dragDistance / swipeTargetSize : 0;\n  return fraction;\n}\n","import ReactiveElement from \"../core/ReactiveElement.js\"; // eslint-disable-line no-unused-vars\nimport {\n  defaultState,\n  raiseChangeEvents,\n  scrollTarget,\n  setState,\n  state,\n  stateEffects,\n  swipeDown,\n  swipeLeft,\n  swipeRight,\n  swipeStart,\n  swipeTarget,\n  swipeUp,\n} from \"./internal.js\";\nimport { canScrollInDirection } from \"./scrolling.js\";\n\nconst absorbDecelerationKey = Symbol(\"absorbDeceleration\");\nconst deferToScrollingKey = Symbol(\"deferToScrolling\");\nconst lastDeltaXKey = Symbol(\"lastDeltaX\");\nconst lastDeltaYKey = Symbol(\"lastDeltaY\");\nconst lastWheelTimeoutKey = Symbol(\"lastWheelTimeout\");\nconst postGestureDelayCompleteKey = Symbol(\"postGestureDelayComplete\");\nconst wheelDistanceKey = Symbol(\"wheelDistance\");\nconst wheelSequenceAxisKey = Symbol(\"wheelSequenceAxis\");\n\n// Time we wait following a gesture before paying attention to wheel events\n// again.\nconst POST_GESTURE_TIME = 250;\n\n// Time we wait after the last wheel event before we reset things.\nconst WHEEL_TIME = 100;\n\n/**\n * Map trackpad events to swipe gestures.\n *\n * @module TrackpadSwipeMixin\n * @param {Constructor<ReactiveElement>} Base\n */\nexport default function TrackpadSwipeMixin(Base) {\n  // The class prototype added by the mixin.\n  return class TrackpadSwipe extends Base {\n    constructor() {\n      // @ts-ignore\n      super();\n      this.addEventListener(\"wheel\", async (event) => {\n        this[raiseChangeEvents] = true;\n        const handled = handleWheel(this, event);\n        if (handled) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n        await Promise.resolve();\n        this[raiseChangeEvents] = false;\n      });\n      resetWheelTracking(this);\n    }\n\n    // @ts-ignore\n    get [defaultState]() {\n      return Object.assign(super[defaultState] || {}, {\n        swipeAxis: \"horizontal\",\n        swipeDownWillCommit: false,\n        swipeFraction: null,\n        swipeFractionMax: 1,\n        swipeFractionMin: -1,\n        swipeLeftWillCommit: false,\n        swipeRightWillCommit: false,\n        swipeUpWillCommit: false,\n      });\n    }\n\n    /**\n     * See [swipeTarget](internal#internal.swipeTarget).\n     *\n     * @property internal.swipeTarget\n     * @memberof TrackpadSwipeMixin\n     * @type {HTMLElement}\n     */\n    get [swipeTarget]() {\n      const base = super[swipeTarget];\n      return base || this;\n    }\n\n    [stateEffects](state, changed) {\n      const effects = super[stateEffects]\n        ? super[stateEffects](state, changed)\n        : {};\n\n      // If the swipeFraction crosses the -0.5 or 0.5 mark, update our notion of\n      // whether we'll commit an operation if the swipe were to finish at that\n      // point. This definition is compatible with one defined by\n      // TouchSwipeMixin.\n      if (changed.swipeFraction) {\n        const { swipeAxis, swipeFraction } = state;\n        if (swipeFraction !== null) {\n          if (swipeAxis === \"horizontal\") {\n            Object.assign(effects, {\n              swipeLeftWillCommit: swipeFraction <= -0.5,\n              swipeRightWillCommit: swipeFraction >= 0.5,\n            });\n          } else {\n            Object.assign(effects, {\n              swipeUpWillCommit: swipeFraction <= -0.5,\n              swipeDownWillCommit: swipeFraction >= 0.5,\n            });\n          }\n        }\n      }\n\n      return effects;\n    }\n  };\n}\n\n/**\n * A wheel event has been generated. This could be a real wheel event, or it\n * could be fake (see notes in the header).\n *\n * This handler uses several strategies to try to approximate native trackpad\n * swipe gesture.\n *\n * If the user has dragged enough to cause a gesture, then for a short delay\n * following that gesture, subsequent wheel events will be ignored.\n *\n * Furthermore, following a gesture, we ignore all wheel events until we receive\n * at least one event where the event's deltaX (distance traveled) is *greater*\n * than the previous event's deltaX. This helps us filter out the fake wheel\n * events generated by the browser to simulate deceleration.\n *\n * @private\n * @param {ReactiveElement} element\n * @param {WheelEvent} event\n */\nfunction handleWheel(element, event) {\n  /** @type {any} */ const cast = element;\n\n  // Since we have a new wheel event, reset our timer waiting for the last\n  // wheel event to pass.\n  if (cast[lastWheelTimeoutKey]) {\n    clearTimeout(cast[lastWheelTimeoutKey]);\n  }\n  cast[lastWheelTimeoutKey] = setTimeout(async () => {\n    element[raiseChangeEvents] = true;\n    wheelTimedOut(element);\n    await Promise.resolve();\n    cast[raiseChangeEvents] = false;\n  }, WHEEL_TIME);\n\n  const deltaX = event.deltaX;\n  const deltaY = event.deltaY;\n\n  // See if component event represents acceleration or deceleration.\n  const { swipeAxis, swipeFractionMax, swipeFractionMin } = element[state];\n  const vertical = swipeAxis === \"vertical\";\n  const acceleration = vertical\n    ? Math.sign(deltaY) * (deltaY - cast[lastDeltaYKey])\n    : Math.sign(deltaX) * (deltaX - cast[lastDeltaXKey]);\n  cast[lastDeltaXKey] = deltaX;\n  cast[lastDeltaYKey] = deltaY;\n\n  // Is this the first wheel event in a swipe sequence?\n  const eventBeginsSwipe = cast[wheelSequenceAxisKey] === null;\n\n  // Was this specific event more vertical or more horizontal?\n  const eventAxis =\n    Math.abs(deltaY) > Math.abs(deltaX) ? \"vertical\" : \"horizontal\";\n\n  if (!eventBeginsSwipe && eventAxis !== cast[wheelSequenceAxisKey]) {\n    // This event continues a sequence. If the event's axis is perpendicular to\n    // the sequence's axis, we'll absorb this event. E.g., if the user started a\n    // vertical swipe (to scroll, say), then we absorb all subsequent horizontal\n    // wheel events in the sequence.\n    return true;\n  }\n\n  if (eventAxis !== swipeAxis) {\n    // Move wasn't along the axis we care about, ignore it.\n    return false;\n  }\n\n  if (!cast[postGestureDelayCompleteKey]) {\n    // It's too soon after a gesture; absorb the event.\n    return true;\n  }\n\n  if (acceleration > 0) {\n    // The events are not (or are no longer) decelerating, so we can start\n    // paying attention to them again.\n    cast[absorbDecelerationKey] = false;\n  } else if (cast[absorbDecelerationKey]) {\n    // The wheel event was likely faked to simulate deceleration; absorb it.\n    return true;\n  }\n\n  // Scrolling initially takes precedence over swiping.\n  if (cast[deferToScrollingKey]) {\n    // Predict whether the browser's default behavior for this event would cause\n    // the swipe target or any of its ancestors to scroll.\n    const target = element[scrollTarget] || element;\n    const deltaAlongAxis = vertical ? deltaY : deltaX;\n    const downOrRight = deltaAlongAxis > 0;\n    const willScroll = canScrollInDirection(target, swipeAxis, downOrRight);\n    if (willScroll) {\n      // Don't interfere with scrolling.\n      return false;\n    }\n  }\n\n  // If we get this far, we have a wheel event we want to handle.\n\n  // From this point on, swiping will take precedence over scrolling.\n  cast[deferToScrollingKey] = false;\n\n  if (eventBeginsSwipe) {\n    // This first event's axis will determine which axis we'll respect for the\n    // rest of the sequence.\n    cast[wheelSequenceAxisKey] = eventAxis;\n    if (element[swipeStart]) {\n      // Let component know a swipe is starting.\n      element[swipeStart](event.clientX, event.clientY);\n    }\n  }\n\n  cast[wheelDistanceKey] -= vertical ? deltaY : deltaX;\n\n  // Update the travel fraction of the component being navigated.\n  const targetDimension = vertical\n    ? cast[swipeTarget].offsetHeight\n    : cast[swipeTarget].offsetWidth;\n  let fraction =\n    targetDimension > 0 ? cast[wheelDistanceKey] / targetDimension : 0;\n  fraction = Math.sign(fraction) * Math.min(Math.abs(fraction), 1);\n  const swipeFraction = Math.max(\n    Math.min(fraction, swipeFractionMax),\n    swipeFractionMin\n  );\n\n  // If the user has dragged enough to reach the previous/next item, then\n  // perform the gesture immediately. (We don't need to wait for the wheel to\n  // time out.)\n  let gesture;\n  if (swipeFraction === -1) {\n    gesture = vertical ? swipeUp : swipeLeft;\n  } else if (swipeFraction === 1) {\n    gesture = vertical ? swipeDown : swipeRight;\n  }\n  if (gesture) {\n    performImmediateGesture(element, gesture);\n  } else {\n    element[setState]({ swipeFraction });\n  }\n\n  return true;\n}\n\n/**\n * Immediately perform the indicated gesture.\n *\n * @private\n * @param {ReactiveElement} element\n * @param {string} gesture\n */\nfunction performImmediateGesture(element, gesture) {\n  if (element[gesture]) {\n    element[gesture]();\n  }\n  // Reset our tracking following the gesture. Because the user may still be\n  // swiping on the trackpad, we reset things slightly differently than when the\n  // wheel times out.\n  /** @type {any} */ const cast = element;\n  cast[absorbDecelerationKey] = true;\n  cast[deferToScrollingKey] = true;\n  cast[postGestureDelayCompleteKey] = false;\n  cast[wheelDistanceKey] = 0;\n  cast[wheelSequenceAxisKey] = null;\n  setTimeout(() => {\n    cast[postGestureDelayCompleteKey] = true;\n  }, POST_GESTURE_TIME);\n  // We've handled a gesture, so reset notion of what gestures are in progress.\n  element[setState]({\n    swipeDownWillCommit: false,\n    swipeFraction: null,\n    swipeLeftWillCommit: false,\n    swipeRightWillCommit: false,\n    swipeUpWillCommit: false,\n  });\n}\n\n/**\n * Reset all state related to the tracking of the wheel.\n *\n * @private\n * @param {ReactiveElement} element\n */\nfunction resetWheelTracking(element) {\n  /** @type {any} */ const cast = element;\n  cast[absorbDecelerationKey] = false;\n  cast[deferToScrollingKey] = true;\n  cast[lastDeltaXKey] = 0;\n  cast[lastDeltaYKey] = 0;\n  cast[postGestureDelayCompleteKey] = true;\n  cast[wheelDistanceKey] = 0;\n  cast[wheelSequenceAxisKey] = null;\n  if (cast[lastWheelTimeoutKey]) {\n    clearTimeout(cast[lastWheelTimeoutKey]);\n    cast[lastWheelTimeoutKey] = null;\n  }\n}\n\n/**\n * A sufficiently long period of time has passed since the last wheel event.\n * We snap the selection to the closest item, then reset our state.\n *\n * @private\n * @param {ReactiveElement} element\n */\nasync function wheelTimedOut(element) {\n  // If the user swiped far enough to commit a gesture, handle it now.\n  let gesture;\n  if (element[state].swipeDownWillCommit) {\n    gesture = swipeDown;\n  } else if (element[state].swipeLeftWillCommit) {\n    gesture = swipeLeft;\n  } else if (element[state].swipeRightWillCommit) {\n    gesture = swipeRight;\n  } else if (element[state].swipeUpWillCommit) {\n    gesture = swipeUp;\n  }\n\n  resetWheelTracking(element);\n  element[setState]({\n    swipeDownWillCommit: false,\n    swipeFraction: null,\n    swipeLeftWillCommit: false,\n    swipeRightWillCommit: false,\n    swipeUpWillCommit: false,\n  });\n\n  if (gesture && element[gesture]) {\n    await element[gesture]();\n  }\n}\n","import { forwardFocus } from \"../core/dom.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport AriaListMixin from \"./AriaListMixin.js\";\nimport ArrowDirectionMixin from \"./ArrowDirectionMixin.js\";\nimport DirectionCursorMixin from \"./DirectionCursorMixin.js\";\nimport Explorer from \"./Explorer.js\";\nimport FocusVisibleMixin from \"./FocusVisibleMixin.js\";\nimport {\n  defaultState,\n  ids,\n  render,\n  setState,\n  state,\n  stateEffects,\n  swipeTarget,\n  template,\n} from \"./internal.js\";\nimport KeyboardDirectionMixin from \"./KeyboardDirectionMixin.js\";\nimport KeyboardMixin from \"./KeyboardMixin.js\";\nimport SlidingStage from \"./SlidingStage.js\";\nimport SwipeDirectionMixin from \"./SwipeDirectionMixin.js\";\nimport TouchSwipeMixin from \"./TouchSwipeMixin.js\";\nimport TrackpadSwipeMixin from \"./TrackpadSwipeMixin.js\";\n\nconst Base = AriaListMixin(\n  ArrowDirectionMixin(\n    DirectionCursorMixin(\n      FocusVisibleMixin(\n        KeyboardDirectionMixin(\n          KeyboardMixin(\n            SwipeDirectionMixin(TouchSwipeMixin(TrackpadSwipeMixin(Explorer)))\n          )\n        )\n      )\n    )\n  )\n);\n\n/**\n * Carousel with a sliding effect and navigation controls\n *\n * Allows a user to navigate a horizontal set of items with touch, mouse,\n * keyboard, or trackpad. This component shows a small dot for each of its\n * items, and displays a sliding effect when moving between items.\n *\n * @inherits Explorer\n * @mixes AriaListMixin\n * @mixes ArrowDirectionMixin\n * @mixes DirectionCursorMixin\n * @mixes FocusVisibleMixin\n * @mixes KeyboardDirectionMixin\n * @mixes KeyboardMixin\n * @mixes SwipeDirectionMixin\n * @mixes TouchSwipeMixin\n * @mixes TrackpadSwipeMixin\n * @part {SlidingStage} stage\n */\nclass Carousel extends Base {\n  // @ts-ignore\n  get [defaultState]() {\n    // Show arrow buttons if device has a fine-grained pointer (e.g., mouse).\n    // As of Mar 14 2018, Firefox does not yet support pointer queries, in which\n    // case we assume use of a mouse.\n    const pointerQuery = \"(pointer: fine)\";\n    const mediaQueryList = window.matchMedia(pointerQuery);\n    const showArrowButtons =\n      mediaQueryList.media === pointerQuery ? mediaQueryList.matches : true;\n    return Object.assign(super[defaultState], {\n      orientation: \"horizontal\",\n      proxyListOverlap: true,\n      proxyListPosition: \"bottom\",\n      showArrowButtons,\n      stagePartType: SlidingStage,\n    });\n  }\n\n  get orientation() {\n    return this[state].orientation;\n  }\n  set orientation(orientation) {\n    this[setState]({ orientation });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    if (changed.proxyListPartType && this[ids].proxyList) {\n      // Turn off focus handling for old proxy list.\n      const proxyList = this[ids].proxyList;\n      if (proxyList instanceof HTMLElement) {\n        forwardFocus(proxyList, null);\n      }\n    }\n\n    super[render](changed);\n\n    if (changed.stagePartType || changed.orientation) {\n      /** @type {any} */ const cast = this[ids].stage;\n      if (\"orientation\" in cast) {\n        cast.orientation = this[state].orientation;\n      }\n    }\n\n    if (changed.proxyListPartType) {\n      // Keep focus off of the proxies and onto the carousel itself.\n      const proxyList = this[ids].proxyList;\n      if (proxyList instanceof HTMLElement) {\n        forwardFocus(proxyList, this);\n      }\n      proxyList.removeAttribute(\"tabindex\");\n    }\n\n    if (changed.orientation || changed.proxyListPartType) {\n      /** @type {any} */ const cast = this[ids].proxyList;\n      if (\"orientation\" in cast) {\n        cast.orientation = this[state].orientation;\n      }\n    }\n\n    if (changed.stagePartType) {\n      this[ids].stage.removeAttribute(\"tabindex\");\n    }\n\n    const proxies = this.proxies;\n    if (changed.proxies && proxies) {\n      // Make proxies not focusable.\n      proxies.forEach((proxy) => {\n        if (proxy instanceof HTMLElement) {\n          proxy.tabIndex = -1;\n        }\n      });\n    }\n  }\n\n  // @ts-ignore\n  get [swipeTarget]() {\n    const base = super[swipeTarget];\n    const stage = this[ids].stage;\n    return stage instanceof HTMLElement ? stage : base;\n  }\n\n  [stateEffects](state, changed) {\n    const effects = super[stateEffects](state, changed);\n\n    // When orientation changes, have swipe axis follow suit, and also\n    // set the default proxy list position.\n    if (changed.orientation) {\n      const proxyListPosition =\n        state.orientation === \"horizontal\" ? \"bottom\" : \"right\";\n      Object.assign(effects, {\n        proxyListPosition,\n        swipeAxis: state.orientation,\n      });\n    }\n\n    return effects;\n  }\n\n  get [template]() {\n    const result = super[template];\n\n    const stage = result.content.querySelector(\"#stage\");\n    /** @type {any} */ const cast = this;\n    cast[ArrowDirectionMixin.wrap](stage);\n\n    const proxyList = result.content.getElementById(\"proxyList\");\n    if (proxyList) {\n      proxyList.removeAttribute(\"tabindex\");\n    }\n\n    result.content.append(\n      fragmentFrom.html`\n        <style>\n          [part~=\"stage\"] {\n            height: 100%;\n            width: 100%;\n          }\n        </style>\n      `\n    );\n\n    return result;\n  }\n}\n\nexport default Carousel;\n","import ReactiveElement from \"../core/ReactiveElement.js\"; // eslint-disable-line no-unused-vars\nimport {\n  checkSize,\n  defaultState,\n  rendered,\n  setState,\n  state,\n} from \"./internal.js\";\n\n/** @type {any} */ let resizeObserver;\n\n/**\n * Lets a component know when it has been resized.\n *\n * If/when the component changes size, this mixin updates the `clientHeight` and\n * `clientWidth` state members.\n *\n * This mixin requires `ResizeObserver`, which (as of May 2020) is supported in\n * all modern browsers.\n *\n * @module ResizeMixin\n * @param {Constructor<ReactiveElement>} Base\n */\nexport default function ResizeMixin(Base) {\n  return class Resize extends Base {\n    // Check this element's current height and width and, if either has changed,\n    // update the corresponding state members.\n    [checkSize]() {\n      if (super[checkSize]) {\n        super[checkSize]();\n      }\n      const { clientHeight, clientWidth } = this;\n      const sizeChanged =\n        clientHeight !== this[state].clientHeight ||\n        clientWidth !== this[state].clientWidth;\n      if (sizeChanged) {\n        this[setState]({\n          clientHeight,\n          clientWidth,\n        });\n      }\n    }\n\n    connectedCallback() {\n      super.connectedCallback();\n      if (resizeObserver) {\n        resizeObserver.observe(this);\n      }\n    }\n\n    // @ts-ignore\n    get [defaultState]() {\n      return Object.assign(super[defaultState] || {}, {\n        clientHeight: this.clientHeight,\n        clientWidth: this.clientWidth,\n      });\n    }\n\n    disconnectedCallback() {\n      if (super.disconnectedCallback) {\n        super.disconnectedCallback();\n      }\n      if (resizeObserver) {\n        resizeObserver.unobserve(this);\n      }\n    }\n\n    [rendered](/** @type {ChangedFlags} */ changed) {\n      if (super[rendered]) {\n        super[rendered](changed);\n      }\n\n      this[checkSize]();\n    }\n  };\n}\n\n// Is ResizeObserve supported?\nconst Observer = window[\"ResizeObserver\"];\nif (typeof Observer !== \"undefined\") {\n  // Use ResizeObserver.\n  resizeObserver = new Observer((/** @type {any[]} */ entries) => {\n    entries.forEach((entry) => {\n      // In theory, the \"content size\" reported by ResizeObserver appears to be\n      // the same as the clientHeight/clientWidth. Neither should include\n      // padding. But since this theory is not explicitly confirmed by the\n      // ResizeObserver docs, it seems safest to reference the element's current\n      // client size.\n      const { target } = entry;\n      const { clientHeight, clientWidth } = target;\n      target[setState]({\n        clientHeight,\n        clientWidth,\n      });\n    });\n  });\n}\n","import { templateFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\";\nimport CursorAPIMixin from \"./CursorAPIMixin.js\";\nimport CursorSelectMixin from \"./CursorSelectMixin.js\";\nimport EffectMixin from \"./EffectMixin.js\";\nimport {\n  defaultState,\n  ids,\n  render,\n  setState,\n  state,\n  template,\n} from \"./internal.js\";\nimport ItemsAPIMixin from \"./ItemsAPIMixin.js\";\nimport ItemsCursorMixin from \"./ItemsCursorMixin.js\";\nimport LanguageDirectionMixin from \"./LanguageDirectionMixin.js\";\nimport ResizeMixin from \"./ResizeMixin.js\";\nimport SingleSelectAPIMixin from \"./SingleSelectAPIMixin.js\";\nimport SlotItemsMixin from \"./SlotItemsMixin.js\";\nimport TapCursorMixin from \"./TapCursorMixin.js\";\n\nconst Base = CursorAPIMixin(\n  CursorSelectMixin(\n    EffectMixin(\n      ItemsAPIMixin(\n        ItemsCursorMixin(\n          LanguageDirectionMixin(\n            ResizeMixin(\n              SingleSelectAPIMixin(\n                SlotItemsMixin(TapCursorMixin(ReactiveElement))\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n);\n\n/**\n * Horizontal strip of items with the selected item centered\n *\n * This keeps the selected item centered unless that item is at either end of\n * the list.\n *\n * @inherits ReactiveElement\n * @mixes CursorAPIMixin\n * @mixes CursorSelectMixin\n * @mixes EffectMixin\n * @mixes ItemsAPIMixin\n * @mixes ItemsCursorMixin\n * @mixes LanguageDirectionMixin\n * @mixes ResizeMixin\n * @mixes SingleSelectAPIMixin\n * @mixes SlotItemsMixin\n * @mixes TapCursorMixin\n */\nclass CenteredStrip extends Base {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      currentItemRequired: true,\n      orientation: \"horizontal\",\n    });\n  }\n\n  get orientation() {\n    return this[state].orientation;\n  }\n  set orientation(orientation) {\n    this[setState]({ orientation });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n    if (\n      changed.clientWidth ||\n      changed.enableEffects ||\n      changed.rightToLeft ||\n      changed.currentIndex ||\n      changed.swipeFraction\n    ) {\n      const { orientation, rightToLeft, currentIndex } = this[state];\n      const sign = rightToLeft ? 1 : -1;\n      const swiping = this[state].swipeFraction != null;\n      const swipeFraction = this[state].swipeFraction || 0;\n      const selectionFraction = currentIndex + sign * swipeFraction;\n\n      const vertical = orientation === \"vertical\";\n      const leadingEdge = vertical ? \"offsetTop\" : \"offsetLeft\";\n      const dimension = vertical ? \"offsetHeight\" : \"offsetWidth\";\n\n      // @ts-ignore\n      const stripContainerDimension = this[ids].stripContainer[dimension];\n      // @ts-ignore\n      const stripDimension = this[ids].strip[dimension];\n\n      // It seems this method can be invoked before the strip any height/width.\n      // We only render if the height/width is positive.\n      if (stripDimension > 0) {\n        let translation = 0; // The amount by which we'll shift content horizontally\n        let justifyContent = \"\";\n        if (stripDimension <= stripContainerDimension) {\n          // Container can show all items. Center all items.\n          justifyContent = \"center\";\n        } else {\n          // Items are wider than container can show.\n          // Center the selected item.\n          // During swipes, center a pro-rated point between the midpoints\n          // of the items on either side of the fractional selection.\n\n          const itemBeforeIndex = Math.floor(selectionFraction);\n          const itemBefore = this.items && this.items[itemBeforeIndex];\n          const itemBeforeCenter =\n            itemBefore instanceof HTMLElement\n              ? itemBefore[leadingEdge] + itemBefore[dimension] / 2\n              : 0;\n          const itemAfterIndex = itemBeforeIndex + 1;\n          const itemAfter = this.items && this.items[itemAfterIndex];\n          const itemAfterCenter =\n            itemAfter instanceof HTMLElement\n              ? itemAfter[leadingEdge] + itemAfter[dimension] / 2\n              : 0;\n\n          let center = 0;\n          if (itemBefore && !itemAfter) {\n            center = itemBeforeCenter;\n          } else if (!itemBefore && itemAfter) {\n            center = itemAfterCenter;\n          } else if (itemBefore && itemAfter) {\n            const offsetFraction = selectionFraction - itemBeforeIndex;\n            // TODO: sign\n            center =\n              itemBeforeCenter +\n              offsetFraction * (itemAfterCenter - itemBeforeCenter);\n          }\n          if (!vertical && rightToLeft) {\n            center = stripDimension - center;\n          }\n\n          // Try to center the selected item.\n          translation = center - stripContainerDimension / 2;\n\n          // Constrain x to avoid showing space on either end.\n          translation = Math.max(translation, 0);\n          translation = Math.min(\n            translation,\n            stripDimension - stripContainerDimension\n          );\n\n          translation *= sign;\n        }\n\n        const axis = vertical ? \"Y\" : \"X\";\n        const transform = `translate${axis}(${translation}px)`;\n        const showTransition = this[state].enableEffects && !swiping;\n        Object.assign(this[ids].strip.style, {\n          transform,\n          transition: showTransition ? \"transform 0.25s\" : \"none\",\n        });\n\n        this[ids].stripContainer.style.justifyContent = justifyContent;\n      }\n    }\n    if (changed.items || changed.currentIndex) {\n      // Apply `selected` style to the selected item only.\n      const { currentIndex, items } = this[state];\n      if (items) {\n        items.forEach((item, index) => {\n          item.toggleAttribute(\"selected\", index === currentIndex);\n        });\n      }\n    }\n    if (changed.orientation) {\n      const flexDirection =\n        this[state].orientation === \"horizontal\" ? \"\" : \"column\";\n      this[ids].stripContainer.style.flexDirection = flexDirection;\n      this[ids].strip.style.flexDirection = flexDirection;\n    }\n  }\n\n  get swipeFraction() {\n    return this[state].swipeFraction;\n  }\n  set swipeFraction(swipeFraction) {\n    this[setState]({ swipeFraction });\n  }\n\n  get [template]() {\n    return templateFrom.html`\n      <style>\n        :host {\n          cursor: default;\n          display: inline-flex;\n          -webkit-tap-highlight-color: transparent;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          -webkit-user-select: none;\n          user-select: none;\n        }\n\n        #stripContainer {\n          display: flex;\n          flex: 1;\n          overflow: hidden;\n          position: relative;\n        }\n\n        #strip {\n          display: inline-flex;\n          position: relative;\n          transition: transform 0.25s;\n        }\n      </style>\n      <div id=\"stripContainer\" role=\"none\">\n        <div id=\"strip\" role=\"none\">\n          <slot></slot>\n        </div>\n      </div>\n    `;\n  }\n}\n\nexport default CenteredStrip;\n","import CenteredStrip from \"../base/CenteredStrip.js\";\nimport {\n  defaultState,\n  render,\n  setState,\n  state,\n  template,\n} from \"../base/internal.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\n\nconst opacityMinimum = 0.4;\nconst opacityMaximum = 1.0;\n\n/**\n * Centered strip showing unselected items with partial opacity\n *\n * [`CenteredStripOpacity` is used by Carousel for dots or\n * thumbnails](/demos/centeredStripOpacity.html)\n *\n * For a variation that uses a highlight color instead of opacity, see\n * [CenteredStripHighlight](CenteredStripHighlight).\n *\n * @inherits CenteredStrip\n */\nclass PlainCenteredStripOpacity extends CenteredStrip {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      transitionDuration: 250,\n    });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n    if (\n      changed.currentIndex ||\n      changed.enableEffects ||\n      changed.items ||\n      changed.rightToLeft ||\n      changed.swipeFraction ||\n      changed.transitionDuration\n    ) {\n      // Apply opacity based on which item is current.\n      const {\n        currentIndex,\n        enableEffects,\n        items,\n        rightToLeft,\n        swipeFraction,\n        transitionDuration,\n      } = this[state];\n      if (items) {\n        const sign = rightToLeft ? 1 : -1;\n        const swiping = swipeFraction != null;\n        const selectionFraction = sign * (swipeFraction || 0);\n        const showTransition = enableEffects && !swiping;\n        const opacityTransitionValue = showTransition\n          ? `${transitionDuration / 1000}s linear`\n          : null;\n        items.forEach((item, index) => {\n          const existingTransition = getComputedStyle(item).transition;\n          const transition = mergeSinglePropertyTransition(\n            existingTransition,\n            \"opacity\",\n            opacityTransitionValue\n          );\n          const opacity = opacityForItemWithIndex(\n            index,\n            currentIndex,\n            selectionFraction\n          );\n          Object.assign(item.style, {\n            opacity,\n            transition,\n          });\n        });\n      }\n    }\n  }\n\n  get [template]() {\n    const result = super[template];\n    result.content.append(\n      fragmentFrom.html`\n        <style>\n          ::slotted(*) {\n            opacity: ${opacityMinimum.toString()};\n          }\n        </style>\n      `\n    );\n    return result;\n  }\n\n  get transitionDuration() {\n    return this[state].transitionDuration;\n  }\n  set transitionDuration(transitionDuration) {\n    this[setState]({ transitionDuration });\n  }\n}\n\n/**\n * @private\n * @param {number} index\n * @param {number} currentIndex\n * @param {number} selectionFraction\n */\nfunction opacityForItemWithIndex(index, currentIndex, selectionFraction) {\n  const opacityRange = opacityMaximum - opacityMinimum;\n  const fractionalIndex = currentIndex + selectionFraction;\n  const leftIndex = Math.floor(fractionalIndex);\n  const rightIndex = Math.ceil(fractionalIndex);\n  let awayIndex = selectionFraction >= 0 ? leftIndex : rightIndex;\n  let towardIndex = selectionFraction >= 0 ? rightIndex : leftIndex;\n  const truncatedSwipeFraction =\n    selectionFraction < 0\n      ? Math.ceil(selectionFraction)\n      : Math.floor(selectionFraction);\n  const progress = selectionFraction - truncatedSwipeFraction;\n  const opacityProgressThroughRange = Math.abs(progress) * opacityRange;\n\n  let opacity;\n  if (index === awayIndex) {\n    opacity = opacityMaximum - opacityProgressThroughRange;\n  } else if (index === towardIndex) {\n    opacity = opacityMinimum + opacityProgressThroughRange;\n  } else {\n    opacity = null; // Element will pick up minimum opacity from CSS.\n  }\n\n  return opacity;\n}\n\n/**\n * Given an existing CSS `transition` value, merge a transition for the property\n * with the indicated name and value on top of it. If the value is null, remove\n * the transition for the indicated property. Return a new string that can be\n * set as the value of an element's `transition` style property.\n *\n * This helper exists because the DOM represents the entire set of property\n * transitions on an object as a single string, with no easy way to selectively\n * update just a single property value.\n *\n * @private\n * @param {string} transition\n * @param {string} name\n * @param {string|null} value\n */\nfunction mergeSinglePropertyTransition(transition, name, value) {\n  // Properties are a name, whitespace, value.\n  const propertyRegex = /([\\w-]+)\\s+([^,]+)/g;\n  let match = propertyRegex.exec(transition);\n  while (match && match.groups) {\n    if (match.groups.name === name) {\n      break;\n    }\n    match = propertyRegex.exec(transition);\n  }\n  const definition = value ? `${name} ${value}` : \"\";\n  if (match) {\n    // Transition contains the indicated property.\n    // Splice in a new value at that point.\n    const start = match.index;\n    const length = match[0].length;\n    return (\n      transition.substr(0, start) +\n      definition +\n      transition.substr(start + length)\n    );\n  } else {\n    // Transition doesn't yet contain the indicated property; append it.\n    return [transition, definition].join(\", \");\n  }\n}\n\nexport default PlainCenteredStripOpacity;\n","import { defaultState, render, state, template } from \"../base/internal.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\"; // eslint-disable-line no-unused-vars\nimport PlainCenteredStripOpacity from \"./PlainCenteredStripOpacity.js\";\n\n/**\n * Carousel styles in the Plain reference design system\n *\n * @module PlainCarouselMixin\n * @param {Constructor<ReactiveElement>} Base\n * @part {PlainCenteredStripOpacity} proxy-list\n */\nexport default function PlainCarouselMixin(Base) {\n  return class PlainCarousel extends Base {\n    // @ts-ignore\n    get [defaultState]() {\n      return Object.assign(super[defaultState] || {}, {\n        proxyListPartType: PlainCenteredStripOpacity,\n      });\n    }\n\n    [render](changed) {\n      if (super[render]) {\n        super[render](changed);\n      }\n\n      const proxies = this.proxies;\n      if (\n        (changed.dark || changed.detectDarkMode || changed.proxies) &&\n        proxies\n      ) {\n        // Apply dark mode to proxies.\n        const { dark, detectDarkMode } = this[state];\n        proxies.forEach((proxy) => {\n          /** @type {any} */ const cast = proxy;\n          if (\"dark\" in cast) {\n            cast.dark = dark;\n          }\n          if (\"detectDarkMode\" in cast) {\n            cast.detectDarkMode = detectDarkMode;\n          }\n        });\n      }\n    }\n\n    get [template]() {\n      const result = super[template];\n      result.content.append(\n        fragmentFrom.html`\n          <style>\n            [part~=\"arrow-icon\"] {\n              font-size: 48px;\n            }\n          </style>\n        `\n      );\n      return result;\n    }\n  };\n}\n","import DarkModeMixin from \"../base/DarkModeMixin.js\";\nimport { firstRender, render, template } from \"../base/internal.js\";\nimport SelectableButton from \"../base/SelectableButton.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\n\nconst Base = DarkModeMixin(SelectableButton);\n\n/**\n * A small dot component in the Plain reference design system\n *\n * This used as the default proxy element to represent items in carousels like\n * [PlainCarousel](PlainCarousel).\n *\n * @inherits SelectableButton\n * @mixes DarkModeMixin\n */\nclass PlainPageDot extends Base {\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n\n    if (this[firstRender]) {\n      this.setAttribute(\"role\", \"none\");\n    }\n  }\n\n  get [template]() {\n    const result = super[template];\n    result.content.append(\n      fragmentFrom.html`\n        <style>\n          :host {\n            background-color: black;\n            border-radius: 7px;\n            box-shadow: 0 0 1px 1px rgba(0, 0, 0, 0.5);\n            box-sizing: border-box;\n            cursor: pointer;\n            height: 8px;\n            margin: 7px 5px;\n            padding: 0;\n            transition: opacity 0.2s;\n            width: 8px;\n          }\n\n          :host([dark]) {\n            background-color: white;\n          }\n\n          @media (min-width: 768px) {\n            :host {\n              height: 12px;\n              width: 12px;\n            }\n          }\n        </style>\n      `\n    );\n    return result;\n  }\n}\n\nexport default PlainPageDot;\n","import Carousel from \"../base/Carousel.js\";\nimport DarkModeMixin from \"../base/DarkModeMixin.js\";\nimport { defaultState } from \"../base/internal.js\";\nimport PlainArrowDirectionMixin from \"./PlainArrowDirectionMixin.js\";\nimport PlainCarouselMixin from \"./PlainCarouselMixin.js\";\nimport PlainPageDot from \"./PlainPageDot.js\";\n\n/**\n * Carousel component in the Plain reference design system\n *\n * @inherits Carousel\n * @mixes DarkModeMixin\n * @mixes PlainArrowDirectionMixin\n * @mixes PlainCarouselMixin\n * @part {PlainPageDot} proxy\n */\nclass PlainCarousel extends DarkModeMixin(\n  PlainArrowDirectionMixin(PlainCarouselMixin(Carousel))\n) {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      proxyPartType: PlainPageDot,\n    });\n  }\n}\n\nexport default PlainCarousel;\n","import ReactiveElement from \"../core/ReactiveElement.js\"; // eslint-disable-line no-unused-vars\nimport {\n  effectEndTarget,\n  firstRender,\n  render,\n  rendered,\n  setState,\n  shadowRoot,\n  startEffect,\n  state,\n} from \"./internal.js\";\n\n/**\n * Update state before, during, and after CSS transitions\n *\n * @module TransitionEffectMixin\n * @param {Constructor<ReactiveElement>} Base\n */\nexport default function TransitionEffectMixin(Base) {\n  // The class prototype added by the mixin.\n  class TransitionEffect extends Base {\n    /**\n     * Return the elements that use CSS transitions to provide visual effects.\n     *\n     * By default, this assumes the host element itself will have a CSS\n     * transition applied to it, and so returns an array containing the element.\n     * If you will be applying CSS transitions to other elements, override this\n     * property and return an array containing the implicated elements.\n     *\n     * See [effectEndTarget](internal#internal.effectEndTarget)\n     * for details.\n     *\n     * @type {HTMLElement}\n     */\n    get [effectEndTarget]() {\n      return super[effectEndTarget] || this;\n    }\n\n    [render](/** @type {ChangedFlags} */ changed) {\n      if (super[render]) {\n        super[render](changed);\n      }\n      if (this[firstRender]) {\n        // Listen for `transitionend` events so we can check to see whether an\n        // effect has completed. If the component defines an `effectEndTarget`\n        // that's the host, listen to events on that. Otherwise, we assume the\n        // target is either in the shadow or an element that will be slotted into\n        // a slot in the shadow, so we'll listen to events that reach the shadow\n        // root.\n        const target = this[effectEndTarget] === this ? this : this[shadowRoot];\n        target.addEventListener(\"transitionend\", (event) => {\n          // See if the event target is our expected `effectEndTarget`. If the\n          // component defines a `effectEndTarget` state, we use that; otherwise,\n          // we use the element identified with `internal.effectEndTarget`.\n          const effectTarget =\n            this[state].effectEndTarget || this[effectEndTarget];\n          if (event.target === effectTarget) {\n            // Advance to the next phase.\n            this[setState]({\n              effectPhase: \"after\",\n            });\n          }\n        });\n      }\n    }\n\n    [rendered](/** @type {ChangedFlags} */ changed) {\n      if (super[rendered]) {\n        super[rendered](changed);\n      }\n      if (changed.effect || changed.effectPhase) {\n        const { effect, effectPhase } = this[state];\n        /**\n         * Raised when [state.effect](TransitionEffectMixin#effect-phases) or\n         * [state.effectPhase](TransitionEffectMixin#effect-phases) changes.\n         *\n         * Note: In general, Elix components do not raise events in response to\n         * outside manipulation. (See\n         * [raiseChangeEvents](internal#internal.raiseChangeEvents).) However, for\n         * a component using `TransitionEffectMixin`, a single invocation of the\n         * `startEffect` method will cause the element to pass through multiple\n         * visual states. This makes it hard for external hosts of this\n         * component to know what visual state the component is in. Accordingly,\n         * the mixin raises the `effectphasechange` event whenever the effect or\n         * phase changes, even if `internal.raiseChangeEvents` is false.\n         *\n         * @event effectphasechange\n         */\n        const event = new CustomEvent(\"effectphasechange\", {\n          bubbles: true,\n          detail: {\n            effect,\n            effectPhase,\n          },\n        });\n        this.dispatchEvent(event);\n\n        if (effect) {\n          if (effectPhase !== \"after\") {\n            // We read a layout property to force the browser to render the component\n            // with its current styles before we move to the next state. This ensures\n            // animated values will actually be applied before we move to the next\n            // state.\n            this.offsetHeight;\n          }\n          if (effectPhase === \"before\") {\n            // Advance to the next phase.\n            this[setState]({\n              effectPhase: \"during\",\n            });\n          }\n        }\n      }\n    }\n\n    /**\n     * See [startEffect](internal#internal.startEffect).\n     *\n     * @param {string} effect\n     */\n    async [startEffect](effect) {\n      await this[setState]({\n        effect,\n        effectPhase: \"before\",\n      });\n    }\n  }\n\n  return TransitionEffect;\n}\n","import { templateFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\";\nimport CursorAPIMixin from \"./CursorAPIMixin.js\";\nimport CursorSelectMixin from \"./CursorSelectMixin.js\";\nimport EffectMixin from \"./EffectMixin.js\";\nimport {\n  defaultState,\n  firstRender,\n  render,\n  setState,\n  state,\n  stateEffects,\n  template,\n} from \"./internal.js\";\nimport ItemsAPIMixin from \"./ItemsAPIMixin.js\";\nimport ItemsCursorMixin from \"./ItemsCursorMixin.js\";\nimport SingleSelectAPIMixin from \"./SingleSelectAPIMixin.js\";\nimport SlotItemsMixin from \"./SlotItemsMixin.js\";\nimport TransitionEffectMixin from \"./TransitionEffectMixin.js\";\n\nconst Base = CursorAPIMixin(\n  CursorSelectMixin(\n    EffectMixin(\n      ItemsAPIMixin(\n        ItemsCursorMixin(\n          SingleSelectAPIMixin(\n            SlotItemsMixin(TransitionEffectMixin(ReactiveElement))\n          )\n        )\n      )\n    )\n  )\n);\n\n/**\n * Shows a crossfade effect when transitioning between a single selected item.\n *\n * Like [Modes](Modes), this component shows a single item at a time, but it\n * adds a crossfade effect when transitioning between items.\n *\n * @inherits Modes\n * @mixes CursorAPIMixin\n * @mixes CursorSelectMixin\n * @mixes EffectMixin\n * @mixes ItemsAPIMixin\n * @mixes ItemsCursorMixin\n * @mixes SingleSelectAPIMixin\n * @mixes SlotItemsMixin\n * @mixes TransitionEffectMixin\n */\nclass CrossfadeStage extends Base {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      currentItemRequired: true,\n      effect: \"select\",\n      effectEndTarget: null,\n      effectPhase: \"after\",\n      transitionDuration: 750, // 3/4 of a second\n    });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n\n    if (this[firstRender]) {\n      this.addEventListener(\"effectphasechange\", (event) => {\n        /** @type {any} */ const cast = event;\n        if (cast.detail.effectPhase === \"after\") {\n          const { currentIndex } = this[state];\n          /**\n           * This event is raised when changing the selection and the selection\n           * effect has completed.\n           *\n           * The order of events when the `currentIndex` property changes is\n           * therefore: `selectedindexchange` (occurs immediately when the index\n           * changes), followed by `selectioneffectend` (occurs some time\n           * later).\n           *\n           * @event selectioneffectfinish\n           */\n          const event = new CustomEvent(\"selectioneffectend\", {\n            bubbles: true,\n            detail: {\n              selectedIndex: currentIndex,\n            },\n          });\n          this.dispatchEvent(event);\n        }\n      });\n    }\n\n    if (\n      changed.effect ||\n      changed.effectPhase ||\n      changed.enableEffects ||\n      changed.rightToLeft ||\n      changed.items ||\n      changed.currentIndex ||\n      changed.swipeFraction ||\n      changed.transitionDuration\n    ) {\n      // Apply opacity based on selection state.\n      const {\n        effect,\n        effectPhase,\n        enableEffects,\n        items,\n        rightToLeft,\n        currentIndex,\n        swipeFraction,\n      } = this[state];\n      if (items && effect === \"select\") {\n        if (enableEffects && effectPhase === \"before\") {\n          // Prepare to animate.\n          // Make all items visible, and the newly-selected one transparent.\n          items.forEach((item, index) => {\n            if (index === currentIndex && item.style.opacity === \"\") {\n              item.style.opacity = \"0\";\n            }\n            item.style.visibility = \"visible\";\n          });\n        } else if (\n          (enableEffects && effectPhase === \"during\") ||\n          swipeFraction != null\n        ) {\n          // Start the animation or, if we're swiping, show the effective frame\n          // of that animation represented by the current swipe position.\n          const sign = rightToLeft ? 1 : -1;\n          const selectionFraction = sign * (swipeFraction || 0);\n          items.forEach((item, index) => {\n            const opacity = opacityForItemWithIndex(\n              index,\n              currentIndex,\n              selectionFraction\n            );\n            item.style.opacity = opacity.toString();\n            if (opacity > 0) {\n              item.style.visibility = \"visible\";\n            }\n          });\n        } else if (effectPhase === \"after\" || swipeFraction == null) {\n          // Finished animating (or finish a swipe).\n          // Hide all items but the selected one.\n          items.forEach((item, index) => {\n            const selected = index === currentIndex;\n            item.style.opacity = selected ? \"1\" : \"\";\n            item.style.visibility = selected ? \"visible\" : \"\";\n          });\n        }\n      }\n    }\n\n    if (\n      changed.enableEffects ||\n      changed.items ||\n      changed.swipeFraction ||\n      changed.transitionDuration\n    ) {\n      // Apply opacity transition.\n      const { enableEffects, items, swipeFraction, transitionDuration } = this[\n        state\n      ];\n      const transition =\n        enableEffects && swipeFraction == null\n          ? `opacity ${transitionDuration / 1000}s linear`\n          : \"\";\n      if (items) {\n        items.forEach((item) => {\n          item.style.transition = transition;\n        });\n      }\n    }\n  }\n\n  get swipeFraction() {\n    return this[state].swipeFraction;\n  }\n  set swipeFraction(swipeFraction) {\n    this[setState]({ swipeFraction });\n  }\n\n  [stateEffects](state, changed) {\n    const effects = super[stateEffects](state, changed);\n\n    // When selection changes, (re)start the selection effect.\n    if (changed.currentIndex) {\n      const effectPhase =\n        state.enableEffects &&\n        state.currentIndex >= 0 &&\n        state.effectPhase !== \"before\"\n          ? \"before\"\n          : \"after\";\n      // We'll watch the selected item to see when its `transitionend` event\n      // fires; that will signal the end of the effect.\n      const effectEndTarget =\n        state.items && state.items[state.currentIndex]\n          ? state.items[state.currentIndex]\n          : null;\n      Object.assign(effects, {\n        effectEndTarget,\n        effectPhase,\n      });\n    }\n\n    return effects;\n  }\n\n  get transitionDuration() {\n    return this[state].transitionDuration;\n  }\n  set transitionDuration(transitionDuration) {\n    this[setState]({ transitionDuration });\n  }\n\n  get [template]() {\n    return templateFrom.html`\n      <style>\n        :host {\n          display: inline-flex;\n        }\n\n        #crossfadeContainer {\n          display: inline-grid;\n          flex: 1;\n          position: relative;\n        }\n\n        ::slotted(*) {\n          grid-column: 1;\n          grid-row: 1;\n          opacity: 0;\n          visibility: hidden;\n        }\n      </style>\n      <div id=\"crossfadeContainer\">\n        <slot></slot>\n      </div>\n    `;\n  }\n}\n\n/**\n * @private\n * @param {number} index\n * @param {number} currentIndex\n * @param {number} selectionFraction\n */\nfunction opacityForItemWithIndex(index, currentIndex, selectionFraction) {\n  const opacityMinimum = 0;\n  const opacityMaximum = 1;\n  const opacityRange = opacityMaximum - opacityMinimum;\n  const fractionalIndex = currentIndex + selectionFraction;\n  const leftIndex = Math.floor(fractionalIndex);\n  const rightIndex = Math.ceil(fractionalIndex);\n  let awayIndex = selectionFraction >= 0 ? leftIndex : rightIndex;\n  let towardIndex = selectionFraction >= 0 ? rightIndex : leftIndex;\n  const truncatedSwipeFraction =\n    selectionFraction < 0\n      ? Math.ceil(selectionFraction)\n      : Math.floor(selectionFraction);\n  const progress = selectionFraction - truncatedSwipeFraction;\n  const opacityProgressThroughRange = Math.abs(progress) * opacityRange;\n\n  let opacity;\n  if (index === awayIndex) {\n    opacity = opacityMaximum - opacityProgressThroughRange;\n  } else if (index === towardIndex) {\n    opacity = opacityMinimum + opacityProgressThroughRange;\n  } else {\n    opacity = opacityMinimum;\n  }\n\n  return opacity;\n}\n\nexport default CrossfadeStage;\n","import { booleanAttributeValue } from \"../core/AttributeMarshallingMixin.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\"; // eslint-disable-line no-unused-vars\nimport { defaultState, goNext, rendered, setState, state } from \"./internal.js\";\n\n/**\n * Automatically advances an item cursor on a timer\n *\n * [SlideshowWithPlayControls uses TimerCursorMixin for its timer](/demos/slideshowWithPlayControls.html)\n *\n * If the user moves the cursor, or the cursor moves for any other reason, the\n * timer resets. This ensures the user has a chance to look at the item they\n * want before the timer advances the cursor.\n *\n * @module TimerCursorMixin\n * @param {Constructor<ReactiveElement>} Base\n */\nexport default function TimerCursorMixin(Base) {\n  // The class prototype added by the mixin.\n  class TimerCursor extends Base {\n    attributeChangedCallback(name, oldValue, newValue) {\n      if (name === \"cursor-timer-duration\") {\n        this.cursorTimerDuration = Number(newValue);\n      } else if (name === \"playing\") {\n        const value = booleanAttributeValue(name, newValue);\n        if (this.playing !== value) {\n          this.playing = value;\n        }\n      } else {\n        super.attributeChangedCallback(name, oldValue, newValue);\n      }\n    }\n\n    /**\n     * The time in milliseconds that will elapse after the cursor advances\n     * before the cursor will be advanced to the next item in the list.\n     *\n     * @type {number} - Time in milliseconds\n     * @default 1000 (1 second)\n     */\n    get cursorTimerDuration() {\n      return this[state].cursorTimerDuration;\n    }\n    set cursorTimerDuration(cursorTimerDuration) {\n      if (!isNaN(cursorTimerDuration)) {\n        this[setState]({ cursorTimerDuration });\n      }\n    }\n\n    // @ts-ignore\n    get [defaultState]() {\n      return Object.assign(super[defaultState] || {}, {\n        currentIndexForTimer: null,\n        cursorTimerDuration: 1000,\n        playing: true,\n        timerTimeout: null,\n      });\n    }\n\n    /**\n     * Begin automatic progression of the cursor.\n     */\n    play() {\n      if (!this.playing) {\n        this[goNext]();\n        this[setState]({\n          playing: true,\n        });\n      }\n    }\n\n    /**\n     * Pause automatic progression of the cursor.\n     */\n    pause() {\n      this[setState]({\n        playing: false,\n      });\n    }\n\n    /**\n     * True if the element is playing.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get playing() {\n      return this[state].playing;\n    }\n    set playing(playing) {\n      if (playing !== this[state].playing) {\n        if (playing) {\n          this.play();\n        } else {\n          this.pause();\n        }\n      }\n    }\n\n    [rendered](/** @type {ChangedFlags} */ changed) {\n      if (super[rendered]) {\n        super[rendered](changed);\n      }\n\n      updateTimer(this);\n    }\n  }\n\n  return TimerCursor;\n}\n\nfunction clearTimer(/** @type {ReactiveElement} */ element) {\n  if (element[state].timerTimeout) {\n    clearTimeout(element[state].timerTimeout);\n    element[setState]({\n      timerTimeout: null,\n    });\n  }\n}\n\nfunction restartTimer(/** @type {ReactiveElement} */ element) {\n  if (element[state].timerTimeout) {\n    clearTimeout(element[state].timerTimeout);\n  }\n  if (element.items && element.items.length > 0) {\n    // When the timer times out, all we need to do is move to the next slide.\n    // When the component updates, the updateTimer function will notice the\n    // cursor has moved, and invoke restartTimer again to start a new timer\n    // for the next slide.\n    const timerTimeout = setTimeout(() => {\n      element[goNext]();\n    }, element.cursorTimerDuration);\n\n    // Set the timer as state, also noting which slide we're currently on.\n    element[setState]({\n      currentIndexForTimer: element[state].currentIndex,\n      timerTimeout,\n    });\n  }\n}\n\n// Update the timer to match the element's `playing` state.\nfunction updateTimer(/** @type {ReactiveElement} */ element) {\n  // If the element is playing and we haven't started a timer yet, do so now.\n  // Also, if the element's currentIndex changed for any reason, restart the\n  // timer. This ensures that the timer restarts no matter why the cursor moves:\n  // it could have been us moving to the next slide because the timer elapsed,\n  // or the user might have directly moved the cursor, etc.\n  if (\n    element[state].playing &&\n    (!element[state].timerTimeout ||\n      element[state].currentIndex !== element[state].currentIndexForTimer)\n  ) {\n    restartTimer(element);\n  } else if (!element[state].playing && element[state].timerTimeout) {\n    clearTimer(element);\n  }\n}\n","import Carousel from \"./Carousel.js\";\nimport CrossfadeStage from \"./CrossfadeStage.js\";\nimport { defaultState, ids, render, setState, state } from \"./internal.js\";\nimport TimerCursorMixin from \"./TimerCursorMixin.js\";\n\nconst Base = TimerCursorMixin(Carousel);\n\n/**\n * Slideshow with carousel controls\n *\n * [Carousel controls let the user directly access a specific page](/demos/carouselSlideshow.html)\n *\n * For a variation that offers next/previous buttons and a pause/resume button,\n * see [SlideshowWithPlayControls](SlideshowWithPlayControls). For a more basic\n * variation with no controls, see [Slideshow](Slideshow).\n *\n * @inherits Carousel\n * @mixes TimerCursorMixin\n * @part {CrossfadeStage} stage\n */\nclass CarouselSlideshow extends Base {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      cursorOperationsWrap: true,\n      cursorTimerDuration: 3000,\n      playing: true,\n      stagePartType: CrossfadeStage,\n      transitionDuration: 1000,\n    });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n    if (changed.transitionDuration) {\n      const { transitionDuration } = this[state];\n      if (\"transitionDuration\" in this[ids].proxyList) {\n        /** @type {any} */ (this[ids]\n          .proxyList).transitionDuration = transitionDuration;\n      }\n      if (\"transitionDuration\" in this[ids].stage) {\n        /** @type {any} */ (this[ids]\n          .stage).transitionDuration = transitionDuration;\n      }\n    }\n  }\n  get transitionDuration() {\n    return this[state].transitionDuration;\n  }\n  set transitionDuration(transitionDuration) {\n    this[setState]({ transitionDuration });\n  }\n}\n\nexport default CarouselSlideshow;\n","import CarouselSlideshow from \"../base/CarouselSlideshow.js\";\nimport DarkModeMixin from \"../base/DarkModeMixin.js\";\nimport { defaultState } from \"../base/internal.js\";\nimport PlainArrowDirectionMixin from \"./PlainArrowDirectionMixin.js\";\nimport PlainCarouselMixin from \"./PlainCarouselMixin.js\";\nimport PlainPageDot from \"./PlainPageDot.js\";\n\n/**\n * CarouselSlideshow component in the Plain reference design system\n *\n * @inherits CarouselSlideshow\n * @mixes DarkModeMixin\n * @mixes PlainArrowDirectionMixin\n * @mixes PlainCarouselMixin\n * @part {PlainPageDot} proxy\n */\nclass PlainCarouselSlideshow extends DarkModeMixin(\n  PlainArrowDirectionMixin(PlainCarouselMixin(CarouselSlideshow))\n) {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      proxyPartType: PlainPageDot,\n    });\n  }\n}\n\nexport default PlainCarouselSlideshow;\n","import Carousel from \"./Carousel.js\";\nimport { defaultState, render, state } from \"./internal.js\";\n\n/**\n * Carousel showing a thumbnail for each image\n *\n * @inherits Carousel\n * @part {img} proxy\n */\nclass CarouselWithThumbnails extends Carousel {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      proxyListOverlap: false,\n      proxyPartType: \"img\",\n    });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n    /** @type {Element[]} */ const proxies = this[state].proxies;\n    if ((changed.items || changed.proxies) && proxies) {\n      // Update thumbnails.\n      const { items } = this[state];\n      proxies.forEach((proxy, index) => {\n        /** @type {any} */ const item = items[index];\n        /** @type {any} */ const cast = proxy;\n        if (item && typeof item.src === \"string\" && \"src\" in cast) {\n          cast.src = item.src;\n        }\n      });\n    }\n  }\n}\n\nexport default CarouselWithThumbnails;\n","import CarouselWithThumbnails from \"../base/CarouselWithThumbnails.js\";\nimport DarkModeMixin from \"../base/DarkModeMixin.js\";\nimport { defaultState, template } from \"../base/internal.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport PlainArrowDirectionButton from \"./PlainArrowDirectionButton.js\";\nimport PlainArrowDirectionMixin from \"./PlainArrowDirectionMixin.js\";\nimport PlainCarouselMixin from \"./PlainCarouselMixin.js\";\n\n/**\n * CarouselWithThumbnails component in the Plain reference design system\n *\n * @inherits CarouselWithThumbnails\n * @mixes DarkModeMixin\n * @mixes PlainArrowDirectionMixin\n * @mixes PlainCarouselMixin\n * @part {PlainArrowDirectionButton} arrow-button\n * @part {PlainCenteredStripOpacity} proxy-list\n */\nclass PlainCarouselWithThumbnails extends DarkModeMixin(\n  PlainArrowDirectionMixin(PlainCarouselMixin(CarouselWithThumbnails))\n) {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      arrowButtonPartType: PlainArrowDirectionButton,\n    });\n  }\n\n  get [template]() {\n    const result = super[template];\n\n    result.content.append(\n      fragmentFrom.html`\n        <style>\n          [part~=\"proxy\"] {\n            height: var(--elix-thumbnail-height, 4em);\n            width: var(--elix-thumbnail-width, 6em);\n            object-fit: contain;\n          }\n        </style>\n      `\n    );\n\n    return result;\n  }\n}\n\nexport default PlainCarouselWithThumbnails;\n","import CenteredStrip from \"../base/CenteredStrip.js\";\nimport { template } from \"../base/internal.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\n\n/**\n * Centered strip showing selected item with a highlight color\n *\n * [`CenteredStripHighlight` uses a system highlight, much like `ListBox`](/demos/centeredStripHighlight.html)\n *\n * For a variation that uses opacity instead of a highlight color, see\n * [CenteredStripOpacity](CenteredStripOpacity).\n *\n * @inherits CenteredStrip\n */\nclass PlainCenteredStripHighlight extends CenteredStrip {\n  get [template]() {\n    const result = super[template];\n    result.content.append(\n      fragmentFrom.html`\n        <style>\n          ::slotted(*) {\n            padding: 0.25em;\n          }\n\n          ::slotted([selected]) {\n            background: highlight;\n            color: highlighttext;\n          }\n        </style>\n      `\n    );\n    return result;\n  }\n}\n\nexport default PlainCenteredStripHighlight;\n","import { templateFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\";\nimport {\n  firstRender,\n  ids,\n  raiseChangeEvents,\n  render,\n  setState,\n  state,\n  template,\n} from \"./internal.js\";\nimport SelectableMixin from \"./SelectableMixin.js\";\n\n/**\n * A checkable item in a list.\n *\n * This component is designed to be used as a child inside a multi-select\n * list component like [MultiSelectListBox](MultiSelectListBox).\n *\n * @inherits ReactiveElement\n * @mixes SelectableMixin\n */\nclass CheckListItem extends SelectableMixin(ReactiveElement) {\n  [render](changed) {\n    super[render](changed);\n\n    if (this[firstRender]) {\n      // Prevent checkbox from getting focus.\n      this[ids].checkbox.addEventListener(\"keydown\", (event) => {\n        event.preventDefault();\n      });\n      this[ids].checkbox.addEventListener(\"mousedown\", (event) => {\n        event.preventDefault();\n      });\n\n      // Checking the box toggles the selected state.\n      this[ids].checkbox.addEventListener(\"change\", () => {\n        this[raiseChangeEvents] = true;\n        /** @type {any} */ const checkbox = this[ids].checkbox;\n        const selected = checkbox.checked;\n        this[setState]({ selected });\n        this[raiseChangeEvents] = false;\n      });\n    }\n\n    // Render selected state as checked.\n    if (changed.selected) {\n      const { selected } = this[state];\n      /** @type {any} */ const checkbox = this[ids].checkbox;\n      checkbox.checked = selected;\n    }\n  }\n\n  get [template]() {\n    return templateFrom.html`\n      <style>\n        :host {\n          display: grid;\n          grid-template-columns: auto 1fr;\n        }\n      </style>\n      <input id=\"checkbox\" type=\"checkbox\" role=\"none\" tabindex=\"-1\" />\n      <slot></slot>\n    `;\n  }\n}\n\nexport default CheckListItem;\n","import CheckListItem from \"../base/CheckListItem.js\";\nimport { template } from \"../base/internal.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\n\n/**\n * CheckListItem component in the Plain reference design system\n */\nclass PlainCheckListItem extends CheckListItem {\n  get [template]() {\n    const result = super[template];\n    result.content.append(fragmentFrom.html`\n      <style>\n        :host {\n          grid-gap: 0.25em;\n        }\n      </style>\n    `);\n    return result;\n  }\n}\n\nexport default PlainCheckListItem;\n","import ComboBox from \"../base/ComboBox.js\";\nimport PlainComboBoxMixin from \"./PlainComboBoxMixin.js\";\n\n/**\n * ComboBox component in the Plain reference design system.\n *\n * @inherits ComboBox\n * @mixes PlainComboBoxMixin\n */\nclass PlainComboBox extends PlainComboBoxMixin(ComboBox) {}\n\nexport default PlainComboBox;\n","import { indexOfItemContainingTarget } from \"../core/dom.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport { transmute } from \"../core/template.js\";\nimport Button from \"./Button.js\";\nimport * as calendar from \"./calendar.js\";\nimport CalendarElementMixin from \"./CalendarElementMixin.js\";\nimport CalendarMonthNavigator from \"./CalendarMonthNavigator.js\";\nimport ComboBox from \"./ComboBox.js\";\nimport {\n  defaultState,\n  goDown,\n  goLeft,\n  goRight,\n  goUp,\n  ids,\n  keydown,\n  raiseChangeEvents,\n  render,\n  setState,\n  shadowRoot,\n  state,\n  stateEffects,\n  template,\n} from \"./internal.js\";\n\nconst Base = CalendarElementMixin(ComboBox);\n\n/**\n * Combo box that lets the user type a date or pick one from a popup calendar\n *\n * @inherits ComboBox\n * @mixes CalendarElementMixin\n * @part {CalendarMonthNavigator} calendar - the calendar showing dates to choose from\n * @part {div} calendar-container - container for the calendar\n * @part day - any of the day elements in the month grid\n * @part day-names-header - the column header showing the names of the days\n * @part month-days - the grid of days for the month\n * @part month-hear-header - the calendar header showing the month and/or year\n * @part {Button} today-button - the button that will navigate to today in the calendar\n */\nclass DateComboBox extends Base {\n  get calendar() {\n    return this[shadowRoot] ? this[ids].calendar : null;\n  }\n\n  /**\n   * The class or tag used to create the `calendar` part - the\n   * element showing a calendar with selectable days.\n   *\n   * @type {PartDescriptor}\n   * @default CalendarMonthNavigator\n   */\n  get calendarPartType() {\n    return this[state].calendarPartType;\n  }\n  set calendarPartType(calendarPartType) {\n    this[setState]({ calendarPartType });\n  }\n\n  get dateTimeFormatOptions() {\n    return this[state].dateTimeFormatOptions;\n  }\n  set dateTimeFormatOptions(dateTimeFormatOptions) {\n    this[setState]({ dateTimeFormatOptions });\n  }\n\n  // @ts-ignore\n  get date() {\n    return super.date;\n  }\n  set date(date) {\n    super.date = date;\n    this[setState]({\n      datePriority: true,\n    });\n  }\n\n  /**\n   * The class or tag used to create the `day` parts – the set of\n   * days shown in the calendar grid.\n   *\n   * @type {PartDescriptor}\n   * @default CalendarDay\n   */\n  get dayPartType() {\n    return this[state].dayPartType;\n  }\n  set dayPartType(dayPartType) {\n    this[setState]({ dayPartType });\n  }\n\n  /**\n   * The format used to render the day names in the week days header.\n   *\n   * The allowable formats are the same as the `weekday` formats in\n   * [Intl.DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat).\n   *\n   * @type {('long'|'narrow'|'short')}\n   * @default 'short'\n   */\n  get daysOfWeekFormat() {\n    return this[state].daysOfWeekFormat;\n  }\n  set daysOfWeekFormat(daysOfWeekFormat) {\n    this[setState]({ daysOfWeekFormat });\n  }\n\n  // @ts-ignore\n  get [defaultState]() {\n    const dateTimeFormatOptions = {\n      day: \"numeric\",\n      month: \"numeric\",\n      year: \"numeric\",\n    };\n\n    return Object.assign(super[defaultState], {\n      calendarPartType: CalendarMonthNavigator,\n      date: null,\n      datePriority: false,\n      dateSelected: false,\n      dateTimeFormat: null,\n      dateTimeFormatOptions,\n      daysOfWeekFormat: \"short\",\n      monthFormat: \"long\",\n      timeBias: null,\n      todayButtonPartType: Button,\n      yearFormat: \"numeric\",\n    });\n  }\n\n  /**\n   * Format the given date as text.\n   *\n   * @private\n   * @param {Date} date\n   * @param {Intl.DateTimeFormat} dateTimeFormat\n   */\n  formatDate(date, dateTimeFormat) {\n    return dateTimeFormat.format(date);\n  }\n\n  [goDown]() {\n    if (super[goDown]) {\n      super[goDown]();\n    }\n    const date = this[state].date || new Date();\n    this[setState]({\n      date: calendar.offsetDateByDays(date, 7),\n    });\n    return true;\n  }\n\n  [goLeft]() {\n    if (super[goLeft]) {\n      super[goLeft]();\n    }\n    const date = this[state].date || new Date();\n    this[setState]({\n      date: calendar.offsetDateByDays(date, -1),\n    });\n    return true;\n  }\n\n  [goRight]() {\n    if (super[goRight]) {\n      super[goRight]();\n    }\n    const date = this[state].date || new Date();\n    this[setState]({\n      date: calendar.offsetDateByDays(date, 1),\n    });\n    return true;\n  }\n\n  [goUp]() {\n    if (super[goUp]) {\n      super[goUp]();\n    }\n    const date = this[state].date || new Date();\n    this[setState]({\n      date: calendar.offsetDateByDays(date, -7),\n    });\n    return true;\n  }\n\n  [keydown](/** @type {KeyboardEvent} */ event) {\n    let handled = false;\n\n    const opened = this.opened;\n    const date = this[state].date || calendar.today();\n\n    switch (event.key) {\n      case \"ArrowDown\":\n        if (opened && event.ctrlKey && event.shiftKey) {\n          handled = this[goDown]();\n        }\n        break;\n\n      case \"ArrowLeft\":\n        if (opened && event.ctrlKey && event.shiftKey) {\n          handled = this[goLeft]();\n        }\n        break;\n\n      case \"ArrowRight\":\n        if (opened && event.ctrlKey && event.shiftKey) {\n          handled = this[goRight]();\n        }\n        break;\n\n      case \"ArrowUp\":\n        if (opened && event.ctrlKey && event.shiftKey) {\n          handled = this[goUp]();\n        }\n        break;\n\n      // Enter closes popup.\n      case \"Enter\":\n        if (this.opened) {\n          this.close();\n          handled = true;\n        }\n        break;\n\n      case \"PageDown\":\n        if (opened) {\n          this[setState]({\n            date: calendar.offsetDateByMonths(date, 1),\n          });\n          handled = true;\n        }\n        break;\n\n      case \"PageUp\":\n        if (opened) {\n          this[setState]({\n            date: calendar.offsetDateByMonths(date, -1),\n          });\n          handled = true;\n        }\n        break;\n    }\n\n    // Prefer mixin result if it's defined, otherwise use base result.\n    return handled || (super[keydown] && super[keydown](event));\n  }\n\n  // @ts-ignore\n  get locale() {\n    return super.locale;\n  }\n  set locale(locale) {\n    // If external code sets the locale, it's impossible for that code to predict\n    // the effects on the value, so we'll need to raise change events.\n    const saveRaiseChangesEvents = this[raiseChangeEvents];\n    this[raiseChangeEvents] = true;\n    super.locale = locale;\n    this[raiseChangeEvents] = saveRaiseChangesEvents;\n  }\n\n  /**\n   * The format used to render the month name.\n   *\n   * The allowable formats are the same as the `month` formats in\n   * [Intl.DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat).\n   *\n   * @type {('numeric'|'2-digit'|'long'|'short'|'narrow')}\n   * @default 'long'\n   */\n  get monthFormat() {\n    return this[state].monthFormat;\n  }\n  set monthFormat(monthFormat) {\n    this[setState]({ monthFormat });\n  }\n\n  /**\n   * Parse the given text as a Date.\n   *\n   * @private\n   * @param {string} text\n   * @param {Intl.DateTimeFormat} dateTimeFormat\n   * @param {'future'|'past'} timeBias\n   */\n  parseDate(text, dateTimeFormat, timeBias) {\n    return calendar.parseWithOptionalYear(text, dateTimeFormat, timeBias);\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n\n    renderParts(this[shadowRoot], this[state], changed);\n\n    if (changed.calendarPartType) {\n      /** @type {any} */ const calendar = this[ids].calendar;\n      calendar.addEventListener(\"datechange\", (event) => {\n        this[raiseChangeEvents] = true;\n        /** @type {any} */\n        const cast = event;\n        this.date = cast.detail.date;\n        this[raiseChangeEvents] = false;\n      });\n\n      calendar.addEventListener(\"mousedown\", (event) => {\n        // Only process events for the main (usually left) button.\n        if (/** @type {MouseEvent} */ (event).button !== 0) {\n          return;\n        }\n        this[raiseChangeEvents] = true;\n        this.close();\n        event.preventDefault(); // Keep focus on input.\n        this[raiseChangeEvents] = false;\n      });\n\n      // If the user drag-selects into the calendar and mouses up over a day,\n      // select that date close.\n      calendar.addEventListener(\"mouseup\", async (event) => {\n        const target = event.composedPath()[0];\n        if (this[state].dragSelect && target instanceof Node) {\n          // Determine which day element the event occurred in.\n          const days = calendar.days;\n          const index = indexOfItemContainingTarget(days, target);\n          /** @type {any} */\n          const day = days[index];\n          if (day) {\n            event.stopPropagation();\n            this[raiseChangeEvents] = true;\n            this.date = day.date;\n            this.close();\n            this[raiseChangeEvents] = false;\n          }\n        }\n      });\n    }\n    if (changed.todayButtonPartType) {\n      this[ids].todayButton.addEventListener(\"mousedown\", (event) => {\n        // Only process events for the main (usually left) button.\n        if (/** @type {MouseEvent} */ (event).button !== 0) {\n          return;\n        }\n        this[raiseChangeEvents] = true;\n        this.date = calendar.today();\n        this.close();\n        event.preventDefault(); // Keep focus on input.\n        this[raiseChangeEvents] = false;\n      });\n    }\n    const cast = /** @type {any} */ (this[ids].calendar);\n    if (changed.date || changed.calendarPartType) {\n      cast.date = this[state].date;\n    }\n    if (\n      (changed.daysOfWeekFormat || changed.calendarPartType) &&\n      \"daysOfWeekFormat\" in cast\n    ) {\n      cast.daysOfWeekFormat = this[state].daysOfWeekFormat;\n    }\n    if (changed.locale || changed.calendarPartType) {\n      cast.locale = this[state].locale;\n    }\n    if (\n      (changed.monthFormat || changed.calendarPartType) &&\n      \"monthFormat\" in cast\n    ) {\n      cast.monthFormat = this[state].monthFormat;\n    }\n    if (\n      (changed.yearFormat || changed.calendarPartType) &&\n      \"yearFormat\" in cast\n    ) {\n      cast.yearFormat = this[state].yearFormat;\n    }\n  }\n\n  [stateEffects](state, changed) {\n    const effects = super[stateEffects](state, changed);\n\n    // If the date changed while focused, assume user changed date.\n    if (changed.date || changed.value) {\n      if (state.focused) {\n        Object.assign(effects, { userChangedDate: true });\n      }\n    }\n\n    // Update value from date if:\n    // the date was changed from the outside,\n    // we're closing or losing focus and the user's changed the date,\n    // or the format changed and the date was the last substantive property set.\n    if (\n      changed.date ||\n      changed.dateTimeFormat ||\n      changed.focused ||\n      changed.opened\n    ) {\n      const {\n        closeResult,\n        date,\n        datePriority,\n        dateTimeFormat,\n        focused,\n        opened,\n        userChangedDate,\n      } = state;\n      const closing = changed.opened && !opened;\n      const canceled = closeResult && closeResult.canceled;\n      const blur = changed.focused && !focused;\n      if (\n        (changed.date && !focused) ||\n        (blur && userChangedDate) ||\n        (closing && userChangedDate && !canceled) ||\n        (changed.dateTimeFormat && datePriority)\n      ) {\n        const formattedDate =\n          date && dateTimeFormat ? this.formatDate(date, dateTimeFormat) : \"\";\n        // See notes on mobile at ComboBox.defaultState.\n        const probablyMobile = matchMedia(\"(pointer: coarse)\").matches;\n        const selectText = formattedDate.length > 0 && !probablyMobile;\n        Object.assign(effects, {\n          selectText,\n          value: formattedDate,\n        });\n      }\n    }\n\n    // Update date from value if the value was changed, or the date format or\n    // time bias changed and the value was the last substantive property set.\n    if (changed.dateTimeFormat || changed.timeBias || changed.value) {\n      const { datePriority, dateTimeFormat, timeBias, value } = state;\n      if (\n        dateTimeFormat &&\n        (changed.value ||\n          (!datePriority && (changed.dateTimeFormat || changed.timeBias)))\n      ) {\n        const parsedDate = this.parseDate(value, dateTimeFormat, timeBias);\n        if (parsedDate) {\n          Object.assign(effects, {\n            date: parsedDate,\n          });\n        }\n      }\n    }\n\n    // Update our date format if the locale or format options change.\n    if (changed.dateTimeFormatOptions || changed.locale) {\n      const { dateTimeFormatOptions, locale } = state;\n      const dateTimeFormat = calendar.dateTimeFormat(\n        locale,\n        dateTimeFormatOptions\n      );\n      Object.assign(effects, { dateTimeFormat });\n    }\n\n    return effects;\n  }\n\n  get [template]() {\n    const result = super[template];\n\n    // Replace default slot with calendar.\n    const defaultSlot = result.content.querySelector(\"slot:not([name])\");\n    if (defaultSlot) {\n      defaultSlot.replaceWith(fragmentFrom.html`\n        <style>\n          [part~=\"calendar-container\"] {\n            display: flex;\n            flex-direction: column;\n          }\n        </style>\n        <div part=\"calendar-container\">\n          <div\n            id=\"calendar\"\n            part=\"calendar\"\n            exportparts=\"day, day-names-header, month-days, month-hear-header\"\n            tabindex=\"-1\"\n          ></div>\n          <div id=\"todayButton\" part=\"today-button\">Today</div>\n        </div>\n      `);\n    }\n\n    renderParts(result.content, this[state]);\n\n    return result;\n  }\n\n  /**\n   * If set, this indicates whether a date containing only a month and day\n   * should infer a year such that the time is in the future or in the past.\n   *\n   * Example: the current date is July 1, the locale is \"en-US\", and the\n   * supplied value is \"9/1\" (September 1 in the U.S.), then if `timeBias` is\n   * not set, the inferred year is the present year. If `timeBias` is set to\n   * \"past\", the date is taken to be a past date, so the inferred year will be\n   * the _previous_ year.\n   *\n   * @type {'future'|'past'|null}\n   * @default null\n   */\n  get timeBias() {\n    return this[state].timeBias;\n  }\n  set timeBias(timeBias) {\n    this[setState]({ timeBias });\n  }\n\n  /**\n   * The class or tag used to create the `today-button` part – the\n   * button that takes the user back to the current date.\n   *\n   * @type {PartDescriptor}\n   * @default Button\n   */\n  get todayButtonPartType() {\n    return this[state].todayButtonPartType;\n  }\n  set todayButtonPartType(todayButtonPartType) {\n    this[setState]({ todayButtonPartType });\n  }\n\n  // @ts-ignore\n  get value() {\n    return super.value;\n  }\n  set value(value) {\n    // If external code sets the value, it's impossible for that code to predict\n    // the effects on the date, so we'll need to raise change events.\n    const saveRaiseChangesEvents = this[raiseChangeEvents];\n    this[raiseChangeEvents] = true;\n    super.value = value;\n    this[setState]({\n      datePriority: false,\n    });\n    this[raiseChangeEvents] = saveRaiseChangesEvents;\n  }\n\n  /**\n   * The format used to render the year.\n   *\n   * The allowable formats are the same as the `year` formats in\n   * [Intl.DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat).\n   *\n   * @type {('numeric'|'2-digit')}\n   * @default 'numeric'\n   */\n  get yearFormat() {\n    return this[state].yearFormat;\n  }\n  set yearFormat(yearFormat) {\n    this[setState]({ yearFormat });\n  }\n}\n\n/**\n * Render parts for the template or an instance.\n *\n * @private\n * @param {DocumentFragment} root\n * @param {PlainObject} state\n * @param {ChangedFlags} [changed]\n */\nfunction renderParts(root, state, changed) {\n  if (!changed || changed.calendarPartType) {\n    const { calendarPartType } = state;\n    const calendar = root.getElementById(\"calendar\");\n    if (calendar) {\n      transmute(calendar, calendarPartType);\n    }\n  }\n  if (!changed || changed.todayButtonPartType) {\n    const { todayButtonPartType } = state;\n    const todayButton = root.getElementById(\"todayButton\");\n    if (todayButton) {\n      transmute(todayButton, todayButtonPartType);\n    }\n  }\n}\n\nexport default DateComboBox;\n","import DateComboBox from \"../base/DateComboBox.js\";\nimport { defaultState, template } from \"../base/internal.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport PlainButton from \"./PlainButton.js\";\nimport PlainCalendarMonthNavigator from \"./PlainCalendarMonthNavigator.js\";\nimport PlainComboBoxMixin from \"./PlainComboBoxMixin.js\";\n\n/**\n * DateComboBox component in the Plain reference design system\n *\n * @inherits DateComboBox\n * @part {PlainCalendarMonthNavigator} calendar\n * @part {PlainButton} today-button\n */\nclass PlainDateComboBox extends PlainComboBoxMixin(DateComboBox) {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      calendarPartType: PlainCalendarMonthNavigator,\n      todayButtonPartType: PlainButton,\n    });\n  }\n\n  get [template]() {\n    const result = super[template];\n    result.content.append(\n      fragmentFrom.html`\n        <style>\n          :host {\n            width: 8em;\n          }\n\n          [part~=\"calendar\"] {\n            margin: 0.5em;\n          }\n\n          [part~=\"today-button\"] {\n            border: 1px solid transparent;\n            box-sizing: border-box;\n            padding: 0.5em;\n          }\n\n          [part~=\"today-button\"]:hover {\n            border-color: gray;\n          }\n        </style>\n      `\n    );\n    return result;\n  }\n}\n\nexport default PlainDateComboBox;\n","import * as calendar from \"./calendar.js\";\nimport CalendarElementMixin from \"./CalendarElementMixin.js\";\nimport Input from \"./Input.js\";\nimport {\n  defaultState,\n  firstRender,\n  ids,\n  raiseChangeEvents,\n  render,\n  setState,\n  state,\n  stateEffects,\n} from \"./internal.js\";\n\nconst Base = CalendarElementMixin(Input);\n\n/**\n * Input element that can parse dates in locale-specific formats\n *\n * @inherits Input\n * @mixes CalendarElementMixin\n */\nclass DateInput extends Base {\n  // @ts-ignore\n  get date() {\n    return super.date;\n  }\n  set date(date) {\n    super.date = date;\n    this[setState]({\n      datePriority: true,\n    });\n  }\n\n  get dateTimeFormatOptions() {\n    return this[state].dateTimeFormatOptions;\n  }\n  set dateTimeFormatOptions(dateTimeFormatOptions) {\n    this[setState]({ dateTimeFormatOptions });\n  }\n\n  // @ts-ignore\n  get [defaultState]() {\n    const dateTimeFormatOptions = {\n      day: \"numeric\",\n      month: \"numeric\",\n      year: \"numeric\",\n    };\n    return Object.assign(super[defaultState], {\n      dateSelected: false,\n      dateTimeFormat: null,\n      dateTimeFormatOptions,\n      datePriority: false,\n      focused: false,\n      timeBias: null,\n    });\n  }\n\n  /**\n   * Format the given date as text.\n   *\n   * @private\n   * @param {Date} date\n   * @param {Intl.DateTimeFormat} dateTimeFormat\n   */\n  formatDate(date, dateTimeFormat) {\n    return dateTimeFormat.format(date);\n  }\n\n  // @ts-ignore\n  get locale() {\n    return super.locale;\n  }\n  set locale(locale) {\n    // If external code sets the locale, it's impossible for that code to predict\n    // the effects on the value, so we'll need to raise change events.\n    const saveRaiseChangesEvents = this[raiseChangeEvents];\n    this[raiseChangeEvents] = true;\n    super.locale = locale;\n    this[raiseChangeEvents] = saveRaiseChangesEvents;\n  }\n\n  /**\n   * Parse the given text as a Date.\n   *\n   * @private\n   * @param {string} text\n   * @param {Intl.DateTimeFormat} dateTimeFormat\n   * @param {'future'|'past'} timeBias\n   */\n  parseDate(text, dateTimeFormat, timeBias) {\n    return calendar.parseWithOptionalYear(text, dateTimeFormat, timeBias);\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n\n    if (this[firstRender]) {\n      this[ids].inner.addEventListener(\"blur\", () => {\n        this[raiseChangeEvents] = true;\n        this[setState]({\n          focused: false,\n        });\n        this[raiseChangeEvents] = false;\n      });\n      this[ids].inner.addEventListener(\"focus\", () => {\n        this[raiseChangeEvents] = true;\n        this[setState]({\n          focused: true,\n        });\n        this[raiseChangeEvents] = false;\n      });\n    }\n  }\n\n  [stateEffects](state, changed) {\n    const effects = super[stateEffects](state, changed);\n\n    // If the date changed while focused, assume user changed date.\n    if (changed.date && state.focused) {\n      Object.assign(effects, {\n        userChangedDate: true,\n      });\n    }\n\n    // Update value from date if:\n    // the date was changed from the outside,\n    // we're closing or losing focus and the user's changed the date,\n    // or the format changed and the date was the last substantive property set.\n    if (changed.date || changed.dateTimeFormat || changed.focused) {\n      const {\n        date,\n        datePriority,\n        dateTimeFormat,\n        focused,\n        userChangedDate,\n      } = state;\n      const blur = changed.focused && !focused;\n      if (\n        (changed.date && !focused) ||\n        (blur && userChangedDate) ||\n        (changed.dateTimeFormat && datePriority)\n      ) {\n        const formattedDate = date ? this.formatDate(date, dateTimeFormat) : \"\";\n        Object.assign(effects, {\n          selectText: formattedDate.length > 0,\n          value: formattedDate,\n        });\n      }\n    }\n\n    // Update date from value if the value was changed, or the date format or\n    // time bias changed and the value was the last substantive property set.\n    if (changed.dateTimeFormat || changed.timeBias || changed.value) {\n      const { datePriority, dateTimeFormat, timeBias, value } = state;\n      if (\n        dateTimeFormat &&\n        value &&\n        (changed.value ||\n          (!datePriority && (changed.dateTimeFormat || changed.timeBias)))\n      ) {\n        const parsedDate = this.parseDate(value, dateTimeFormat, timeBias);\n        if (parsedDate) {\n          Object.assign(effects, {\n            date: parsedDate,\n          });\n        }\n      }\n    }\n\n    // Update our time format if the locale or format options change.\n    if (changed.dateTimeFormatOptions || changed.locale) {\n      const { dateTimeFormatOptions, locale } = state;\n      const dateTimeFormat = calendar.dateTimeFormat(\n        locale,\n        dateTimeFormatOptions\n      );\n      Object.assign(effects, { dateTimeFormat });\n    }\n\n    return effects;\n  }\n\n  /**\n   * If set, this indicates whether a date containing only a month and day\n   * should infer a year such that the time is in the future or in the past.\n   *\n   * Example: the current date is July 1, the locale is \"en-US\", and the\n   * supplied value is \"9/1\" (September 1 in the U.S.), then if `timeBias` is\n   * not set, the inferred year is the present year. If `timeBias` is set to\n   * \"past\", the date is taken to be a past date, so the inferred year will be\n   * the _previous_ year.\n   *\n   * @type {'future'|'past'|null}\n   */\n  get timeBias() {\n    return this[state].timeBias;\n  }\n  set timeBias(timeBias) {\n    this[setState]({ timeBias });\n  }\n\n  // @ts-ignore\n  get value() {\n    return super.value;\n  }\n  set value(value) {\n    // If external code sets the value, it's impossible for that code to predict\n    // the effects on the date, so we'll need to raise change events.\n    const saveRaiseChangesEvents = this[raiseChangeEvents];\n    this[raiseChangeEvents] = true;\n    super.value = String(value);\n    this[setState]({\n      datePriority: false,\n    });\n    this[raiseChangeEvents] = saveRaiseChangesEvents;\n  }\n}\n\nexport default DateInput;\n","import DateInput from \"../base/DateInput.js\";\nimport { template } from \"../base/internal.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\n\n/**\n * DateInput component in the Plain reference design system\n *\n * @inherits DateInput\n */\nclass PlainDateInput extends DateInput {\n  get [template]() {\n    const result = super[template];\n    result.content.append(\n      fragmentFrom.html`\n        <style>\n          :host {\n            width: 6em;\n          }\n        </style>\n      `\n    );\n    return result;\n  }\n}\n\nexport default PlainDateInput;\n","import { setInternalState } from \"../core/dom.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport DialogModalityMixin from \"./DialogModalityMixin.js\";\nimport EffectMixin from \"./EffectMixin.js\";\nimport FocusCaptureMixin from \"./FocusCaptureMixin.js\";\nimport {\n  defaultState,\n  effectEndTarget,\n  ids,\n  raiseChangeEvents,\n  render,\n  rendered,\n  scrollTarget,\n  setState,\n  state,\n  stateEffects,\n  swipeDown,\n  swipeLeft,\n  swipeRight,\n  swipeTarget,\n  swipeUp,\n  template,\n} from \"./internal.js\";\nimport KeyboardMixin from \"./KeyboardMixin.js\";\nimport LanguageDirectionMixin from \"./LanguageDirectionMixin.js\";\nimport ModalBackdrop from \"./ModalBackdrop.js\";\nimport Overlay from \"./Overlay.js\";\nimport TouchSwipeMixin from \"./TouchSwipeMixin.js\";\nimport TrackpadSwipeMixin from \"./TrackpadSwipeMixin.js\";\nimport TransitionEffectMixin from \"./TransitionEffectMixin.js\";\n\nconst Base = DialogModalityMixin(\n  EffectMixin(\n    FocusCaptureMixin(\n      KeyboardMixin(\n        LanguageDirectionMixin(\n          TouchSwipeMixin(TrackpadSwipeMixin(TransitionEffectMixin(Overlay)))\n        )\n      )\n    )\n  )\n);\n\n/**\n * A panel that slides in from the side of the page\n *\n * A drawer is often used to provide navigation in situations where: a) screen\n * real estate is constrained and b) the navigation UI is not critical to\n * completing the user’s primary goal (and, hence, not critical to the\n * application’s business goal).\n *\n * @inherits Overlay\n * @mixes DialogModalityMixin\n * @mixes EffectMixin\n * @mixes FocusCaptureMixin\n * @mixes KeyboardMixin\n * @mixes LanguageDirectionMixin\n * @mixes TouchSwipeMixin\n * @mixes TrackpadSwipeMixin\n * @mixes TransitionEffectMixin\n */\nclass Drawer extends Base {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      backdropPartType: ModalBackdrop,\n      drawerTransitionDuration: 250, // milliseconds\n      fromEdge: \"start\",\n      gripSize: null,\n      openedFraction: 0,\n      openedRenderedFraction: 0,\n      persistent: true,\n      role: \"landmark\",\n      showTransition: false,\n      tabIndex: -1,\n    });\n  }\n\n  // @ts-ignore\n  get [effectEndTarget]() {\n    // As long as both the frame and the overlay complete their transition\n    // at the same time, we can use either one to signal the completion of\n    // the effect.\n    return this[ids].frame;\n  }\n\n  /**\n   * The edge from which the drawer will appear, in terms of the drawer's\n   * container.\n   *\n   * The `start` and `end` values refer to text direction: in left-to-right\n   * languages such as English, these are equivalent to `left` and `right`,\n   * respectively.\n   *\n   * @type {('end'|'left'|'right'|'start')}\n   * @default 'start'\n   */\n  get fromEdge() {\n    return this[state].fromEdge;\n  }\n  set fromEdge(fromEdge) {\n    this[setState]({ fromEdge });\n  }\n\n  get gripSize() {\n    return this[state].gripSize;\n  }\n  set gripSize(gripSize) {\n    this[setState]({ gripSize });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n\n    if (changed.backdropPartType) {\n      // Implicitly close on background clicks.\n      this[ids].backdrop.addEventListener(\"click\", async () => {\n        this[raiseChangeEvents] = true;\n        await this.close();\n        this[raiseChangeEvents] = false;\n      });\n    }\n\n    if (changed.gripSize || changed.opened || changed.swipeFraction) {\n      const { gripSize, opened, swipeFraction } = this[state];\n      const swiping = swipeFraction !== null;\n      const openedOrSwiping = opened || swiping;\n\n      // Only listen to pointer events if opened or swiping.\n      this.style.pointerEvents = openedOrSwiping ? \"initial\" : \"none\";\n\n      // Clip frame to its bounding box when drawer is completely closed. This\n      // prevents any box-shadow on the frame from being visible.\n      const hasGrip = gripSize !== null;\n      const clip = !hasGrip && !openedOrSwiping;\n      this[ids].frame.style.clipPath = clip ? \"inset(0px)\" : \"\";\n    }\n\n    // As the drawer opens (closes), slide the frame all the way out (in).\n    if (\n      changed.effect ||\n      changed.effectPhase ||\n      changed.fromEdge ||\n      changed.gripSize ||\n      changed.openedFraction ||\n      changed.rightToLeft ||\n      changed.swipeFraction\n    ) {\n      const {\n        drawerTransitionDuration,\n        effect,\n        effectPhase,\n        fromEdge,\n        gripSize,\n        openedFraction,\n        openedRenderedFraction,\n        rightToLeft,\n        showTransition,\n        swipeFraction,\n      } = this[state];\n\n      const fromLeadingEdge =\n        fromEdge === \"left\" ||\n        fromEdge === \"top\" ||\n        (fromEdge === \"start\" && !rightToLeft) ||\n        (fromEdge === \"end\" && rightToLeft);\n\n      const swiping = swipeFraction !== null;\n      const sign = fromLeadingEdge ? -1 : 1;\n\n      const translateFraction = sign * (1 - openedFraction);\n\n      if (swiping || (effect === \"open\" && effectPhase === \"before\")) {\n        // Beginning open effect or swiping; show backdrop.\n        this[ids].backdrop.style.visibility = \"visible\";\n      } else if (effect === \"close\" && effectPhase === \"after\") {\n        // Finished close effect; hide backdrop.\n        this[ids].backdrop.style.visibility = \"hidden\";\n      }\n\n      // The time required to show transitions depends on how far apart the\n      // elements currently are from their desired state.\n      const transitionFraction = Math.abs(\n        openedFraction - openedRenderedFraction\n      );\n\n      const duration = showTransition\n        ? transitionFraction * (drawerTransitionDuration / 1000)\n        : 0;\n\n      const vertical = fromEdge === \"top\" || fromEdge === \"bottom\";\n      const axis = vertical ? \"Y\" : \"X\";\n      const translatePercentage = `${translateFraction * 100}%`;\n      const gripValue = gripSize ? gripSize * -sign * (1 - openedFraction) : 0;\n      const translateValue =\n        gripValue === 0\n          ? translatePercentage\n          : `calc(${translatePercentage} + ${gripValue}px)`;\n      const transform = `translate${axis}(${translateValue})`;\n\n      Object.assign(this[ids].frame.style, {\n        transform,\n        transition: showTransition ? `transform ${duration}s` : \"\",\n      });\n    }\n\n    // Dock drawer to appropriate edge\n    if (changed.fromEdge || changed.rightToLeft) {\n      const { fromEdge, rightToLeft } = this[state];\n\n      // Stick drawer to all edges except the one opposite the fromEdge.\n      const edgeCoordinates = {\n        bottom: 0,\n        left: 0,\n        right: 0,\n        top: 0,\n      };\n      const mapFromEdgeToOppositeEdge = {\n        bottom: \"top\",\n        left: \"right\",\n        right: \"left\",\n        top: \"bottom\",\n      };\n      mapFromEdgeToOppositeEdge.start =\n        mapFromEdgeToOppositeEdge[rightToLeft ? \"right\" : \"left\"];\n      mapFromEdgeToOppositeEdge.end =\n        mapFromEdgeToOppositeEdge[rightToLeft ? \"left\" : \"right\"];\n      Object.assign(this.style, edgeCoordinates, {\n        [mapFromEdgeToOppositeEdge[fromEdge]]: null,\n      });\n\n      /** @type {IndexedObject<string>} */\n      const mapFromEdgetoJustifyContent = {\n        bottom: \"flex-end\",\n        end: \"flex-end\",\n        left: rightToLeft ? \"flex-end\" : \"flex-start\",\n        right: rightToLeft ? \"flex-start\" : \"flex-end\",\n        start: \"flex-start\",\n        top: \"flex-start\",\n      };\n\n      this.style.flexDirection =\n        fromEdge === \"top\" || fromEdge === \"bottom\" ? \"column\" : \"row\";\n      this.style.justifyContent = mapFromEdgetoJustifyContent[fromEdge];\n    }\n\n    // Reflect opened state to ARIA attribute.\n    if (changed.opened) {\n      this.setAttribute(\"aria-expanded\", this[state].opened.toString());\n    }\n  }\n\n  [rendered](/** @type {ChangedFlags} */ changed) {\n    super[rendered](changed);\n\n    if (changed.opened) {\n      // Reflect opened attribute.\n      setInternalState(this, \"opened\", this[state].opened);\n    }\n\n    if (changed.openedFraction) {\n      // Remember that we've rendered the drawer at this opened fraction.\n      this[setState]({\n        openedRenderedFraction: this[state].openedFraction,\n      });\n    }\n  }\n\n  [stateEffects](state, changed) {\n    const effects = super[stateEffects]\n      ? super[stateEffects](state, changed)\n      : {};\n\n    // Have swipeAxis follow fromEdge.\n    if (changed.fromEdge) {\n      const { fromEdge } = state;\n      const swipeAxis =\n        fromEdge === \"top\" || fromEdge === \"bottom\" ? \"vertical\" : \"horizontal\";\n      Object.assign(effects, { swipeAxis });\n    }\n\n    // During a swipe or open/close, update openedFraction state.\n    if (\n      changed.effect ||\n      changed.effectPhase ||\n      changed.fromEdge ||\n      changed.rightToLeft ||\n      changed.swipeFraction\n    ) {\n      const {\n        effect,\n        effectPhase,\n        fromEdge,\n        rightToLeft,\n        swipeFraction,\n      } = state;\n      const opened =\n        (effect === \"open\" && effectPhase !== \"before\") ||\n        (effect === \"close\" && effectPhase === \"before\");\n\n      const fromLeadingEdge =\n        fromEdge === \"left\" ||\n        fromEdge === \"top\" ||\n        (fromEdge === \"start\" && !rightToLeft) ||\n        (fromEdge === \"end\" && rightToLeft);\n\n      // Constrain the opened fraction to between 0 and a bit less than 1. A\n      // swipe distance of 1 itself would cause a tricky problem. The drawer\n      // would render itself completely off screen. This means the expected CSS\n      // transition would not occur, so the transitionend event wouldn't fire,\n      // leaving us waiting indefinitely for an event that will never come. By\n      // ensuring we always transition at least a tiny bit, we guarantee that a\n      // transition and its accompanying event will occur.\n      const almost1 = 0.999;\n\n      // Swipe bounds depend on whether drawer is current open or closed.\n      const expectPositiveSwipe =\n        (fromLeadingEdge && !opened) || (!fromLeadingEdge && opened);\n      const lowerBound = expectPositiveSwipe ? 0 : -almost1;\n      const upperBound = expectPositiveSwipe ? almost1 : 0;\n\n      const swiping = swipeFraction !== null;\n      const sign = fromLeadingEdge ? -1 : 1;\n      let openedFraction = opened ? 1 : 0;\n      if (swiping) {\n        const boundedSwipeFraction = Math.max(\n          Math.min(swipeFraction, upperBound),\n          lowerBound\n        );\n        openedFraction -= sign * boundedSwipeFraction;\n      }\n      Object.assign(effects, { openedFraction });\n    }\n\n    // Don't show transitions during swiping, as it would give the swipe a\n    // sluggish feel. We do show transitions during the open or close effect. In\n    // the case where a user begins to close a drawer, but doesn't close it more\n    // than halfway, we want to animate the transition back to the fully opened\n    // state. For that, we show transitions during the \"after\" effect phase.\n    if (\n      changed.enableEffects ||\n      changed.effect ||\n      changed.effectPhase ||\n      changed.swipeFraction\n    ) {\n      const { enableEffects, effect, effectPhase, swipeFraction } = state;\n      const swiping = swipeFraction !== null;\n      const showTransition =\n        enableEffects &&\n        !swiping &&\n        effect &&\n        (effectPhase === \"during\" || effectPhase === \"after\");\n      Object.assign(effects, { showTransition });\n    }\n\n    return effects;\n  }\n\n  async [swipeDown]() {\n    const { fromEdge } = this[state];\n    if (fromEdge === \"top\") {\n      open(this);\n    } else if (fromEdge === \"bottom\") {\n      close(this);\n    }\n  }\n\n  async [swipeLeft]() {\n    const { fromEdge, rightToLeft } = this[state];\n    const fromLeftEdge =\n      fromEdge === \"left\" ||\n      (fromEdge === \"start\" && !rightToLeft) ||\n      (fromEdge === \"end\" && rightToLeft);\n    const fromRightEdge =\n      fromEdge === \"right\" ||\n      (fromEdge === \"start\" && rightToLeft) ||\n      (fromEdge === \"end\" && !rightToLeft);\n    if (fromRightEdge) {\n      open(this);\n    } else if (fromLeftEdge) {\n      close(this);\n    }\n  }\n\n  async [swipeRight]() {\n    const { fromEdge, rightToLeft } = this[state];\n    const fromLeftEdge =\n      fromEdge === \"left\" ||\n      (fromEdge === \"start\" && !rightToLeft) ||\n      (fromEdge === \"end\" && rightToLeft);\n    const fromRightEdge =\n      fromEdge === \"right\" ||\n      (fromEdge === \"start\" && rightToLeft) ||\n      (fromEdge === \"end\" && !rightToLeft);\n    if (fromLeftEdge) {\n      open(this);\n    } else if (fromRightEdge) {\n      close(this);\n    }\n  }\n\n  async [swipeUp]() {\n    const { fromEdge } = this[state];\n    if (fromEdge === \"bottom\") {\n      open(this);\n    } else if (fromEdge === \"top\") {\n      close(this);\n    }\n  }\n\n  // Tell TrackpadSwipeMixin that the frame is the scrollable element the user\n  // is going to try to scroll with the trackpad.\n  get [scrollTarget]() {\n    return this[ids].frame;\n  }\n\n  // @ts-ignore\n  get [swipeTarget]() {\n    return /** @type {any} */ (this[ids].frame);\n  }\n\n  get [template]() {\n    const result = super[template];\n\n    // Wrap default slot with another container that traps focus.\n    const defaultSlot = result.content.querySelector(\"slot:not([name])\");\n    if (defaultSlot) {\n      defaultSlot.replaceWith(fragmentFrom.html`\n        <div id=\"frameContent\">\n          <slot></slot>\n        </div>\n      `);\n      const frameContent = result.content.querySelector(\"#frameContent\");\n      /** @type {any} */ const cast = this;\n      cast[FocusCaptureMixin.wrap](frameContent);\n    }\n\n    // We'd prefer to use inline-grid instead of inline-flex; see Dialog.js\n    result.content.append(\n      fragmentFrom.html`\n        <style>\n          :host {\n            align-items: stretch;\n            display: inline-flex;\n            flex-direction: column;\n            -webkit-overflow-scrolling: touch; /* for momentum scrolling */\n          }\n\n          #frameContent {\n            display: block;\n            height: 100%;\n            overflow: hidden;\n            width: 100%;\n          }\n\n          [part~=\"backdrop\"] {\n            will-change: opacity;\n          }\n\n          [part~=\"frame\"] {\n            overflow: auto;\n            will-change: transform;\n          }\n\n          :host([opened=\"false\"]) [part~=\"frame\"] {\n            overflow: hidden;\n          }\n        </style>\n      `\n    );\n\n    return result;\n  }\n}\n\nasync function close(/** @type {Drawer} */ element) {\n  element[setState]({\n    effect: \"close\",\n    effectPhase: \"during\",\n  });\n  await element.close();\n}\n\nasync function open(/** @type {Drawer} */ element) {\n  element[setState]({\n    effect: \"open\",\n    effectPhase: \"during\",\n  });\n  await element.open();\n}\n\nexport default Drawer;\n","import { ids, render, state } from \"../base/internal.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\"; // eslint-disable-line no-unused-vars\n\n/**\n * Drawer styles for the Plain reference design system\n *\n * @module PlainDrawerMixin\n * @param {Constructor<ReactiveElement>} Base\n */\nexport default function PlainDrawerMixin(Base) {\n  return class PlainDrawer extends Base {\n    [render](changed) {\n      if (super[render]) {\n        super[render](changed);\n      }\n\n      // As the drawer opens (closes), transition the backdrop to fully\n      // opaque (transparent).\n      if (changed.openedFraction) {\n        const {\n          drawerTransitionDuration,\n          openedFraction,\n          openedRenderedFraction,\n          showTransition,\n        } = this[state];\n\n        // The time required to show transitions depends on how far apart the\n        // elements currently are from their desired state.\n        const transitionFraction = Math.abs(\n          openedFraction - openedRenderedFraction\n        );\n        const duration = showTransition\n          ? transitionFraction * (drawerTransitionDuration / 1000)\n          : 0;\n\n        Object.assign(this[ids].backdrop.style, {\n          opacity: openedFraction,\n          transition: showTransition ? `opacity ${duration}s linear` : \"\",\n        });\n      }\n    }\n  };\n}\n","import Drawer from \"../base/Drawer.js\";\nimport PlainDrawerMixin from \"./PlainDrawerMixin.js\";\nimport PlainModalOverlayMixin from \"./PlainModalOverlayMixin.js\";\n\n/**\n * Drawer component in the Plain reference design system\n *\n * @inherits Drawer\n * @mixes PlainModalOverlayMixin\n */\nclass PlainDrawer extends PlainDrawerMixin(PlainModalOverlayMixin(Drawer)) {}\n\nexport default PlainDrawer;\n","import { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport { transmute } from \"../core/template.js\";\nimport Button from \"./Button.js\";\nimport Drawer from \"./Drawer.js\";\nimport {\n  defaultState,\n  ids,\n  raiseChangeEvents,\n  render,\n  rendered,\n  scrollTarget,\n  setState,\n  shadowRoot,\n  state,\n  template,\n} from \"./internal.js\";\n\n/**\n * A drawer that includes an always-visible grip element\n *\n * This variant of [Drawer](Drawer) includes a grip handle that remains visible\n * in the collapsed state. This both lets the user know the drawer is there, and\n * gives them a way to use a tap, click, or swipe to open or close the drawer.\n *\n * The default icon used to represent the handle can be replaced by slotting an\n * image or other element into the `grip` slot.\n *\n * @inherits Drawer\n * @part {Button} grip - the handle the user can tap, click, or swipe to open or close the drawer\n */\nclass DrawerWithGrip extends Drawer {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      gripPartType: Button,\n    });\n  }\n\n  /**\n   * The class or tag used to create the `grip` part – the grip\n   * handle the user can tap/click/swipe to open or close the drawer.\n   *\n   * @type {PartDescriptor}\n   * @default Button\n   */\n  get gripPartType() {\n    return this[state].gripPartType;\n  }\n  set gripPartType(gripPartType) {\n    this[setState]({ gripPartType });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    if (super[render]) {\n      super[render](changed);\n    }\n\n    renderParts(this[shadowRoot], this[state], changed);\n\n    if (changed.gripPartType) {\n      this[ids].grip.addEventListener(\"click\", (event) => {\n        // Clicking grip toggles drawer.\n        this[raiseChangeEvents] = true;\n        this.toggle();\n        event.stopPropagation();\n        this[raiseChangeEvents] = false;\n      });\n    }\n\n    if (changed.fromEdge || changed.rightToLeft) {\n      // Position the grip so it's at the outer edge of the drawer.\n      const { fromEdge, rightToLeft } = this[state];\n\n      const vertical = fromEdge === \"top\" || fromEdge === \"bottom\";\n      this[ids].frame.style.flexDirection = vertical ? \"column\" : \"row\";\n\n      // Determine what grid we'll use to relatively position the content and\n      // the grip.\n      const mapFromEdgeToGrid = {\n        bottom: \"auto 1fr / auto\",\n        left: \"auto / 1fr auto\",\n        right: \"auto / auto 1fr\",\n        top: \"1fr auto / auto\",\n      };\n      mapFromEdgeToGrid.start = rightToLeft\n        ? mapFromEdgeToGrid.right\n        : mapFromEdgeToGrid.left;\n      mapFromEdgeToGrid.end = rightToLeft\n        ? mapFromEdgeToGrid.left\n        : mapFromEdgeToGrid.right;\n\n      // Determine what cell the grip will go in.\n      const mapFromEdgeToGripCell = {\n        bottom: \"1 / 1\",\n        left: \"1 / 2\",\n        right: \"1 / 1\",\n        top: \"2 / 1\",\n      };\n      mapFromEdgeToGripCell.start = rightToLeft\n        ? mapFromEdgeToGripCell.right\n        : mapFromEdgeToGripCell.left;\n      mapFromEdgeToGripCell.end = rightToLeft\n        ? mapFromEdgeToGripCell.left\n        : mapFromEdgeToGripCell.right;\n\n      this[ids].gripContainer.style.grid = mapFromEdgeToGrid[fromEdge];\n      this[ids].gripWorkaround.style.gridArea = mapFromEdgeToGripCell[fromEdge];\n    }\n  }\n\n  [rendered](/** @type {ChangedFlags} */ changed) {\n    super[rendered](changed);\n\n    if (this[state].gripSize === null) {\n      // Use the rendered size of the grip to set the gripSize. This will ensure\n      // the grip is visible, peeking out from the edge of the drawer's container.\n      const { fromEdge } = this[state];\n      const vertical = fromEdge === \"top\" || fromEdge === \"bottom\";\n      const dimension = vertical ? \"offsetHeight\" : \"offsetWidth\";\n      const gripSize = this[ids].grip[dimension];\n      this[setState]({ gripSize });\n    }\n  }\n\n  // Tell TrackpadSwipeMixin that the gripped content is the scrollable element\n  // the user is going to try to scroll with the trackpad.\n  get [scrollTarget]() {\n    return this[ids].grippedContent;\n  }\n\n  get [template]() {\n    const result = super[template];\n\n    // Replace the default slot with one that includes a grip element.\n    //\n    // The gripWorkaround element exists for Safari, which doesn't correctly\n    // measure the grip dimensions when mounted without it. Having a div that's\n    // display: block instead of flex appears to be the reason this helps.\n    const defaultSlot = result.content.querySelector(\"slot:not([name])\");\n    if (defaultSlot) {\n      defaultSlot.replaceWith(fragmentFrom.html`\n        <div id=\"gripContainer\">\n          <div id=\"grippedContent\">\n            <slot></slot>\n          </div>\n          <div id=\"gripWorkaround\">\n            <div id=\"grip\" part=\"grip\" aria-label=\"Toggle drawer\">\n              <slot name=\"grip\"></slot>\n            </div>\n          </div>\n        </div>\n      `);\n    }\n\n    renderParts(result.content, this[state]);\n\n    // Normally a closed overlay is hidden, but we want to make a closed\n    // DrawerWithGrip visible.\n    // REVIEW: We make the drawer visible by undoing the `display: none` on the\n    // host applied by OverlayMixin. That feels awkward.\n    result.content.append(fragmentFrom.html`\n      <style>\n        :host([closed]) {\n          display: inline-flex;\n        }\n\n        [part~=\"frame\"] {\n          display: flex;\n          overflow: hidden;\n        }\n\n        #gripContainer {\n          display: grid;\n          height: 100%;\n          width: 100%;\n        }\n\n        #grippedContent {\n          overflow: auto;\n          -webkit-overflow-scrolling: touch; /* for momentum scrolling */\n        }\n        :host([closed]) #grippedContent {\n          overflow: hidden;\n        }\n\n        #gripWorkaround {\n          display: grid;\n        }\n\n        [part~=\"grip\"] {\n          align-items: center;\n          display: grid;\n          justify-items: center;\n        }\n      </style>\n    `);\n\n    return result;\n  }\n}\n\n/**\n * Render parts for the template or an instance.\n *\n * @private\n * @param {DocumentFragment} root\n * @param {PlainObject} state\n * @param {ChangedFlags} [changed]\n */\nfunction renderParts(root, state, changed) {\n  if (!changed || changed.gripPartType) {\n    const { gripPartType } = state;\n    const grip = root.getElementById(\"grip\");\n    if (grip) {\n      transmute(grip, gripPartType);\n    }\n  }\n}\n\nexport default DrawerWithGrip;\n","import DrawerWithGrip from \"../base/DrawerWithGrip.js\";\nimport { ids, render, state, template } from \"../base/internal.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport PlainDrawerMixin from \"./PlainDrawerMixin.js\";\nimport PlainModalOverlayMixin from \"./PlainModalOverlayMixin.js\";\n\n/**\n * DrawerWithGrip component in the Plain reference design system\n *\n * @inherits DrawerWithGrip\n * @mixes PlainModalOverlayMixin\n */\nclass PlainDrawerWithGrip extends PlainDrawerMixin(\n  PlainModalOverlayMixin(DrawerWithGrip)\n) {\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n    // Rotate the default grip icon to reflect the swipe axis.\n    if (changed.swipeAxis && this[ids].gripIcon) {\n      const transform =\n        this[state].swipeAxis === \"horizontal\" ? \"rotate(90deg)\" : \"\";\n      this[ids].gripIcon.style.transform = transform;\n    }\n  }\n\n  get [template]() {\n    const result = super[template];\n\n    // Fill the grip slot with our icon.\n    // Default grip icon from Material Design icons \"drag handle\".\n    const gripSlot = result.content.querySelector('slot[name=\"grip\"]');\n    if (gripSlot) {\n      gripSlot.append(\n        fragmentFrom.html`\n          <svg\n            id=\"gripIcon\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n          >\n            <defs>\n              <path id=\"a\" d=\"M0 0h24v24H0V0z\" />\n            </defs>\n            <clipPath id=\"b\">\n              <use xlink:href=\"#a\" overflow=\"visible\" />\n            </clipPath>\n            <path clip-path=\"url(#b)\" d=\"M20 9H4v2h16V9zM4 15h16v-2H4v2z\" />\n          </svg>\n        `\n      );\n    }\n\n    return result;\n  }\n}\n\nexport default PlainDrawerWithGrip;\n","import { updateChildNodes } from \"../core/dom.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport { replace, transmute } from \"../core/template.js\";\nimport CursorAPIMixin from \"./CursorAPIMixin.js\";\nimport DelegateInputLabelMixin from \"./DelegateInputLabelMixin.js\";\nimport FormElementMixin from \"./FormElementMixin.js\";\nimport {\n  applyElementData,\n  defaultState,\n  ids,\n  render,\n  rendered,\n  setState,\n  shadowRoot,\n  state,\n  stateEffects,\n  template,\n} from \"./internal.js\";\nimport ItemsAPIMixin from \"./ItemsAPIMixin.js\";\nimport ItemsCursorMixin from \"./ItemsCursorMixin.js\";\nimport Menu from \"./Menu.js\";\nimport PopupButton from \"./PopupButton.js\";\nimport PopupListMixin from \"./PopupListMixin.js\";\nimport SelectedTextAPIMixin from \"./SelectedTextAPIMixin.js\";\nimport SelectedValueAPIMixin from \"./SelectedValueAPIMixin.js\";\nimport SingleSelectAPIMixin from \"./SingleSelectAPIMixin.js\";\nimport SlotItemsMixin from \"./SlotItemsMixin.js\";\n\nconst Base = CursorAPIMixin(\n  DelegateInputLabelMixin(\n    FormElementMixin(\n      ItemsAPIMixin(\n        ItemsCursorMixin(\n          PopupListMixin(\n            SelectedTextAPIMixin(\n              SelectedValueAPIMixin(\n                SingleSelectAPIMixin(SlotItemsMixin(PopupButton))\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n);\n\n/**\n * Shows a single choice made from a pop-up list of choices\n *\n * @inherits PopupButton\n * @mixes CursorAPIMixin\n * @mixes DelegateInputLabelMixin\n * @mixes FormElementMixin\n * @mixes ItemsAPIMixin\n * @mixes ItemsCursorMixin\n * @mixes PopupListMixin\n * @mixes SelectedTextAPIMixin\n * @mixes SelectedValueAPIMixin\n * @mixes SingleSelectAPIMixin\n * @mixes SlotItemsMixin\n *\n * @part {Menu} list - the list shown in the popup\n * @part down-icon - the icon shown in the toggle if the popup will open or close in the down direction\n * @part up-icon - the icon shown in the toggle if the popup will open or close in the up direction\n * @part {div} value - region inside the toggle button showing the value of the current selection\n */\nclass DropdownList extends Base {\n  // Apply the data shown in the source element (an item in the list) to the\n  // target element (the value part). The default implementation clones the\n  // source's childNodes and sets those as as the child nodes of the target.\n  [applyElementData](source, target) {\n    const sourceChildNodes = source ? [...source.childNodes] : [];\n    const clones = sourceChildNodes.map((node) => node.cloneNode(true));\n    updateChildNodes(target, clones);\n  }\n\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      ariaHasPopup: \"listbox\",\n      listPartType: Menu,\n      selectedIndex: -1,\n      selectedItem: null,\n      valuePartType: \"div\",\n    });\n  }\n\n  // @ts-ignore\n  get items() {\n    /** @type {any} */\n    const list = this[ids] && this[ids].list;\n    return list ? list.items : null;\n  }\n\n  /**\n   * The class or tag used to define the `list` part – the element\n   * presenting the list items and handling navigation between them.\n   *\n   * @type {PartDescriptor}\n   * @default List\n   */\n  get listPartType() {\n    return this[state].listPartType;\n  }\n  set listPartType(listPartType) {\n    this[setState]({ listPartType });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n\n    renderParts(this[shadowRoot], this[state], changed);\n\n    // Update selection.\n    if (changed.items || changed.selectedIndex) {\n      const { items, selectedIndex } = this[state];\n      const selectedItem = items ? items[selectedIndex] : null;\n\n      // Apply the data from the selected item to the value part.\n      this[applyElementData](selectedItem, this[ids].value);\n\n      // Mark only the selected item as selected.\n      if (items) {\n        items.forEach((/** @type {any} */ item) => {\n          if (\"selected\" in item) {\n            item.selected = item === selectedItem;\n          }\n        });\n      }\n    }\n\n    if (changed.opened) {\n      // Reflect opened state to source for ARIA.\n      const { opened } = this[state];\n      this[ids].source.setAttribute(\"aria-expanded\", opened.toString());\n    }\n\n    if (changed.sourcePartType) {\n      /** @type {any} */ const source = this[ids].source;\n      // HACK — need better way to forward button role to inner button.\n      if (source.inner) {\n        source.inner.setAttribute(\"role\", \"none\");\n      }\n    }\n  }\n\n  [rendered](changed) {\n    super[rendered](changed);\n\n    // Indicate which component is the popup's list.\n    if (changed.listPartType) {\n      this[setState]({\n        popupList: this[ids].list,\n      });\n    }\n  }\n\n  [stateEffects](state, changed) {\n    const effects = super[stateEffects](state, changed);\n\n    // When opening the popup, by default (re)select the current item.\n    if (changed.opened && state.opened) {\n      Object.assign(effects, {\n        currentIndex: state.selectedIndex,\n      });\n    }\n\n    // If closing, make current item the selected item.\n    if (changed.opened) {\n      const { closeResult, currentIndex, opened } = state;\n      const closing = changed.opened && !opened;\n      const canceled = closeResult && closeResult.canceled;\n      if (closing && !canceled && currentIndex >= 0) {\n        Object.assign(effects, {\n          selectedIndex: currentIndex,\n        });\n      }\n    }\n\n    // If we get items while closed and don't have a selection, select the first\n    // item.\n    if (changed.items || changed.selectedIndex) {\n      const { items, opened, selectedIndex } = state;\n      if (!opened && selectedIndex < 0 && items && items.length > 0) {\n        Object.assign(effects, {\n          selectedIndex: 0,\n        });\n      }\n    }\n\n    return effects;\n  }\n\n  get [template]() {\n    const result = super[template];\n\n    // Replace the source slot with an element to show the value.\n    const sourceSlot = result.content.querySelector('slot[name=\"source\"]');\n    if (sourceSlot) {\n      replace(\n        sourceSlot,\n        fragmentFrom.html` <div id=\"value\" part=\"value\"></div> `\n      );\n    }\n\n    // Wrap default slot with a list.\n    const defaultSlot = result.content.querySelector(\"slot:not([name])\");\n    if (defaultSlot) {\n      defaultSlot.replaceWith(fragmentFrom.html`\n        <div id=\"list\" part=\"list\">\n          <slot></slot>\n        </div>\n      `);\n    }\n\n    // Apply combobox semantics to the source button. Because focus moves to the\n    // list itself when the popup opens, the aria-controls attribute has no\n    // effect other than convincing the browser to announce the button as a\n    // combobox.\n    const source = result.content.querySelector('[part~=\"source\"]');\n    if (source) {\n      source.setAttribute(\"aria-activedescendant\", \"value\");\n      source.setAttribute(\"aria-autocomplete\", \"none\");\n      source.setAttribute(\"aria-controls\", \"list\");\n      source.setAttribute(\"role\", \"combobox\");\n    }\n\n    renderParts(result.content, this[state]);\n\n    result.content.append(fragmentFrom.html`\n      <style>\n        [part~=\"list\"] {\n          max-height: 100%;\n        }\n      </style>\n    `);\n\n    return result;\n  }\n\n  /**\n   * The class or tag used to create the `value` part - the region\n   * showing the dropdown list's current value.\n   *\n   * @type {PartDescriptor}\n   * @default 'div'\n   */\n  get valuePartType() {\n    return this[state].valuePartType;\n  }\n  set valuePartType(valuePartType) {\n    this[setState]({ valuePartType });\n  }\n}\n\n/**\n * Render parts for the template or an instance.\n *\n * @private\n * @param {DocumentFragment} root\n * @param {PlainObject} state\n * @param {ChangedFlags} [changed]\n */\nfunction renderParts(root, state, changed) {\n  if (!changed || changed.listPartType) {\n    const { listPartType } = state;\n    const list = root.getElementById(\"list\");\n    if (list) {\n      transmute(list, listPartType);\n    }\n  }\n  if (!changed || changed.valuePartType) {\n    const { valuePartType } = state;\n    const value = root.getElementById(\"value\");\n    if (value) {\n      transmute(value, valuePartType);\n    }\n  }\n}\n\nexport default DropdownList;\n","import { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\";\nimport AriaRoleMixin from \"./AriaRoleMixin.js\";\nimport ComposedFocusMixin from \"./ComposedFocusMixin.js\";\nimport CursorAPIMixin from \"./CursorAPIMixin.js\";\nimport CursorInViewMixin from \"./CursorInViewMixin.js\";\nimport DirectionCursorMixin from \"./DirectionCursorMixin.js\";\nimport FocusVisibleMixin from \"./FocusVisibleMixin.js\";\nimport FormElementMixin from \"./FormElementMixin.js\";\nimport {\n  defaultState,\n  ids,\n  render,\n  scrollTarget,\n  setState,\n  state,\n  template,\n} from \"./internal.js\";\nimport ItemsAPIMixin from \"./ItemsAPIMixin.js\";\nimport ItemsCursorMixin from \"./ItemsCursorMixin.js\";\nimport ItemsTextMixin from \"./ItemsTextMixin.js\";\nimport KeyboardDirectionMixin from \"./KeyboardDirectionMixin.js\";\nimport KeyboardMixin from \"./KeyboardMixin.js\";\nimport KeyboardPagedCursorMixin from \"./KeyboardPagedCursorMixin.js\";\nimport KeyboardPrefixCursorMixin from \"./KeyboardPrefixCursorMixin.js\";\nimport LanguageDirectionMixin from \"./LanguageDirectionMixin.js\";\nimport SelectedTextAPIMixin from \"./SelectedTextAPIMixin.js\";\nimport SelectedValueAPIMixin from \"./SelectedValueAPIMixin.js\";\nimport SingleSelectAPIMixin from \"./SingleSelectAPIMixin.js\";\nimport SlotItemsMixin from \"./SlotItemsMixin.js\";\nimport TapCursorMixin from \"./TapCursorMixin.js\";\n\nconst Base = AriaRoleMixin(\n  ComposedFocusMixin(\n    CursorAPIMixin(\n      CursorInViewMixin(\n        DirectionCursorMixin(\n          FocusVisibleMixin(\n            FormElementMixin(\n              ItemsAPIMixin(\n                ItemsCursorMixin(\n                  ItemsTextMixin(\n                    KeyboardDirectionMixin(\n                      KeyboardMixin(\n                        KeyboardPagedCursorMixin(\n                          KeyboardPrefixCursorMixin(\n                            LanguageDirectionMixin(\n                              SingleSelectAPIMixin(\n                                SelectedTextAPIMixin(\n                                  SelectedValueAPIMixin(\n                                    SlotItemsMixin(\n                                      TapCursorMixin(ReactiveElement)\n                                    )\n                                  )\n                                )\n                              )\n                            )\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n);\n\n/**\n * A list of options.\n *\n * This is similar to [ListBox](ListBox) and [Menu](Menu), but designed for use\n * in [DropdownList](DropdownList) to present a menu of [Option](Option)\n * elements. Among other things, it does not assume that the selected item and\n * the current item are the same. It also avoids the special focus behavior of\n * `Menu`.\n *\n * @inherits ReactiveElement\n * @mixes AriaRoleMixin\n * @mixes ComposedFocusMixin\n * @mixes CursorInViewMixin\n * @mixes CursorAPIMixin\n * @mixes DirectionCursorMixin\n * @mixes FocusVisibleMixin\n * @mixes FormElementMixin\n * @mixes ItemsAPIMixin\n * @mixes ItemsCursorMixin\n * @mixes ItemsTextMixin\n * @mixes KeyboardDirectionMixin\n * @mixes KeyboardMixin\n * @mixes KeyboardPagedCursorMixin\n * @mixes KeyboardPrefixCursorMixin\n * @mixes LanguageDirectionMixin\n * @mixes SelectedTextAPIMixin\n * @mixes SelectedValueAPIMixin\n * @mixes SingleSelectAPIMixin\n * @mixes SlotItemsMixin\n * @mixes TapCursorMixin\n */\nclass OptionList extends Base {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      highlightCurrentItem: true,\n      orientation: \"vertical\",\n      role: \"listbox\",\n    });\n  }\n\n  /**\n   * Flash the current item.\n   *\n   * By default, this uses a heuristic to guess whether the menu was closed by a\n   * keyboard or mouse (on desktop). If so, the menu flashes the current item\n   * off then back on, emulating the menu item selection effect in macOS.\n   * Otherwise, it does nothing.\n   */\n  async flashCurrentItem() {\n    const keyboardActive = this[state].focusVisible;\n    const probablyDesktop = matchMedia(\"(pointer: fine)\").matches;\n    if (keyboardActive || probablyDesktop) {\n      const flashDuration = 75; // milliseconds\n      this[setState]({ highlightCurrentItem: false });\n      await new Promise((resolve) => setTimeout(resolve, flashDuration));\n      this[setState]({ highlightCurrentItem: true });\n      await new Promise((resolve) => setTimeout(resolve, flashDuration));\n    }\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n\n    // Highlight the current item.\n    if (changed.items || changed.currentIndex || changed.highlightCurrentItem) {\n      const { currentIndex, items, highlightCurrentItem } = this[state];\n      if (items) {\n        items.forEach((item, index) => {\n          const current = index === currentIndex;\n\n          // Show visible highlight unless we're surpressing that.\n          item.toggleAttribute(\"current\", highlightCurrentItem && current);\n\n          // For ARIA purposes, we want to announce the current item as the\n          // selected item.\n          item.setAttribute(\"aria-selected\", String(current));\n        });\n      }\n    }\n  }\n\n  // @ts-ignore\n  get [scrollTarget]() {\n    return this[ids].container;\n  }\n\n  get [template]() {\n    const result = super[template];\n    result.content.append(fragmentFrom.html`\n      <style>\n        :host {\n          box-sizing: border-box;\n          cursor: default;\n          display: flex;\n          overflow: hidden; /* Container element is responsible for scrolling */\n          -webkit-tap-highlight-color: transparent;\n        }\n\n        #container {\n          display: \"block\";\n          flex: 1;\n          -webkit-overflow-scrolling: touch; /* for momentum scrolling */\n          overflow-x: \"hidden\";\n          overflow-y: \"auto\";\n        }\n      </style>\n      <div id=\"container\" role=\"none\">\n        <slot id=\"slot\"></slot>\n      </div>\n    `);\n    return result;\n  }\n}\n\nexport default OptionList;\n","import { template } from \"../base/internal.js\";\nimport OptionList from \"../base/OptionList.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\n\n/**\n * OptionList component in the Plain reference design system\n *\n * @inherits OptionList\n */\nclass PlainOptionList extends OptionList {\n  get [template]() {\n    const result = super[template];\n\n    result.content.append(fragmentFrom.html`\n      <style>\n        ::slotted(*),\n        #slot > * {\n          padding: 0.25em;\n        }\n\n        ::slotted([current]),\n        #slot > [current] {\n          background: highlight;\n          color: highlighttext;\n        }\n\n        @media (pointer: coarse) {\n          ::slotted(*),\n          #slot > * {\n            padding: 1em;\n          }\n        }\n      </style>\n    `);\n\n    return result;\n  }\n}\n\nexport default PlainOptionList;\n","import DropdownList from \"../base/DropdownList.js\";\nimport { defaultState } from \"../base/internal.js\";\nimport PopupToggleMixin from \"../base/PopupToggleMixin.js\";\nimport PlainBorderButton from \"./PlainBorderButton.js\";\nimport PlainOpenCloseToggle from \"./PlainOpenCloseToggle.js\";\nimport PlainOptionList from \"./PlainOptionList.js\";\nimport PlainPopup from \"./PlainPopup.js\";\n\n/**\n * DropdownList component in the Plain reference design system\n *\n * @inherits DropdownList\n * @part {PlainBorderButton} source\n * @part {PlainOptionList} list\n * @part {PlainOpenCloseToggle} popup-toggle\n * @part {PlainPopup} popup\n * @mixes PopupToggleMixin\n */\nclass PlainDropdownList extends PopupToggleMixin(DropdownList) {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      listPartType: PlainOptionList,\n      popupPartType: PlainPopup,\n      sourcePartType: PlainBorderButton,\n      popupTogglePartType: PlainOpenCloseToggle,\n    });\n  }\n}\n\nexport default PlainDropdownList;\n","import { template } from \"../base/internal.js\";\nimport UpDownToggle from \"../base/UpDownToggle.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport { replace } from \"../core/template.js\";\n\n/**\n * An expand/collapse toggle in the Plain reference design system\n *\n * @inherits UpDownToggle\n */\nclass PlainExpandCollapseToggle extends UpDownToggle {\n  get [template]() {\n    const result = super[template];\n\n    // Replace the icons with our up/down glyphs.\n    const downIcon = result.content.getElementById(\"downIcon\");\n    const downIconGlyph = fragmentFrom.html`\n      <svg\n        id=\"downIcon\"\n        part=\"toggle-icon down-icon\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n      >\n        <path d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\" />\n      </svg>\n    `.firstElementChild;\n    if (downIcon && downIconGlyph) {\n      replace(downIcon, downIconGlyph);\n    }\n    const upIcon = result.content.getElementById(\"upIcon\");\n    const upIconGlyph = fragmentFrom.html`\n      <svg\n        id=\"upIcon\"\n        part=\"toggle-icon up-icon\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n      >\n        <path d=\"M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z\" />\n      </svg>\n    `.children[0];\n    if (upIcon && upIconGlyph) {\n      replace(upIcon, upIconGlyph);\n    }\n\n    result.content.append(\n      fragmentFrom.html`\n        <style>\n          :host([disabled]) {\n            opacity: 0.5;\n          }\n\n          :host(:not([disabled])):hover {\n            background: #eee;\n          }\n\n          [part~=\"toggle-icon\"] {\n            fill: currentColor;\n          }\n        </style>\n      `\n    );\n    return result;\n  }\n}\n\nexport default PlainExpandCollapseToggle;\n","import { templateFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\";\nimport EffectMixin from \"./EffectMixin.js\";\nimport {\n  defaultState,\n  effectEndTarget,\n  ids,\n  render,\n  setState,\n  state,\n  template,\n} from \"./internal.js\";\nimport OpenCloseMixin from \"./OpenCloseMixin.js\";\nimport TransitionEffectMixin from \"./TransitionEffectMixin.js\";\n\nconst Base = OpenCloseMixin(\n  EffectMixin(TransitionEffectMixin(ReactiveElement))\n);\n\n/**\n * Region that expands/collapses in place with an animated transition\n *\n * [A region that can be expanded and collapsed](/demos/expandablePanel.html)\n *\n * This component combines [OpenCloseMixin](OpenCloseMixin),\n * [TransitionEffectMixin](TransitionEffectMixin) and a simple CSS height\n * animation.\n *\n * This component handles only the duties of collapsing and expanding. It does\n * not provide a user interface for the user to trigger the change in state;\n * you must provide that user interface yourself.\n *\n * @inherits ReactiveElement\n * @mixes OpenCloseMixin\n * @mixes EffectMixin\n * @mixes TransitionEffectMixin\n */\nclass ExpandablePanel extends Base {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      transitionDuration: 250,\n    });\n  }\n\n  // @ts-ignore\n  get [effectEndTarget]() {\n    return this[ids].outerContainer;\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n    if (changed.effect || changed.effectPhase || changed.enableEffects) {\n      const { effect, effectPhase, enableEffects, transitionDuration } = this[\n        state\n      ];\n\n      // The inner container lets us measure how tall the content wants to be.\n      const naturalHeight = this[ids].innerContainer.getBoundingClientRect()\n        .height;\n\n      // The effect phase (before, during, after) determines which height we apply\n      // to the outer container.\n      /** @type {IndexedObject<PlainObject>} */\n      const phaseHeights = {\n        open: {\n          before: \"0px\",\n          during: `${naturalHeight}px`,\n          after: \"\",\n        },\n        close: {\n          before: `${naturalHeight}px`,\n          during: \"0px\",\n          after: \"0px\",\n        },\n      };\n      const height = phaseHeights[effect][effectPhase];\n\n      // This animates an element's height, which may not produce the smoothest\n      // results. See\n      // https://developers.google.com/web/updates/2017/03/performant-expand-and-collapse.\n      // Animating height does have the advantage of letting you set the height of\n      // the panel's collapsed state by setting the panel's `min-height`.\n      const durationInSeconds = transitionDuration / 1000;\n      const transition =\n        enableEffects && effectPhase === \"during\"\n          ? `height ${durationInSeconds}s`\n          : null;\n\n      Object.assign(this[ids].outerContainer.style, {\n        height,\n        transition,\n      });\n    }\n    if (changed.opened || changed.tabIndex) {\n      // We only set aria-expanded if this component can get the keyboard focus\n      // (which it usually won't).\n      const canReceiveFocus = this[state].tabIndex >= 0;\n      if (canReceiveFocus) {\n        this.toggleAttribute(\"aria-expanded\", this[state].opened);\n      } else {\n        this.removeAttribute(\"aria-expanded\");\n      }\n    }\n  }\n\n  get [template]() {\n    return templateFrom.html`\n      <style>\n        :host {\n          display: block;\n          overflow: hidden;\n        }\n      </style>\n      <div id=\"outerContainer\" role=\"none\">\n        <div id=\"innerContainer\" role=\"none\">\n          <slot></slot>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * The duration of the expand/collapse transition in milliseconds.\n   *\n   * @type {number}\n   * @default {250}\n   */\n  get transitionDuration() {\n    return this[state].transitionDuration;\n  }\n  set transitionDuration(transitionDuration) {\n    if (!isNaN(transitionDuration)) {\n      this[setState]({ transitionDuration });\n    }\n  }\n}\n\nexport default ExpandablePanel;\n","import { templateFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\";\nimport { transmute } from \"../core/template.js\";\nimport AriaRoleMixin from \"./AriaRoleMixin.js\";\nimport Button from \"./Button.js\";\nimport ExpandablePanel from \"./ExpandablePanel.js\";\nimport {\n  defaultState,\n  ids,\n  raiseChangeEvents,\n  render,\n  setState,\n  shadowRoot,\n  state,\n  template,\n} from \"./internal.js\";\nimport OpenCloseMixin from \"./OpenCloseMixin.js\";\nimport UpDownToggle from \"./UpDownToggle.js\";\n\nconst Base = AriaRoleMixin(OpenCloseMixin(ReactiveElement));\n\n/**\n * A document section with a header that can be expanded or collapsed\n *\n * @inherits ReactiveElement\n * @mixes AriaRoleMixin\n * @mixes OpenCloseMixin\n * @part {UpDownToggle} toggle - contains the icons or other element which lets the user know they\n * can expand/collapse the panel\n * @part {Button} header - the header that can be clicked/tapped to expand or collapse the panel\n * @part {ExpandablePanel} panel - contains the component's expandable/collapsible content\n */\nclass ExpandableSection extends Base {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      headerPartType: Button,\n      panelPartType: ExpandablePanel,\n      role: \"region\",\n      togglePartType: UpDownToggle,\n    });\n  }\n\n  /**\n   * The class or tag used to create the `header` part - the header\n   * region the user can tap/click to expand or collapse the section.\n   *\n   * @type {PartDescriptor}\n   * @default Button\n   */\n  get headerPartType() {\n    return this[state].headerPartType;\n  }\n  set headerPartType(headerPartType) {\n    this[setState]({ headerPartType });\n  }\n\n  /**\n   * The class or tag used to create the `panel` part - the container\n   * for the expandable/collapsible content.\n   *\n   * @type {PartDescriptor}\n   * @default ExpandablePanel\n   */\n  get panelPartType() {\n    return this[state].panelPartType;\n  }\n  set panelPartType(panelPartType) {\n    this[setState]({ panelPartType });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n\n    renderParts(this[shadowRoot], this[state], changed);\n\n    if (changed.headerPartType) {\n      this[ids].header.addEventListener(\"click\", () => {\n        this[raiseChangeEvents] = true;\n        this.toggle();\n        this[raiseChangeEvents] = false;\n      });\n    }\n\n    if (changed.opened || changed.togglePartType) {\n      const { opened } = this[state];\n\n      this[ids].header.setAttribute(\"aria-expanded\", opened.toString());\n\n      /** @type {any} */ const toggle = this[ids].toggle;\n      if (\"direction\" in toggle) {\n        toggle.direction = opened ? \"up\" : \"down\";\n      }\n\n      if (\"opened\" in this[ids].panel) {\n        /** @type {any} */ (this[ids].panel).opened = opened;\n      }\n    }\n  }\n\n  get [template]() {\n    // Default expand/collapse icons from Google's Material Design collection.\n    const result = templateFrom.html`\n      <style>\n        :host {\n          display: inline-block;\n        }\n\n        [part~=\"header\"] {\n          display: flex;\n        }\n\n        @media (hover: hover), (any-hover: hover) {\n          [part~=\"header\"]:hover {\n            background: rgba(0, 0, 0, 0.05);\n          }\n        }\n\n        .headerElement {\n          align-self: center;\n        }\n\n        #headerContainer {\n          flex: 1;\n          text-align: start;\n        }\n      </style>\n      <div id=\"header\" part=\"header\">\n        <div id=\"headerContainer\" class=\"headerElement\">\n          <slot name=\"header\"></slot>\n        </div>\n        <div id=\"toggle\" part=\"toggle\" class=\"headerElement\">\n          <slot name=\"toggleSlot\"></slot>\n        </div>\n      </div>\n      <div id=\"panel\" part=\"panel\" role=\"none\">\n        <slot></slot>\n      </div>\n    `;\n\n    renderParts(result.content, this[state]);\n\n    return result;\n  }\n\n  /**\n   * The class or tag used to create the `toggle` part – the element\n   * that lets the user know they can expand/collapse the section.\n   *\n   * @type {PartDescriptor}\n   * @default UpDownToggle\n   */\n  get togglePartType() {\n    return this[state].togglePartType;\n  }\n  set togglePartType(togglePartType) {\n    this[setState]({ togglePartType });\n  }\n}\n\n/**\n * Render parts for the template or an instance.\n *\n * @private\n * @param {DocumentFragment} root\n * @param {PlainObject} state\n * @param {ChangedFlags} [changed]\n */\nfunction renderParts(root, state, changed) {\n  if (!changed || changed.headerPartType) {\n    const { headerPartType } = state;\n    const header = root.getElementById(\"header\");\n    if (header) {\n      transmute(header, headerPartType);\n    }\n  }\n  if (!changed || changed.panelPartType) {\n    const { panelPartType } = state;\n    const panel = root.getElementById(\"panel\");\n    if (panel) {\n      transmute(panel, panelPartType);\n    }\n  }\n  if (!changed || changed.togglePartType) {\n    const { togglePartType } = state;\n    const toggle = root.getElementById(\"toggle\");\n    if (toggle) {\n      transmute(toggle, togglePartType);\n    }\n  }\n}\n\nexport default ExpandableSection;\n","import ExpandableSection from \"../base/ExpandableSection.js\";\nimport { defaultState, template } from \"../base/internal.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport PlainButton from \"./PlainButton.js\";\nimport PlainExpandCollapseToggle from \"./PlainExpandCollapseToggle.js\";\n\n/**\n * ExpandableSection component in the Plain reference design system\n *\n * @inherits ExpandableSection\n * @part {PlainButton} header\n * @part {PlainExpandCollapseToggle} toggle\n */\nclass PlainExpandableSection extends ExpandableSection {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      headerPartType: PlainButton,\n      togglePartType: PlainExpandCollapseToggle,\n    });\n  }\n\n  get [template]() {\n    const result = super[template];\n    result.content.append(\n      fragmentFrom.html`\n        <style>\n          [part~=\"toggle\"] {\n            margin: 0.75em;\n          }\n        </style>\n      `\n    );\n    return result;\n  }\n}\n\nexport default PlainExpandableSection;\n","import { updateChildNodes } from \"../core/dom.js\";\nimport {\n  defaultState,\n  getItemText,\n  raiseChangeEvents,\n  render,\n  rendered,\n  setState,\n  state,\n  stateEffects,\n} from \"./internal.js\";\nimport ListBox from \"./ListBox.js\";\n\n/**\n * List that only shows items containing a given text string\n *\n * @inherits ListBox\n */\nclass FilterListBox extends ListBox {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      availableItemFlags: null,\n      filter: null,\n    });\n  }\n\n  /**\n   * A text filter applied to the list's items. Only content elements whose\n   * text contains the indicated filter text will be included in the list's\n   * `items` property. The text search is case insensitive.\n   *\n   * By default, the filter is empty, so all substantive content elements\n   * are included in `items`.\n   *\n   * @type {string}\n   */\n  get filter() {\n    return this[state].filter;\n  }\n  set filter(filter) {\n    // If external code sets the filter, it's impossible for that code to\n    // predict the effects on the items and selection, so we'll need to raise\n    // change events.\n    const saveRaiseChangesEvents = this[raiseChangeEvents];\n    this[raiseChangeEvents] = true;\n    this[setState]({\n      filter: String(filter),\n    });\n    this[raiseChangeEvents] = saveRaiseChangesEvents;\n  }\n\n  /**\n   * @private\n   * @param {string} textToHighlight\n   * @param {ListItemElement} item\n   */\n  highlightTextInItem(textToHighlight, item) {\n    const text = item.textContent || \"\";\n    const start = textToHighlight\n      ? normalize(text).indexOf(normalize(textToHighlight))\n      : -1;\n    if (start >= 0) {\n      const end = start + textToHighlight.length;\n      const part1 = text.substr(0, start);\n      const part2 = text.substring(start, end);\n      const part3 = text.substr(end);\n      const fragment = document.createDocumentFragment();\n      const strong = document.createElement(\"strong\");\n      strong.textContent = part2;\n      fragment.append(new Text(part1), strong, new Text(part3));\n      return fragment.childNodes;\n    } else {\n      return [new Text(text)];\n    }\n  }\n\n  /**\n   * Returns true if the given item is available (matches the filter) in the\n   * given state.\n   *\n   * @param {ListItemElement} item\n   * @param {string} filter\n   * @returns {boolean}\n   */\n  itemMatchesFilter(item, filter) {\n    const text = this[getItemText](item);\n    if (!filter) {\n      return true;\n    } else if (!text) {\n      return false;\n    } else {\n      const normalizedText = normalize(text);\n      const normalizedFilter = normalize(filter);\n      return normalizedText.includes(normalizedFilter);\n    }\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n\n    // Hide items that don't match state.\n    // For matching items, highlight the matching text.\n    if (changed.filter || changed.items) {\n      const { filter, availableItemFlags, items } = this[state];\n      if (items) {\n        items.forEach((item, index) => {\n          const available = availableItemFlags[index];\n          item.style.display = available ? \"\" : \"none\";\n          if (available) {\n            const childNodes = this.highlightTextInItem(filter, item);\n            updateChildNodes(item, childNodes);\n          }\n        });\n      }\n    }\n  }\n\n  [rendered](changed) {\n    super[rendered](changed);\n\n    // If filter changed, we may need to scroll cursor back into view.\n    if (changed.filter) {\n      this.scrollCurrentItemIntoView();\n    }\n  }\n\n  [stateEffects](state, changed) {\n    const effects = super[stateEffects]\n      ? super[stateEffects](state, changed)\n      : {};\n\n    if (changed.filter || changed.items) {\n      const { filter, items } = state;\n      const availableItemFlags =\n        items === null\n          ? null\n          : items.map((item) => this.itemMatchesFilter(item, filter));\n      Object.assign(effects, { availableItemFlags });\n    }\n\n    return effects;\n  }\n}\n\n// Normalize the given string for searching.\n//\n// The Intl.Collator object has the options we want, and even has a tempting\n// \"search\" usage defined for it, but as of May 2020, the only use of that\n// object seems to be comparing strings instead of searching. So for now\n// this may be the best we can do.\nfunction normalize(s) {\n  return removeAccents(s).toLowerCase();\n}\n\n// Replace accented characters with unaccented counterparts.\n// From https://www.datatables.net/plug-ins/filtering/type-based/accent-neutralise.\n//\n// Note: this may be good enough for our purposes, but is not strictly\n// correct, as accents can be significant in some languages and not in others.\n// Example: ä and a have the same base letter in German, but in Swedish\n// those are separate base letters.\nfunction removeAccents(s) {\n  // Decompose the string into the Unicode NFD (Canonical Decomposition) to\n  // separate base characters from their accent characters, then strips out the\n  // accent characters.\n  return s.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n}\n\nexport default FilterListBox;\n","import AutoCompleteComboBox from \"./AutoCompleteComboBox.js\";\nimport FilterListBox from \"./FilterListBox.js\";\nimport {\n  defaultState,\n  ids,\n  raiseChangeEvents,\n  render,\n  setState,\n  state,\n  stateEffects,\n} from \"./internal.js\";\nimport SlotContentMixin from \"./SlotContentMixin.js\";\n\nconst Base = SlotContentMixin(AutoCompleteComboBox);\n\n/**\n * A combo box which applies its text input as a filter on its list items\n *\n * @inherits AutoCompleteComboBox\n * @mixes SlotContentMixin\n * @part {FilterListBox} list\n */\nclass FilterComboBox extends Base {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      filter: \"\",\n      listPartType: FilterListBox,\n    });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n\n    if (changed.inputPartType) {\n      this[ids].input.addEventListener(\"input\", (event) => {\n        this[raiseChangeEvents] = true;\n        /** @type {any} */\n        const cast = event;\n        const filter = cast.detail\n          ? cast.detail.originalText\n          : this[state].value;\n        this[setState]({ filter });\n        this[raiseChangeEvents] = false;\n      });\n    }\n\n    if (changed.filter || changed.currentIndex) {\n      const { filter, currentIndex } = this[state];\n      if (filter === \"\" || currentIndex === -1) {\n        const list = /** @type {any} */ (this[ids].list);\n        if (\"filter\" in list) {\n          list.filter = filter;\n        }\n      }\n    }\n  }\n\n  [stateEffects](state, changed) {\n    const effects = super[stateEffects](state, changed);\n\n    // Closing resets the filter.\n    if (changed.opened && !state.opened) {\n      Object.assign(effects, {\n        filter: \"\",\n      });\n    }\n\n    return effects;\n  }\n}\n\nexport default FilterComboBox;\n","import FilterListBox from \"../base/FilterListBox.js\";\nimport PlainListBoxMixin from \"./PlainListBoxMixin.js\";\n\n/**\n * FilterListBox component in the Plain reference design system\n *\n * @inherits FilterListBox\n */\nclass PlainFilterListBox extends PlainListBoxMixin(FilterListBox) {}\n\nexport default PlainFilterListBox;\n","import FilterComboBox from \"../base/FilterComboBox.js\";\nimport { defaultState } from \"../base/internal.js\";\nimport PlainAutoCompleteInput from \"./PlainAutoCompleteInput.js\";\nimport PlainComboBoxMixin from \"./PlainComboBoxMixin.js\";\nimport PlainFilterListBox from \"./PlainFilterListBox.js\";\n\n/**\n * FilterComboBox component in the Plain reference design system\n *\n * @inherits FilterComboBox\n * @part {PlainFilterListBox} list\n */\nclass PlainFilterComboBox extends PlainComboBoxMixin(FilterComboBox) {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      inputPartType: PlainAutoCompleteInput,\n      listPartType: PlainFilterListBox,\n    });\n  }\n}\n\nexport default PlainFilterComboBox;\n","import { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\";\nimport { transmute } from \"../core/template.js\";\nimport Button from \"./Button.js\";\nimport DelegateFocusMixin from \"./DelegateFocusMixin.js\";\nimport Drawer from \"./Drawer.js\";\nimport FocusVisibleMixin from \"./FocusVisibleMixin.js\";\nimport {\n  defaultState,\n  ids,\n  keydown,\n  raiseChangeEvents,\n  render,\n  setState,\n  shadowRoot,\n  state,\n  template,\n} from \"./internal.js\";\nimport KeyboardMixin from \"./KeyboardMixin.js\";\nimport OpenCloseMixin from \"./OpenCloseMixin.js\";\n\nconst Base = DelegateFocusMixin(\n  FocusVisibleMixin(KeyboardMixin(OpenCloseMixin(ReactiveElement)))\n);\n\n/**\n * Button that invokes a command menu, usually in a mobile context\n *\n * The button invokes a menu (by default, a Drawer), usually to provide\n * navigation and other UI on a mobile device.\n *\n * [A hamburger menu used to present navigation commands](/demos/hamburgerMenuButton.html)\n *\n * @inherits ReactiveElement\n * @mixes DelegateFocusMixin\n * @mixes FocusVisibleMixin\n * @mixes KeyboardMixin\n * @mixes OpenCloseMixin\n * @part {Drawer} menu - contains the navigation or other menu items\n * @part {Button} menu-button - toggles display of the menu\n */\nclass HamburgerMenuButton extends Base {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      fromEdge: \"start\",\n      menuButtonPartType: Button,\n      menuPartType: Drawer,\n    });\n  }\n\n  /**\n   * The edge from which the menu will appear, in terms of the menu's container.\n   *\n   * The `start` and `end` values refer to text direction: in left-to-right\n   * languages such as English, these are equivalent to `left` and `right`,\n   * respectively.\n   *\n   * @type {('end'|'left'|'right'|'start')}\n   * @default 'start'\n   */\n  get fromEdge() {\n    return this[state].fromEdge;\n  }\n  set fromEdge(fromEdge) {\n    this[setState]({ fromEdge });\n  }\n\n  // When the menu is closed, pressing Enter or Space is the same as clicking\n  // the menu button.\n  [keydown](/** @type {KeyboardEvent} */ event) {\n    /** @type {any} */\n    const menuButton = this[ids].menuButton;\n\n    let handled;\n\n    if (this.closed) {\n      switch (event.key) {\n        case \" \":\n        case \"Enter\":\n          menuButton.click();\n          handled = true;\n          break;\n      }\n    }\n\n    // Prefer mixin result if it's defined, otherwise use base result.\n    return handled || (super[keydown] && super[keydown](event));\n  }\n\n  /**\n   * The class or tag used to create the `menu` part – the container\n   * for the navigation and other commands available through the button.\n   *\n   * @type {PartDescriptor}\n   * @default Drawer\n   */\n  get menuPartType() {\n    return this[state].menuPartType;\n  }\n  set menuPartType(menuPartType) {\n    this[setState]({ menuPartType });\n  }\n\n  /**\n   * The class or tag used to create the `menu-button` part – the\n   * button the user can tap/click to invoke the menu.\n   *\n   * @type {PartDescriptor}\n   * @default Button\n   */\n  get menuButtonPartType() {\n    return this[state].menuButtonPartType;\n  }\n  set menuButtonPartType(menuButtonPartType) {\n    this[setState]({ menuButtonPartType });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n\n    renderParts(this[shadowRoot], this[state], changed);\n\n    if (changed.menuButtonPartType) {\n      this[ids].menuButton.addEventListener(\"click\", () => {\n        this[raiseChangeEvents] = true;\n        this.open();\n        this[raiseChangeEvents] = false;\n      });\n    }\n\n    if (changed.menuPartType) {\n      this[ids].menu.addEventListener(\"close\", (event) => {\n        /** @type {any} */\n        const cast = event;\n        this[setState]({\n          closeResult: cast.detail.closeResult,\n          opened: false,\n        });\n      });\n      this[ids].menu.addEventListener(\"open\", () => {\n        this[setState]({\n          opened: true,\n        });\n      });\n    }\n\n    const menu = /** @type {any} */ (this[ids].menu);\n\n    if (changed.fromEdge) {\n      if (\"fromEdge\" in menu) {\n        menu.fromEdge = this[state].fromEdge;\n      }\n    }\n\n    if (changed.opened) {\n      if (\"opened\" in menu) {\n        menu.opened = this[state].opened;\n      }\n    }\n  }\n\n  get [template]() {\n    const result = super[template];\n    result.content.append(fragmentFrom.html`\n      <style>\n        :host {\n          align-items: center;\n          display: inline-flex;\n          touch-action: manipulation;\n        }\n      </style>\n      <div id=\"menuButton\" part=\"menu-button\" aria-label=\"Open menu\">\n        <slot name=\"menuButton\"></slot>\n      </div>\n      <div id=\"menu\" part=\"menu\" exportparts=\"backdrop, frame\">\n        <slot></slot>\n      </div>\n    `);\n\n    renderParts(result.content, this[state]);\n\n    return result;\n  }\n}\n\n/**\n * Render parts for the template or an instance.\n *\n * @private\n * @param {DocumentFragment} root\n * @param {PlainObject} state\n * @param {ChangedFlags} [changed]\n */\nfunction renderParts(root, state, changed) {\n  if (!changed || changed.menuButtonPartType) {\n    const { menuButtonPartType } = state;\n    const menuButton = root.getElementById(\"menuButton\");\n    if (menuButton) {\n      transmute(menuButton, menuButtonPartType);\n    }\n  }\n  if (!changed || changed.menuPartType) {\n    const { menuPartType } = state;\n    const menu = root.getElementById(\"menu\");\n    if (menu) {\n      transmute(menu, menuPartType);\n    }\n  }\n}\n\nexport default HamburgerMenuButton;\n","import HamburgerMenuButton from \"../base/HamburgerMenuButton.js\";\nimport { defaultState, template } from \"../base/internal.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport PlainDrawer from \"./PlainDrawer.js\";\n\n/**\n * HamburgerMenuButton component in the Plain reference design system\n *\n * @inherits HamburgerMenuButton\n * @part menu-icon - the icon inside the menu button\n * @part {PlainDrawer} menu\n */\nclass PlainHamburgerMenuButton extends HamburgerMenuButton {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      menuPartType: PlainDrawer,\n    });\n  }\n\n  get [template]() {\n    const result = super[template];\n\n    // Fill the menuButton slot with our icon.\n    const menuButtonSlot = result.content.querySelector(\n      'slot[name=\"menuButton\"]'\n    );\n    if (menuButtonSlot) {\n      menuButtonSlot.append(\n        fragmentFrom.html`\n          <slot name=\"menuIcon\">\n            <svg\n              id=\"menuIcon\"\n              part=\"menu-icon\"\n              viewBox=\"0 0 18 18\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                d=\"M0 3 h18 v2 h-18 z m0 5 h18 v2 h-18 z m0 5 h18 v2 h-18 z\"\n              ></path>\n            </svg>\n          </slot>\n        `\n      );\n    }\n\n    result.content.append(\n      fragmentFrom.html`\n        <style>\n          [part~=\"menu-button\"] {\n            align-items: center;\n            display: inline-flex;\n            flex: 1;\n          }\n\n          [part~=\"menu-icon\"] {\n            display: block;\n            height: 1em;\n            width: 1em;\n          }\n        </style>\n      `\n    );\n    return result;\n  }\n}\n\nexport default PlainHamburgerMenuButton;\n","import { getDefaultText } from \"./content.js\";\nimport Explorer from \"./Explorer.js\";\nimport { defaultState, getItemText, render, state } from \"./internal.js\";\n\n/**\n * Master/detail user interface pattern navigated with a list box.\n *\n * @inherits Explorer\n */\nclass ListExplorer extends Explorer {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      proxyListPosition: \"start\",\n      orientation: \"vertical\",\n    });\n  }\n\n  /**\n   * Extract the text from the given item.\n   *\n   * The default implementation returns an item's `aria-label`, `alt` attribute,\n   * `innerText`, or `textContent`, in that order. You can override this to\n   * return the text that should be used.\n   *\n   * @param {Element} item\n   * @returns {string}\n   */\n  [getItemText](item) {\n    return super[getItemText] ? super[getItemText](item) : getDefaultText(item);\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n    const { items, proxiesAssigned } = this[state];\n    /** @type {Element[]} */ const proxies = this[state].proxies;\n    if ((changed.proxies || changed.items) && proxies && !proxiesAssigned) {\n      // Update default proxy text from item labels.\n      proxies.forEach((proxy, index) => {\n        const item = items[index];\n        if (item) {\n          const text = this[getItemText](item);\n          proxy.textContent = text;\n        }\n      });\n    }\n  }\n}\n\nexport default ListExplorer;\n","import { defaultState } from \"../base/internal.js\";\nimport ListExplorer from \"../base/ListExplorer.js\";\nimport PlainListBox from \"./PlainListBox.js\";\n\n/**\n * ListExplorer component in the Plain reference design system\n *\n * @inherits ListExplorer\n * @part {PlainListBox} proxy-list\n */\nclass PlainListExplorer extends ListExplorer {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      proxyListPartType: PlainListBox,\n    });\n  }\n}\n\nexport default PlainListExplorer;\n","import { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\";\nimport { transmute } from \"../core/template.js\";\nimport ComposedFocusMixin from \"./ComposedFocusMixin.js\";\nimport CursorAPIMixin from \"./CursorAPIMixin.js\";\nimport CursorSelectMixin from \"./CursorSelectMixin.js\";\nimport DelegateCursorMixin from \"./DelegateCursorMixin.js\";\nimport DelegateFocusMixin from \"./DelegateFocusMixin.js\";\nimport DelegateInputLabelMixin from \"./DelegateInputLabelMixin.js\";\nimport DelegateInputSelectionMixin from \"./DelegateInputSelectionMixin.js\";\nimport DelegateItemsMixin from \"./DelegateItemsMixin.js\";\nimport FilterListBox from \"./FilterListBox.js\";\nimport FocusVisibleMixin from \"./FocusVisibleMixin.js\";\nimport {\n  defaultState,\n  goFirst,\n  goLast,\n  goNext,\n  goPrevious,\n  ids,\n  inputDelegate,\n  itemsDelegate,\n  keydown,\n  raiseChangeEvents,\n  render,\n  setState,\n  shadowRoot,\n  state,\n  template,\n} from \"./internal.js\";\nimport KeyboardMixin from \"./KeyboardMixin.js\";\nimport SingleSelectAPIMixin from \"./SingleSelectAPIMixin.js\";\n\nconst Base = ComposedFocusMixin(\n  CursorAPIMixin(\n    CursorSelectMixin(\n      DelegateCursorMixin(\n        DelegateFocusMixin(\n          DelegateInputLabelMixin(\n            DelegateInputSelectionMixin(\n              DelegateItemsMixin(\n                FocusVisibleMixin(\n                  KeyboardMixin(SingleSelectAPIMixin(ReactiveElement))\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n);\n\n/**\n * A list accompanied by a search box\n *\n * @inherits ReactiveElement\n * @mixes ComposedFocusMixin\n * @mixes CursorAPIMixin\n * @mixes CursorSelectMixin\n * @mixes DelegateCursorMixin\n * @mixes DelegateFocusMixin\n * @mixes DelegateInputLabelMixin\n * @mixes DelegateInputSelectionMixin\n * @mixes DelegateItemsMixin\n * @mixes FocusVisibleMixin\n * @mixes KeyboardMixin\n * @mixes SingleSelectAPIMixin\n * @part {AutoCompleteInput} input - the input element for search terms\n * @part {FilterListBox} list - the searchable list of items\n */\nclass ListWithSearch extends Base {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      filter: \"\",\n      inputPartType: \"input\",\n      listPartType: FilterListBox,\n      placeholder: \"Search\",\n    });\n  }\n\n  /**\n   * A text filter applied to the list's items. Only content elements whose\n   * text contains the indicated filter text will be included in the list's\n   * `items` property. The text search is case insensitive.\n   *\n   * By default, the filter is empty, so all substantive content elements\n   * are included in `items`.\n   *\n   * @type {string}\n   */\n  get filter() {\n    return this[state].filter;\n  }\n  set filter(filter) {\n    this[setState]({\n      filter: String(filter),\n    });\n  }\n\n  /**\n   * The class or tag used to create the `input` part - the input\n   * element in which the user can enter search text.\n   *\n   * @type {PartDescriptor}\n   * @default 'input'\n   */\n  get inputPartType() {\n    return this[state].inputPartType;\n  }\n  set inputPartType(inputPartType) {\n    this[setState]({ inputPartType });\n  }\n\n  get [inputDelegate]() {\n    return this[ids].input;\n  }\n\n  get [itemsDelegate]() {\n    return this[ids].list;\n  }\n\n  [keydown](/** @type {KeyboardEvent} */ event) {\n    let handled;\n    /** @type {any} */\n    const list = this[ids].list;\n\n    switch (event.key) {\n      // We do our own handling of the Up and Down arrow keys, rather than\n      // relying on KeyboardDirectionMixin. The latter supports Home and End,\n      // and we don't want to handle those -- we want to let the text input\n      // handle them. We also need to forward PageDown/PageUp to the list\n      // element.\n      case \"ArrowDown\":\n        handled = event.altKey ? this[goLast]() : this[goNext]();\n        break;\n      case \"ArrowUp\":\n        handled = event.altKey ? this[goFirst]() : this[goPrevious]();\n        break;\n\n      // Forward Page Down/Page Up to the list element.\n      //\n      // This gets a little more complex than we'd like. The pageUp/pageDown\n      // methods may update the list's currentIndex, which in turn will\n      // eventually update the currentIndex of this component. In the meantime,\n      // other keydown processing can set state, which will trigger a render.\n      // When this component is asked for updates, it'll return the current\n      // (i.e. old) currentIndex value, and overwrite the list's own, newer\n      // currentIndex. To avoid this, we wait for the component to finish\n      // processing the keydown using timeout timing, then invoke\n      // pageUp/pageDown.\n      //\n      // This forces us to speculate about whether pageUp/pageDown will update\n      // the selection so that we can synchronously return an indication of\n      // whether the key event was handled.\n      case \"PageDown\":\n        if (list.pageDown) {\n          setTimeout(() => list.pageDown());\n          const items = this.items;\n          if (items) {\n            handled = this.currentIndex < items.length - 1;\n          }\n        }\n        break;\n\n      case \"PageUp\":\n        if (list.pageUp) {\n          setTimeout(() => list.pageUp());\n          handled = this.currentIndex > 0;\n        }\n        break;\n    }\n\n    // Prefer mixin result if it's defined, otherwise use base result.\n    return handled || (super[keydown] && super[keydown](event));\n  }\n\n  /**\n   * The class or tag used to create the `list` part - the region\n   * that presents the available set of items matching the search criteria.\n   *\n   * @type {PartDescriptor}\n   * @default ListBox\n   */\n  get listPartType() {\n    return this[state].listPartType;\n  }\n  set listPartType(listPartType) {\n    this[setState]({ listPartType });\n  }\n\n  get placeholder() {\n    return this[state].placeholder;\n  }\n  set placeholder(placeholder) {\n    this[setState]({\n      placeholder: String(placeholder),\n    });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n\n    renderParts(this[shadowRoot], this[state], changed);\n\n    if (changed.inputPartType) {\n      this[ids].input.addEventListener(\"input\", () => {\n        this[raiseChangeEvents] = true;\n        const filter = /** @type {any} */ (this[ids].input).value;\n        this[setState]({ filter });\n        this[raiseChangeEvents] = false;\n      });\n    }\n\n    if (changed.filter) {\n      const { filter } = this[state];\n      /** @type {HTMLInputElement} */ (this[ids].input).value = filter;\n      /** @type {any} */ (this[ids].list).filter = filter;\n    }\n\n    if (changed.placeholder) {\n      const { placeholder } = this[state];\n      /** @type {HTMLInputElement} */ (this[ids]\n        .input).placeholder = placeholder;\n    }\n  }\n\n  get [template]() {\n    const result = super[template];\n\n    result.content.append(fragmentFrom.html`\n      <style>\n        :host {\n          display: grid;\n          grid-template-rows: auto minmax(0, 1fr);\n        }\n\n        [part~=\"input\"] {\n          outline: none;\n        }\n\n        [part~=\"list\"] {\n          outline: none;\n        }\n      </style>\n      <input id=\"input\" part=\"input\" />\n      <div id=\"list\" part=\"list\" tabindex=\"-1\">\n        <slot></slot>\n      </div>\n    `);\n\n    renderParts(result.content, this[state]);\n\n    return result;\n  }\n}\n\n/**\n * Render parts for the template or an instance.\n *\n * @private\n * @param {DocumentFragment} root\n * @param {PlainObject} state\n * @param {ChangedFlags} [changed]\n */\nfunction renderParts(root, state, changed) {\n  if (!changed || changed.inputPartType) {\n    const { inputPartType } = state;\n    const input = root.getElementById(\"input\");\n    if (input) {\n      transmute(input, inputPartType);\n    }\n  }\n  if (!changed || changed.listPartType) {\n    const { listPartType } = state;\n    const list = root.getElementById(\"list\");\n    if (list) {\n      transmute(list, listPartType);\n    }\n  }\n}\n\nexport default ListWithSearch;\n","import { defaultState } from \"../base/internal.js\";\nimport ListWithSearch from \"../base/ListWithSearch.js\";\nimport PlainFilterListBox from \"./PlainFilterListBox.js\";\nimport PlainInput from \"./PlainInput.js\";\n\n/**\n * ListWithSearch component in the Plain reference design system\n *\n * @inherits ListWithSearch\n * @part {PlainFilterListBox} list\n */\nclass PlainListWithSearch extends ListWithSearch {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      inputPartType: PlainInput,\n      listPartType: PlainFilterListBox,\n    });\n  }\n}\n\nexport default PlainListWithSearch;\n","import ReactiveElement from \"../core/ReactiveElement.js\";\nimport { firstRender, render } from \"./internal.js\";\n\n/**\n * Inactive item that helps group related menu items\n *\n * See [Menu](Menu) for sample usage.\n *\n * @inherits ReactiveElement\n */\nclass MenuSeparator extends ReactiveElement {\n  get disabled() {\n    return true;\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n    if (this[firstRender]) {\n      this.setAttribute(\"aria-hidden\", \"true\");\n    }\n  }\n}\n\nexport default MenuSeparator;\n","import { template } from \"../base/internal.js\";\nimport MenuSeparator from \"../base/MenuSeparator.js\";\nimport { templateFrom } from \"../core/htmlLiterals.js\";\n\n/**\n * MenuSeparator component in the Plain reference design system\n *\n * @inherits MenuSeparator\n */\nclass PlainMenuSeparator extends MenuSeparator {\n  get [template]() {\n    return templateFrom.html`\n      <style>\n        :host {\n          padding: 0 !important;\n        }\n\n        hr {\n          border-bottom-width: 0px;\n          border-color: #fff; /* Ends up as light gray */\n          border-top-width: 1px;\n          margin: 0.25em 0;\n        }\n      </style>\n      <hr>\n    `;\n  }\n}\n\nexport default PlainMenuSeparator;\n","import { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\";\nimport AriaListMixin from \"./AriaListMixin.js\";\nimport ComposedFocusMixin from \"./ComposedFocusMixin.js\";\nimport CursorAPIMixin from \"./CursorAPIMixin.js\";\nimport CursorInViewMixin from \"./CursorInViewMixin.js\";\nimport DirectionCursorMixin from \"./DirectionCursorMixin.js\";\nimport FocusVisibleMixin from \"./FocusVisibleMixin.js\";\nimport {\n  defaultState,\n  ids,\n  render,\n  scrollTarget,\n  setState,\n  state,\n  template,\n} from \"./internal.js\";\nimport ItemsAPIMixin from \"./ItemsAPIMixin.js\";\nimport ItemsCursorMixin from \"./ItemsCursorMixin.js\";\nimport ItemsMultiSelectMixin from \"./ItemsMultiSelectMixin.js\";\nimport ItemsTextMixin from \"./ItemsTextMixin.js\";\nimport KeyboardDirectionMixin from \"./KeyboardDirectionMixin.js\";\nimport KeyboardMixin from \"./KeyboardMixin.js\";\nimport KeyboardPagedCursorMixin from \"./KeyboardPagedCursorMixin.js\";\nimport KeyboardPrefixCursorMixin from \"./KeyboardPrefixCursorMixin.js\";\nimport LanguageDirectionMixin from \"./LanguageDirectionMixin.js\";\nimport MultiSelectAPIMixin from \"./MultiSelectAPIMixin.js\";\nimport MultiSelectToggleMixin from \"./MultiSelectToggleMixin.js\";\nimport MultiSelectValueAPIMixin from \"./MultiSelectValueAPIMixin.js\";\nimport SingleSelectAPIMixin from \"./SingleSelectAPIMixin.js\";\nimport SlotItemsMixin from \"./SlotItemsMixin.js\";\nimport TapCursorMixin from \"./TapCursorMixin.js\";\n\nconst Base = AriaListMixin(\n  ComposedFocusMixin(\n    CursorAPIMixin(\n      CursorInViewMixin(\n        DirectionCursorMixin(\n          FocusVisibleMixin(\n            ItemsAPIMixin(\n              ItemsCursorMixin(\n                ItemsMultiSelectMixin(\n                  ItemsTextMixin(\n                    KeyboardDirectionMixin(\n                      KeyboardMixin(\n                        KeyboardPagedCursorMixin(\n                          KeyboardPrefixCursorMixin(\n                            LanguageDirectionMixin(\n                              MultiSelectAPIMixin(\n                                MultiSelectToggleMixin(\n                                  MultiSelectValueAPIMixin(\n                                    SingleSelectAPIMixin(\n                                      SlotItemsMixin(\n                                        TapCursorMixin(ReactiveElement)\n                                      )\n                                    )\n                                  )\n                                )\n                              )\n                            )\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n);\n\n/**\n * Multiple-selection list box\n *\n * This component supports ARIA support and full keyboard navigation. See\n * [KeyboardDirectionMixin](KeyboardDirectionMixin),\n * [KeyboardPagedCursorMixin](KeyboardPagedCursorMixin), and\n * [KeyboardPrefixCursorMixin](KeyboardPrefixCursorMixin) for keyboard\n * details.\n *\n * @inherits ReactiveElement\n * @mixes AriaListMixin\n * @mixes ComposedFocusMixin\n * @mixes CursorInViewMixin\n * @mixes CursorAPIMixin\n * @mixes DirectionCursorMixin\n * @mixes FocusVisibleMixin\n * @mixes ItemsAPIMixin\n * @mixes ItemsCursorMixin\n * @mixes ItemsMultiSelectMixin\n * @mixes ItemsTextMixin\n * @mixes KeyboardDirectionMixin\n * @mixes KeyboardMixin\n * @mixes KeyboardPagedCursorMixin\n * @mixes KeyboardPrefixCursorMixin\n * @mixes LanguageDirectionMixin\n * @mixes MultiSelectAPIMixin\n * @mixes MultiSelectToggleMixin\n * @mixes MultiSelectValueAPIMixin\n * @mixes SingleSelectAPIMixin\n * @mixes SlotItemsMixin\n * @mixes TapCursorMixin\n */\nclass MultiSelectListBox extends Base {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      orientation: \"vertical\",\n    });\n  }\n\n  get orientation() {\n    return this[state].orientation;\n  }\n  set orientation(orientation) {\n    this[setState]({ orientation });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n\n    // Apply `active` style to the current item only.\n    if (changed.items || changed.currentIndex) {\n      const { currentIndex, items } = this[state];\n      if (items) {\n        items.forEach((item, index) => {\n          item.toggleAttribute(\"active\", index === currentIndex);\n        });\n      }\n    }\n\n    // Apply `selected` style to the selected items.\n    if (changed.items || changed.selectedItemFlags) {\n      const { items, selectedItemFlags } = this[state];\n      if (items && selectedItemFlags) {\n        items.forEach((item, index) => {\n          item.toggleAttribute(\"selected\", selectedItemFlags[index]);\n        });\n      }\n    }\n\n    // Update list orientation styling.\n    if (changed.orientation) {\n      const style =\n        this[state].orientation === \"vertical\"\n          ? {\n              display: \"block\",\n              flexDirection: \"\",\n              overflowX: \"hidden\",\n              overflowY: \"auto\",\n            }\n          : {\n              display: \"flex\",\n              flexDirection: \"row\",\n              overflowX: \"auto\",\n              overflowY: \"hidden\",\n            };\n      Object.assign(this[ids].container.style, style);\n    }\n  }\n\n  // @ts-ignore\n  get [scrollTarget]() {\n    return this[ids].container;\n  }\n\n  get [template]() {\n    const result = super[template] || fragmentFrom.html``;\n    result.content.append(fragmentFrom.html`\n      <style>\n        :host {\n          box-sizing: border-box;\n          cursor: default;\n          display: flex;\n          overflow: hidden; /* Container element is responsible for scrolling */\n          -webkit-tap-highlight-color: transparent;\n        }\n\n        #container {\n          display: flex;\n          flex: 1;\n          -webkit-overflow-scrolling: touch; /* for momentum scrolling */\n        }\n      </style>\n      <div id=\"container\" role=\"none\">\n        <slot></slot>\n      </div>\n    `);\n    return result;\n  }\n}\n\nexport default MultiSelectListBox;\n","import ReactiveElement from \"../core/ReactiveElement.js\"; // eslint-disable-line no-unused-vars\nimport {\n  raiseChangeEvents,\n  rendered,\n  setState,\n  state,\n  toggleSelectedFlag,\n} from \"./internal.js\";\nimport { selectedItemsToFlags } from \"./ItemsMultiSelectMixin.js\";\n\n/**\n * Exposes a public API for multiple selection on a list-like element.\n *\n * This mixin expects a component to provide an `items` Array of all elements in\n * the list. This mixin also expects the component to apply\n * [ItemsMultiSelectMixin](ItemsMultiSelectMixin) or otherwise define a compatible\n * `selectedItemFlags` and `selectedItems` state.\n *\n * Given the above, this mixin exposes a consistent public API for reading and\n * manipulating the current item as a multiple-selection. This includes public members\n * `selectedItemFlags` and `selectedItems`, selection navigation methods, and a\n * `selected-flags-changed` event.\n *\n * This mixin does not produce any user-visible effects to represent selection;\n * that is up to the component to provide.\n * *\n * @module MultiSelectAPIMixin\n * @param {Constructor<ReactiveElement>} Base\n */\nexport default function MultiSelectAPIMixin(Base) {\n  // The class prototype added by the mixin.\n  class MultiSelectAPI extends Base {\n    [rendered](/** @type {ChangedFlags} */ changed) {\n      if (super[rendered]) {\n        super[rendered](changed);\n      }\n\n      // Raise selected-flags-changed event\n      if (changed.selectedItemFlags && this[raiseChangeEvents]) {\n        /**\n         * Raised when the `selectedItemFlags` property changes.\n         *\n         * @event selecteditemflagschange\n         */\n        const event = new CustomEvent(\"selecteditemflagschange\", {\n          bubbles: true,\n        });\n        this.dispatchEvent(event);\n      }\n    }\n\n    /**\n     * An array of boolean values indicating which items are selected.\n     *\n     * @type {boolean[]}\n     */\n    get selectedItemFlags() {\n      return this[state].selectedItemFlags;\n    }\n    set selectedItemFlags(selectedItemFlags) {\n      this[setState]({ selectedItemFlags });\n    }\n\n    /**\n     * An array containing the subset of items which are currently selected.\n     *\n     * @type {ListItemElement[]}\n     */\n    get selectedItems() {\n      return this[state].selectedItems;\n    }\n    set selectedItems(selectedItems) {\n      const items = this[state].items;\n      const selectedItemFlags = selectedItemsToFlags(items, selectedItems);\n      this[setState]({ selectedItemFlags });\n    }\n\n    /**\n     * Toggles the indicated value in the `selectedItemFlags` array.\n     *\n     * @param {number} index - the position the `selectedItemFlags` array\n     * @param {boolean} [toggle] - if present, the flag will be set to\n     * this boolean value; if omitted, the flag will be toggled\n     */\n    toggleSelectedFlag(index, toggle) {\n      this[toggleSelectedFlag](index, toggle);\n    }\n  }\n\n  return MultiSelectAPI;\n}\n","import { indexOfItemContainingTarget } from \"../core/dom.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\"; // eslint-disable-line no-unused-vars\nimport {\n  firstRender,\n  keydown,\n  raiseChangeEvents,\n  render,\n  state,\n  toggleSelectedFlag,\n} from \"./internal.js\";\n\n/**\n * Basic keyboard/tap toggle UI for a multi-select list-like element.\n *\n * @module MultiSelectToggleMixin\n * @param {Constructor<ReactiveElement>} Base\n */\nexport default function MultiSelectToggleMixin(Base) {\n  // The class prototype added by the mixin.\n  return class MultiSelectToggle extends Base {\n    constructor() {\n      // @ts-ignore\n      super();\n\n      this.addEventListener(\"selectedchange\", (event) => {\n        this[raiseChangeEvents] = true;\n        // Find which item was selected, and update its selected flag.\n        const { target } = event;\n        const { items } = this[state];\n        if (items && target instanceof Node) {\n          const targetIndex = indexOfItemContainingTarget(items, target);\n          if (targetIndex >= 0) {\n            const { selected } = /** @type {any} */ (event).detail;\n            this[toggleSelectedFlag](targetIndex, selected);\n          }\n        }\n        this[raiseChangeEvents] = false;\n      });\n    }\n\n    // Pressing Space toggles selection on the active item.\n    [keydown](/** @type {KeyboardEvent} */ event) {\n      let handled;\n      switch (event.key) {\n        case \" \": {\n          const { currentIndex } = this[state];\n          if (currentIndex >= 0) {\n            this[toggleSelectedFlag](currentIndex);\n            handled = true;\n          }\n          break;\n        }\n      }\n\n      // Prefer mixin result if it's defined, otherwise use base result.\n      return handled || (super[keydown] && super[keydown](event));\n    }\n\n    [render](/** @type {ChangedFlags} */ changed) {\n      if (super[render]) {\n        super[render](changed);\n      }\n      if (this[firstRender]) {\n        Object.assign(this.style, {\n          touchAction: \"manipulation\", // for iOS Safari\n          mozUserSelect: \"none\",\n          msUserSelect: \"none\",\n          webkitUserSelect: \"none\",\n          userSelect: \"none\",\n        });\n      }\n    }\n  };\n}\n","import ReactiveElement from \"../core/ReactiveElement.js\"; // eslint-disable-line no-unused-vars\nimport { defaultState, setState, state, stateEffects } from \"./internal.js\";\n\n/**\n * Exposes a public API for the value of a multi-select list-like element.\n *\n * @module MultiSelectValueAPIMixin\n * @param {Constructor<ReactiveElement>} Base\n */\nexport default function MultiSelectValueAPIMixin(Base) {\n  // The class prototype added by the mixin.\n  class MultiSelectValueAPI extends Base {\n    // @ts-ignore\n    get [defaultState]() {\n      return Object.assign(super[defaultState] || {}, {\n        value: \"\",\n      });\n    }\n\n    [stateEffects](state, changed) {\n      const effects = super[stateEffects]\n        ? super[stateEffects](state, changed)\n        : {};\n\n      // Value tracks the value attribute on the selected item.\n      if (changed.selectedItems) {\n        const { selectedItems } = state;\n        const selectedValues = selectedItems\n          ? selectedItems.map((item) => item.getAttribute(\"value\"))\n          : [];\n        const value = selectedValues.filter((value) => value).join(\"\\n\");\n        Object.assign(effects, { value });\n      }\n\n      return effects;\n    }\n\n    /**\n     * The return-delimited list of value attributes of the selected itemss.\n     *\n     * Setting this value to a string will attempt to select the corresponding\n     * items. If one of the return-delimited values does not match a value\n     * attribute of a list item, it will be ignored.\n     *\n     * @type {string}\n     */\n    get value() {\n      return this[state].value;\n    }\n    set value(value) {\n      // Find set of items with the desired values.\n      const { items } = this[state];\n      const values = String(value).split(\"\\n\");\n      const selectedItemFlags = items.map((item) =>\n        values.includes(item.getAttribute(\"value\"))\n      );\n      this[setState]({ selectedItemFlags });\n    }\n  }\n\n  return MultiSelectValueAPI;\n}\n","import { template } from \"../base/internal.js\";\nimport MultiSelectListBox from \"../base/MultiSelectListBox.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\n\n/**\n * MultiSelectListBox component in the Plain reference design system\n *\n * @inherits MultiSelectListBox\n */\nclass PlainMultiSelectListBox extends MultiSelectListBox {\n  get [template]() {\n    const result = super[template];\n    result.content.append(\n      fragmentFrom.html`\n        <style>\n          :host {\n            border: 1px solid gray;\n            box-sizing: border-box;\n          }\n\n          ::slotted(*) {\n            padding: 0.25em;\n          }\n\n          ::slotted([active]) {\n            background: highlight;\n            color: highlighttext;\n          }\n\n          @media (pointer: coarse) {\n            ::slotted(*) {\n              padding: 1em;\n            }\n          }\n        </style>\n      `\n    );\n    return result;\n  }\n}\n\nexport default PlainMultiSelectListBox;\n","import { defaultState, setState, state, stateEffects } from \"./internal.js\";\nimport SpinBox from \"./SpinBox.js\";\n\n/**\n * Input with buttons to increase or decrease a numeric value\n *\n * @inherits SpinBox\n */\nclass NumberSpinBox extends SpinBox {\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name === \"max\") {\n      this.max = parseFloat(newValue);\n    } else if (name === \"min\") {\n      this.min = parseFloat(newValue);\n    } else if (name === \"step\") {\n      this.step = parseFloat(newValue);\n    } else {\n      super.attributeChangedCallback(name, oldValue, newValue);\n    }\n  }\n\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      max: null,\n      min: null,\n      step: 1,\n    });\n  }\n\n  /**\n   * Format the numeric value as a string.\n   *\n   * This is used after incrementing/decrementing the value to reformat the\n   * value as a string.\n   *\n   * @param {number} value\n   * @param {number} precision\n   */\n  formatValue(value, precision) {\n    return Number(value).toFixed(precision);\n  }\n\n  /**\n   * The maximum allowable value of the `value` property.\n   *\n   * @type {number|null}\n   * @default 1\n   */\n  get max() {\n    return this[state].max;\n  }\n  set max(max) {\n    this[setState]({ max });\n  }\n\n  /**\n   * The minimum allowable value of the `value` property.\n   *\n   * @type {number|null}\n   * @default 1\n   */\n  get min() {\n    return this[state].min;\n  }\n  set min(min) {\n    this[setState]({ min });\n  }\n\n  /**\n   * Parse the given string as a number.\n   *\n   * This is used to parse the current value before incrementing/decrementing\n   * it.\n   *\n   * @param {string} value\n   * @param {number} precision\n   */\n  parseValue(value, precision) {\n    const parsed = precision === 0 ? parseInt(value) : parseFloat(value);\n    return isNaN(parsed) ? 0 : parsed;\n  }\n\n  [stateEffects](state, changed) {\n    const effects = super[stateEffects];\n\n    // If step changed, calculate its precision (number of digits after\n    // the decimal).\n    if (changed.step) {\n      const { step } = state;\n      const decimalRegex = /\\.(\\d)+$/;\n      const match = decimalRegex.exec(String(step));\n      const precision = match && match[1] ? match[1].length : 0;\n      Object.assign(effects, { precision });\n    }\n\n    if (changed.max || changed.min || changed.value) {\n      // The value is valid if it falls between the min and max.\n      // TODO: We need a way to let other classes/mixins on the prototype chain\n      // contribute to validity -- if someone else thinks the value is invalid,\n      // we should respect that, even if the value falls within the min/max\n      // bounds.\n      const { max, min, precision, value } = state;\n      const parsed = parseInt(value, precision);\n      if (value !== \"\" && isNaN(parsed)) {\n        Object.assign(effects, {\n          valid: false,\n          validationMessage: \"Value must be a number\",\n        });\n      } else if (!(max === null || parsed <= max)) {\n        Object.assign(effects, {\n          valid: false,\n          validationMessage: `Value must be less than or equal to ${max}.`,\n        });\n      } else if (!(min === null || parsed >= min)) {\n        Object.assign(effects, {\n          valid: false,\n          validationMessage: `Value must be greater than or equal to ${min}.`,\n        });\n      } else {\n        Object.assign(effects, {\n          valid: true,\n          validationMessage: \"\",\n        });\n      }\n\n      // We can only go up if we're below max.\n      Object.assign(effects, {\n        canGoUp: isNaN(parsed) || state.max === null || parsed < state.max,\n      });\n\n      // We can only go down if we're above min.\n      Object.assign(effects, {\n        canGoDown: isNaN(parsed) || state.min === null || parsed > state.min,\n      });\n    }\n\n    return effects;\n  }\n\n  /**\n   * The amount by which the `value` will be incremented or decremented.\n   *\n   * The precision of the step (the number of digits after any decimal)\n   * determines how the spin box will format the number. The default `step`\n   * value of 1 has no decimals, so the `value` will be formatted as an integer.\n   * A `step` of 0.1 will format the `value` as a number with one decimal place.\n   *\n   * @type {number}\n   * @default 1\n   */\n  get step() {\n    return this[state].step;\n  }\n  set step(step) {\n    if (!isNaN(step)) {\n      this[setState]({ step });\n    }\n  }\n\n  /**\n   * Decrements the `value` by the amount of the `step`.\n   *\n   * If the result is still greater than the `max` value, this will force\n   * `value` to `max`.\n   */\n  stepDown() {\n    super.stepDown();\n    const { max, precision, value } = this[state];\n    let result = this.parseValue(value, precision) - this.step;\n    if (max !== null) {\n      result = Math.min(result, max);\n    }\n    const { min } = this[state];\n    if (min === null || result >= min) {\n      this.value = this.formatValue(result, precision);\n    }\n  }\n\n  /**\n   * Increments the `value` by the amount of the `step`.\n   *\n   * If the result is still smaller than the `min` value, this will force\n   * `value` to `min`.\n   */\n  stepUp() {\n    super.stepUp();\n    const { min, precision, value } = this[state];\n    let result = this.parseValue(value, precision) + this.step;\n    if (min !== null) {\n      result = Math.max(result, min);\n    }\n    const { max } = this[state];\n    if (max === null || result <= max) {\n      this.value = this.formatValue(result, precision);\n    }\n  }\n}\n\nexport default NumberSpinBox;\n","import NumberSpinBox from \"../base/NumberSpinBox.js\";\nimport PlainSpinBoxMixin from \"./PlainSpinBoxMixin.js\";\n\n/**\n * NumberSpinBox component in the Plain reference design system\n *\n * @inherits NumberSpinBox\n * @mixes PlainSpinBoxMixin\n */\nclass PlainNumberSpinBox extends PlainSpinBoxMixin(NumberSpinBox) {}\n\nexport default PlainNumberSpinBox;\n","import { templateFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\";\nimport AriaRoleMixin from \"./AriaRoleMixin.js\";\nimport CurrentMixin from \"./CurrentMixin.js\";\nimport DisabledMixin from \"./DisabledMixin.js\";\nimport { defaultState, template } from \"./internal.js\";\nimport SelectableMixin from \"./SelectableMixin.js\";\n\n/**\n * An option in a set of choices\n *\n * This is designed for use inside single-select components like\n * [DropdownList](DropdownList) that want to distinguish between an option being\n * the current item (the one the user is navigating with the keyboard, say) and\n * being the selected item (the one chosen by the user as the desired value for\n * a field).\n *\n * @inherits ReactiveElement\n * @mixes CurrentMixin\n * @mixes DisabledMixin\n * @mixes SelectableMixin\n */\nclass Option extends AriaRoleMixin(\n  CurrentMixin(DisabledMixin(SelectableMixin(ReactiveElement)))\n) {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      role: \"option\",\n    });\n  }\n\n  get [template]() {\n    return templateFrom.html`\n      <style>\n        :host {\n          display: block;\n        }\n      </style>\n      <slot></slot>\n    `;\n  }\n}\n\nexport default Option;\n","import { template } from \"../base/internal.js\";\nimport Option from \"../base/Option.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\n\n/**\n * An option in a list in the Plain reference design system\n *\n * @inherits Option\n */\nclass PlainChoice extends Option {\n  get [template]() {\n    const result = super[template];\n\n    // Replace default slot with icon + slot.\n    const defaultSlot = result.content.querySelector(\"slot:not([name])\");\n    if (defaultSlot) {\n      defaultSlot.replaceWith(fragmentFrom.html`\n        <svg id=\"checkmark\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"4 6 18 12\">\n          <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n          <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z\"/>\n        </svg>\n        <slot></slot>\n      `);\n    }\n\n    result.content.append(fragmentFrom.html`\n      <style>\n        :host {\n          white-space: nowrap;\n        }\n\n        #checkmark {\n          height: 1em;\n          visibility: hidden;\n          width: 1em;\n        }\n\n        :host([selected]) #checkmark {\n          visibility: visible;\n        }\n      </style>\n\n    `);\n\n    return result;\n  }\n}\n\nexport default PlainChoice;\n","import { defaultState } from \"../base/internal.js\";\nimport PopupButton from \"../base/PopupButton.js\";\nimport PopupToggleMixin from \"../base/PopupToggleMixin.js\";\nimport PlainBorderButton from \"./PlainBorderButton.js\";\nimport PlainPopup from \"./PlainPopup.js\";\n\n/**\n * PopupButton component in the Plain reference design system\n *\n * @inherits PopupButton\n * @part {PlainPopup} popup\n * @part {PlainBorderButton} source\n */\nclass PlainPopupButton extends PopupToggleMixin(PopupButton) {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      popupPartType: PlainPopup,\n      sourcePartType: PlainBorderButton,\n    });\n  }\n}\n\nexport default PlainPopupButton;\n","import { templateFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\";\nimport {\n  defaultState,\n  rendered,\n  setState,\n  state,\n  template,\n} from \"./internal.js\";\n\n/**\n * Spinning progress indicator\n *\n * This component is used by [PullToRefresh](PullToRefresh) as the default\n * indicator that a refresh operation is in progress.\n *\n * @inherits ReactiveElement\n */\nclass ProgressSpinner extends ReactiveElement {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      count: -1,\n      playing: true,\n      rotationsPerSecond: 10,\n    });\n  }\n\n  /**\n   * True if the progress spinner is currently spinning.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  get playing() {\n    return this[state].playing;\n  }\n  set playing(playing) {\n    this[setState]({ playing });\n  }\n\n  [rendered](/** @type {ChangedFlags} */ changed) {\n    super[rendered](changed);\n    if (changed.count || (changed.playing && this[state].playing)) {\n      tick(this);\n    }\n  }\n\n  get [template]() {\n    return templateFrom.html`\n      <style>\n        :host {\n          display: inline-block;\n        }\n      </style>\n      <slot></slot>\n    `;\n  }\n}\n\nfunction tick(/** @type {ProgressSpinner} */ element) {\n  // Complete a full rotation in a second (1000 milliseconds).\n  const delay = 1000 / element[state].rotationsPerSecond;\n  if (element.isConnected && element[state].playing) {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        element[setState]({\n          count: element[state].count + 1,\n        });\n      });\n    }, delay);\n  }\n}\n\nexport default ProgressSpinner;\n","import {\n  defaultState,\n  ids,\n  render,\n  state,\n  template,\n} from \"../base/internal.js\";\nimport ProgressSpinner from \"../base/ProgressSpinner.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\n\n/**\n * ProgressSpinner component in the Plain reference design system\n *\n * @inherits ProgressSpinner\n */\nclass PlainProgressSpinner extends ProgressSpinner {\n  // @ts-ignore\n  get [defaultState]() {\n    // The spinner has 12 discrete steps in its rotation.\n    return Object.assign(super[defaultState], {\n      rotationsPerSecond: 12,\n    });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n    if (changed.count) {\n      const step = 360 / this[state].rotationsPerSecond;\n      const angle = (this[state].count * step) % 360;\n      this[ids].spinner.style.transform = `rotate(${angle}deg)`;\n    }\n  }\n\n  get [template]() {\n    const result = super[template];\n\n    // Replace default slot with a spinner icon.\n    // Spinner SVG created from https://dribbble.com/shots/958711-Free-vector-iOS-spinners.\n    const defaultSlot = result.content.querySelector(\"slot:not([name])\");\n    if (defaultSlot) {\n      defaultSlot.replaceWith(fragmentFrom.html`\n        <style>\n          :host {\n            height: 1.25em;\n            width: 1.25em;\n          }\n        </style>\n        <svg\n          id=\"spinner\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 60.02 60.02\"\n        >\n          <defs>\n            <style>\n              .cls-1 {\n                opacity: 0.5;\n              }\n              .cls-2 {\n                opacity: 0.25;\n              }\n              .cls-3 {\n                opacity: 0.65;\n              }\n              .cls-4 {\n                opacity: 0.2;\n              }\n              .cls-5 {\n                opacity: 0.6;\n              }\n              .cls-6 {\n                opacity: 0.8;\n              }\n              .cls-7 {\n                opacity: 0.45;\n              }\n              .cls-8 {\n                opacity: 0.15;\n              }\n              .cls-9 {\n                opacity: 0.55;\n              }\n              .cls-10 {\n                opacity: 0.7;\n              }\n              .cls-11 {\n                opacity: 0.35;\n              }\n            </style>\n          </defs>\n          <title>Asset 1</title>\n          <g id=\"Layer_2\" data-name=\"Layer 2\">\n            <g id=\"Spinners\">\n              <path\n                class=\"cls-1\"\n                d=\"M33,12a3,3,0,0,1-3,3h0a3,3,0,0,1-3-3V3a3,3,0,0,1,3-3h0a3,3,0,0,1,3,3Z\"\n              />\n              <path\n                d=\"M33,57a3,3,0,0,1-3,3h0a3,3,0,0,1-3-3V48a3,3,0,0,1,3-3h0a3,3,0,0,1,3,3Z\"\n              />\n              <path\n                class=\"cls-2\"\n                d=\"M12,27a3,3,0,0,1,3,3h0a3,3,0,0,1-3,3H3a3,3,0,0,1-3-3H0a3,3,0,0,1,3-3Z\"\n              />\n              <path\n                class=\"cls-3\"\n                d=\"M57,27a3,3,0,0,1,3,3h0a3,3,0,0,1-3,3H48a3,3,0,0,1-3-3h0a3,3,0,0,1,3-3Z\"\n              />\n              <path\n                class=\"cls-4\"\n                d=\"M12.93,36.41a3,3,0,0,1,4.1,1.1h0a3,3,0,0,1-1.1,4.1L8.12,46.12A3,3,0,0,1,4,45H4a3,3,0,0,1,1.1-4.1Z\"\n              />\n              <path\n                class=\"cls-5\"\n                d=\"M51.9,13.9A3,3,0,0,1,56,15h0a3,3,0,0,1-1.1,4.1l-7.81,4.51a3,3,0,0,1-4.1-1.1h0a3,3,0,0,1,1.1-4.1Z\"\n              />\n              <path\n                class=\"cls-6\"\n                d=\"M36.41,47.09a3,3,0,0,1,1.1-4.1h0a3,3,0,0,1,4.1,1.1l4.51,7.81A3,3,0,0,1,45,56h0a3,3,0,0,1-4.1-1.1Z\"\n              />\n              <path\n                class=\"cls-7\"\n                d=\"M13.9,8.12A3,3,0,0,1,15,4h0a3,3,0,0,1,4.1,1.09l4.51,7.81a3,3,0,0,1-1.1,4.1h0a3,3,0,0,1-4.1-1.09Z\"\n              />\n              <path\n                class=\"cls-8\"\n                d=\"M18.43,44.1a3,3,0,0,1,4.1-1.1h0a3,3,0,0,1,1.1,4.1l-4.5,7.81A3,3,0,0,1,15,56h0a3,3,0,0,1-1.1-4.09Z\"\n              />\n              <path\n                class=\"cls-9\"\n                d=\"M40.89,5.11A3,3,0,0,1,45,4h0a3,3,0,0,1,1.1,4.09l-4.5,7.82a3,3,0,0,1-4.1,1.1h0a3,3,0,0,1-1.1-4.09Z\"\n              />\n              <path\n                class=\"cls-10\"\n                d=\"M44.1,41.59a3,3,0,0,1-1.1-4.1h0a3,3,0,0,1,4.1-1.1l7.81,4.51A3,3,0,0,1,56,45h0a3,3,0,0,1-4.09,1.11Z\"\n              />\n              <path\n                class=\"cls-11\"\n                d=\"M5.11,19.13A3,3,0,0,1,4,15H4a3,3,0,0,1,4.09-1.1l7.82,4.5a3,3,0,0,1,1.1,4.1h0a3,3,0,0,1-4.1,1.1Z\"\n              />\n            </g>\n          </g>\n        </svg>\n      `);\n    }\n\n    return result;\n  }\n}\n\nexport default PlainProgressSpinner;\n","import { templateFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\";\nimport { transmute } from \"../core/template.js\";\nimport EffectMixin from \"./EffectMixin.js\";\nimport { dampen } from \"./fractionalSelection.js\";\nimport {\n  defaultState,\n  firstRender,\n  ids,\n  raiseChangeEvents,\n  render,\n  rendered,\n  setState,\n  shadowRoot,\n  state,\n  stateEffects,\n  swipeTarget,\n  template,\n} from \"./internal.js\";\nimport { getScrollableElement } from \"./scrolling.js\";\nimport TouchSwipeMixin from \"./TouchSwipeMixin.js\";\n\nconst Base = EffectMixin(TouchSwipeMixin(ReactiveElement));\n\n/**\n * Lets the user refresh content with a swipe down gesture\n *\n * The user can trigger the refresh of data by swiping down until a particular\n * threshold has been reached.\n *\n * @inherits ReactiveElement\n * @mixes EffectMixin\n * @mixes TouchSwipeMixin\n * @part indicator - either of the pull or refreshing indicators\n * @part indicator-container - container for the refreshing indicators\n * @part refresh-header - the header area shown when the user pulls down\n * @part {div} pull-indicator - the element shown to let the user know they can pull down\n * @part {div} refreshing-indicator - the element shown during a refresh of the content\n */\nclass PullToRefresh extends Base {\n  // @ts-ignore\n  get [defaultState]() {\n    // Suppress transition effects on page load.\n    return Object.assign(super[defaultState], {\n      swipeFractionMin: 0, // Can't swipe up, only down\n      pullIndicatorPartType: \"div\",\n      pullTriggeredRefresh: false,\n      refreshing: false,\n      refreshingIndicatorPartType: \"div\",\n      scrollPullDistance: null,\n      scrollPullMaxReached: false,\n      swipeAxis: \"vertical\",\n    });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n\n    renderParts(this[shadowRoot], this[state], changed);\n\n    if (this[firstRender]) {\n      // Listen to scroll events in case the user scrolls up past the page's top.\n      let scrollTarget = getScrollableElement(this) || window;\n      scrollTarget.addEventListener(\"scroll\", async () => {\n        // We might normally call requestAnimationFrame in a scroll handler, but\n        // in this case that could cause our scroll handling to run after the user\n        // has scrolled away from the top.\n        this[raiseChangeEvents] = true;\n        // Desktop and Mobile Safari don't agree on how to expose document\n        // scrollTop, so we use window.pageYOffset.\n        // See https://stackoverflow.com/questions/2506958/how-to-find-in-javascript-the-current-scroll-offset-in-mobile-safari-iphon\n        const scrollTop =\n          scrollTarget instanceof Window\n            ? window.pageYOffset\n            : scrollTarget.scrollTop;\n        await handleScrollPull(this, scrollTop);\n        this[raiseChangeEvents] = false;\n      });\n    }\n\n    if (changed.refreshing) {\n      const { refreshing } = this[state];\n      const refreshingIndicator = this[ids].refreshingIndicator;\n      refreshingIndicator.style.visibility = refreshing ? \"visible\" : \"hidden\";\n      if (\"playing\" in this[ids].refreshingIndicator) {\n        /** @type {any} */ (refreshingIndicator).playing = refreshing;\n      }\n    }\n\n    if (changed.enableEffects || changed.refreshing || changed.swipeFraction) {\n      const { enableEffects, refreshing, swipeFraction } = this[state];\n      const swipingDown = swipeFraction != null && swipeFraction > 0;\n      let y = getTranslationForSwipeFraction(this[state], this[swipeTarget]);\n      if (refreshing) {\n        y = Math.max(y, getSwipeThreshold(this));\n      }\n      const showTransition = enableEffects && !swipingDown;\n      Object.assign(this.style, {\n        transform: `translate3D(0, ${y}px, 0)`,\n        transition: showTransition ? \"transform 0.25s\" : null,\n      });\n    }\n\n    if (\n      changed.pullTriggeredRefresh ||\n      changed.refreshing ||\n      changed.scrollPullDistance ||\n      changed.swipeFraction\n    ) {\n      const {\n        pullTriggeredRefresh,\n        refreshing,\n        scrollPullDistance,\n        swipeFraction,\n      } = this[state];\n      const swipingDown = swipeFraction != null && swipeFraction > 0;\n      const scrollingDown = !!scrollPullDistance;\n      const pullingDown = swipingDown || scrollingDown;\n      const showPullIndicator =\n        !refreshing && !pullTriggeredRefresh && pullingDown;\n      this[ids].pullIndicator.style.visibility = showPullIndicator\n        ? \"visible\"\n        : \"hidden\";\n    }\n  }\n\n  [rendered](/** @type {ChangedFlags} */ changed) {\n    super[rendered](changed);\n\n    if (\n      this[state].swipeFraction > 0 &&\n      !this[state].refreshing &&\n      !this[state].pullTriggeredRefresh\n    ) {\n      const y = getTranslationForSwipeFraction(this[state], this[swipeTarget]);\n      if (y >= getSwipeThreshold(this)) {\n        // User has dragged element down far enough to trigger a refresh.\n        this.refreshing = true;\n      }\n    } else if (changed.refreshing) {\n      if (this[raiseChangeEvents]) {\n        /**\n         * Raised when the `refreshing` state changes.\n         *\n         * @event refreshingchange\n         */\n        const event = new CustomEvent(\"refreshingchange\", {\n          bubbles: true,\n          detail: {\n            refreshing: this[state].refreshing,\n          },\n        });\n        this.dispatchEvent(event);\n      }\n    }\n  }\n\n  /**\n   * The class or tag used to create the `pull-indicator` part – the\n   * element that lets the user know they can pull to refresh.\n   *\n   * By default, this is a down arrow icon.\n   *\n   * @type {PartDescriptor}\n   */\n  get pullIndicatorPartType() {\n    return this[state].pullIndicatorPartType;\n  }\n  set pullIndicatorPartType(pullIndicatorPartType) {\n    this[setState]({ pullIndicatorPartType });\n  }\n\n  get refreshing() {\n    return this[state].refreshing;\n  }\n  set refreshing(refreshing) {\n    this[setState]({ refreshing });\n  }\n\n  /**\n   * The class or tag used to create the `refreshing-indicator` part\n   * – the element shown to let the user know the element is currently\n   * refreshing.\n   *\n   * @type {PartDescriptor}\n   * @default ProgressSpinner\n   */\n  get refreshingIndicatorPartType() {\n    return this[state].refreshingIndicatorPartType;\n  }\n  set refreshingIndicatorPartType(refreshingIndicatorPartType) {\n    this[setState]({ refreshingIndicatorPartType });\n  }\n\n  [stateEffects](state, changed) {\n    const effects = super[stateEffects](state, changed);\n\n    // We use a pullTriggeredRefresh flag to track whether the current pull\n    // gesture has already triggered a refresh. If the user pulls down far\n    // enough to trigger a refresh, and the refresh completes while the user is\n    // still pulling down, we don't want further pulling to trigger a second\n    // refresh.\n    if (changed.refreshing || changed.swipeFraction) {\n      const { refreshing, swipeFraction } = state;\n      if (changed.refreshing && refreshing) {\n        // We've started a refresh; set flag.\n        Object.assign(effects, {\n          pullTriggeredRefresh: true,\n        });\n      } else if (swipeFraction === null && !state.refreshing) {\n        // We're neither pulling nor refreshing, so reset flag.\n        Object.assign(effects, {\n          pullTriggeredRefresh: false,\n        });\n      }\n    }\n\n    return effects;\n  }\n\n  get [template]() {\n    const result = templateFrom.html`\n      <style>\n        :host {\n          display: block;\n        }\n\n        [part~=\"refresh-header\"] {\n          align-items: center;\n          display: flex;\n          flex-direction: column-reverse;\n          height: 100vh;\n          left: 0;\n          position: absolute;\n          top: 0;\n          transform: translateY(-100%);\n          width: 100%;\n        }\n\n        [part~=\"indicator-container\"] {\n          align-items: center;\n          box-sizing: border-box;\n          display: grid;\n          justify-items: center;\n        }\n\n        [part~=\"indicator\"] {\n          grid-column: 1;\n          grid-row: 1;\n        }\n      </style>\n\n      <div id=\"refreshHeader\" part=\"refresh-header\">\n        <div id=\"indicatorContainer\" part=\"indicator-container\">\n          <div id=\"pullIndicator\" part=\"indicator pull-indicator\"></div>\n          <div id=\"refreshingIndicator\" part=\"indicator refreshing-indicator\"></div>\n        </div>\n      </div>\n      <slot></slot>\n    `;\n\n    renderParts(result.content, this[state]);\n\n    return result;\n  }\n}\n\n/**\n * Calculate how far the user must drag before we trigger a refresh.\n *\n * @private\n * @param {PullToRefresh} element\n */\nfunction getSwipeThreshold(element) {\n  const indicatorContainer = element[ids].indicatorContainer;\n  return indicatorContainer instanceof HTMLElement\n    ? indicatorContainer.offsetHeight\n    : 0;\n}\n\n/**\n * For a given swipe fraction (percentage of the element's swipe target's\n * height), return the distance of the vertical translation we should apply to\n * the swipe target.\n *\n * @private\n * @param {PlainObject} state\n * @param {HTMLElement} swipeTarget\n */\nfunction getTranslationForSwipeFraction(state, swipeTarget) {\n  const { swipeFraction, scrollPullDistance, scrollPullMaxReached } = state;\n\n  // When damping, we halve the swipe fraction so the user has to drag twice as\n  // far to get the usual damping. This produces the feel of a tighter, less\n  // elastic surface.\n  let result = swipeFraction\n    ? swipeTarget.offsetHeight * dampen(swipeFraction / 2)\n    : 0;\n\n  if (!scrollPullMaxReached && scrollPullDistance) {\n    result += scrollPullDistance;\n  }\n\n  return result;\n}\n\n/**\n * If a user flicks down to quickly scroll up, and scrolls past the top of the\n * page, the area above the page may be shown briefly. We use that opportunity\n * to show the user the refresh header so they'll realize they can pull to\n * refresh. We call this operation a \"scroll pull\". It works a little like a\n * real touch drag, but cannot trigger a refresh.\n *\n * We can only handle a scroll pull in a browser like Mobile Safari that gives\n * us scroll events past the top of the page.\n *\n * @private\n * @param {ReactiveElement} element\n * @param {number} scrollTop\n */\nasync function handleScrollPull(element, scrollTop) {\n  if (scrollTop < 0) {\n    // Negative scroll top means we're probably in WebKit.\n    // Start a scroll pull operation.\n    let scrollPullDistance = -scrollTop;\n    if (\n      element[state].scrollPullDistance &&\n      !element[state].scrollPullMaxReached &&\n      scrollPullDistance < element[state].scrollPullDistance\n    ) {\n      // The negative scroll events have started to head back to zero (most\n      // likely because the user let go and stopped scrolling), so we've reached\n      // the maximum extent of the scroll pull. From this point on, we want to\n      // stop our own translation effect and let the browser smoothly snap the\n      // page back to the top (zero) scroll position. If we don't do that, we'll\n      // be fighting with the browser effect, and the result will not be smooth.\n      element[setState]({ scrollPullMaxReached: true });\n    }\n    await element[setState]({ scrollPullDistance });\n  } else if (element[state].scrollPullDistance !== null) {\n    // We've scrolled back into zero/positive territory, i.e., at or below the\n    // top of the page, so the scroll pull has finished.\n    await element[setState]({\n      scrollPullDistance: null,\n      scrollPullMaxReached: false,\n    });\n  }\n}\n\n/**\n * Render parts for the template or an instance.\n *\n * @private\n * @param {DocumentFragment} root\n * @param {PlainObject} state\n * @param {ChangedFlags} [changed]\n */\nfunction renderParts(root, state, changed) {\n  if (!changed || changed.pullIndicatorPartType) {\n    const { pullIndicatorPartType } = state;\n    const pullIndicator = root.getElementById(\"pullIndicator\");\n    if (pullIndicator) {\n      transmute(pullIndicator, pullIndicatorPartType);\n    }\n  }\n  if (!changed || changed.refreshingIndicatorPartType) {\n    const { refreshingIndicatorPartType } = state;\n    const refreshingIndicator = root.getElementById(\"refreshingIndicator\");\n    if (refreshingIndicator) {\n      transmute(refreshingIndicator, refreshingIndicatorPartType);\n    }\n  }\n}\n\nexport default PullToRefresh;\n","import { defaultState, template } from \"../base/internal.js\";\nimport PullToRefresh from \"../base/PullToRefresh.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport { replace } from \"../core/template.js\";\nimport PlainProgressSpinner from \"./PlainProgressSpinner.js\";\n\n// Template for the default down arrow shown while pulling.\n\n/**\n * PullToRefresh component in the Plain reference design system\n *\n * @inherits PullToRefresh\n * @part {PlainProgressSpinner} refreshing-indicator\n */\nclass PlainPullToRefresh extends PullToRefresh {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      refreshingIndicatorPartType: PlainProgressSpinner,\n      pullIndicatorPartType: \"svg\",\n    });\n  }\n\n  get [template]() {\n    const result = super[template];\n\n    // Use a default down arrow icon as the pull indicator.\n    const pullIndicator = result.content.querySelector(\n      '[part~=\"pull-indicator\"]'\n    );\n    const arrow = fragmentFrom.html`\n      <svg\n        viewBox=\"0 0 24 24\"\n        style=\"fill: #404040; height: 24px; width: 24px;\"\n      >\n        <path\n          d=\"M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z\"\n        />\n      </svg>\n    `.firstElementChild;\n    if (pullIndicator && arrow) {\n      replace(pullIndicator, arrow);\n    }\n\n    result.content.append(\n      fragmentFrom.html`\n        <style>\n          [part~=\"indicator-container\"] {\n            padding: 1em;\n          }\n        </style>\n      `\n    );\n    return result;\n  }\n}\n\nexport default PlainPullToRefresh;\n","import { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport CrossfadeStage from \"./CrossfadeStage.js\";\nimport { defaultState, template } from \"./internal.js\";\nimport TimerCursorMixin from \"./TimerCursorMixin.js\";\n\nconst Base = TimerCursorMixin(CrossfadeStage);\n\n/**\n * Slideshow with a simple crossfade transition\n *\n * [A basic slideshow](/demos/slideshow.html)\n *\n * By default the slideshow will immediately begin playing when it is connected\n * to the document, and then advance every 3 seconds.\n *\n * This component provides no interactivity of its own. For an interactive\n * version, see [SlideshowWithPlayControls](SlideshowWithPlayControls) or\n * [CarouselSlideshow](CarouselSlideshow). To incorporate slideshow behavior\n * into a component of your own, apply\n * [TimerCursorMixin](TimerCursorMixin).\n *\n * @inherits CrossfadeStage\n * @mixes TimerCursorMixin\n */\nclass Slideshow extends Base {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      cursorOperationsWrap: true,\n      cursorTimerDuration: 3000,\n      playing: true,\n      transitionDuration: 1000,\n    });\n  }\n\n  get [template]() {\n    const result = super[template];\n\n    result.content.append(fragmentFrom.html`\n      <style>\n        #crossfadeContainer {\n          align-items: stretch;\n          justify-content: stretch;\n        }\n      </style>\n    `);\n\n    return result;\n  }\n}\n\nexport default Slideshow;\n","import { forwardFocus } from \"../core/dom.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\"; // eslint-disable-line no-unused-vars\nimport { transmute } from \"../core/template.js\";\nimport Button from \"./Button.js\";\nimport {\n  defaultState,\n  goNext,\n  goPrevious,\n  ids,\n  keydown,\n  render,\n  setState,\n  shadowRoot,\n  state,\n} from \"./internal.js\";\n\nconst wrap = Symbol(\"wrap\");\n\n/**\n * Adds buttons for managing playback of a slideshow, audio, etc.\n *\n * [Play controls let the user go back, pause/resume, or forward](/demos/slideshowWithPlayControls.html)\n *\n * @module PlayControlsMixin\n * @param {Constructor<ReactiveElement>} Base\n * @part {Button} control-button - any of the buttons that control playback\n * @part next-button - the button that navigates to the next item\n * @part play-button - the button that starts or pauses playback\n * @part previous-button - the button that navigates to the previous item\n */\nexport default function PlayControlsMixin(Base) {\n  // The class prototype added by the mixin.\n  class PlayControls extends Base {\n    /**\n     * The class or tag used to create the `control-button` parts –\n     * the play control buttons.\n     *\n     * @type {PartDescriptor}\n     * @default Button\n     */\n    get controlButtonPartType() {\n      return this[state].controlButtonPartType;\n    }\n    set controlButtonPartType(controlButtonPartType) {\n      this[setState]({ controlButtonPartType });\n    }\n\n    // @ts-ignore\n    get [defaultState]() {\n      return Object.assign(super[defaultState] || {}, {\n        controlButtonPartType: Button,\n      });\n    }\n\n    // Pressing Space is the same as clicking the button.\n    [keydown](/** @type {KeyboardEvent} */ event) {\n      let handled;\n\n      switch (event.key) {\n        case \" \":\n          this.click();\n          handled = true;\n          break;\n      }\n\n      // Prefer mixin result if it's defined, otherwise use base result.\n      return handled || (super[keydown] && super[keydown](event));\n    }\n\n    [render](/** @type {ChangedFlags} */ changed) {\n      if (changed.arrowButtonPartType) {\n        const previousButton = this[ids].previousButton;\n        if (previousButton instanceof HTMLElement) {\n          // Turn off focus handling for old previous button.\n          forwardFocus(previousButton, null);\n        }\n        const playButton = this[ids].playButton;\n        if (playButton instanceof HTMLElement) {\n          // Turn off focus handling for old play button.\n          forwardFocus(playButton, null);\n        }\n        const nextButton = this[ids].nextButton;\n        if (nextButton instanceof HTMLElement) {\n          // Turn off focus handling for old next button.\n          forwardFocus(nextButton, null);\n        }\n      }\n\n      if (super[render]) {\n        super[render](changed);\n      }\n\n      renderParts(this[shadowRoot], this[state], changed);\n\n      if (changed.controlButtonPartType) {\n        const { nextButton, playButton, previousButton } = this[ids];\n        previousButton.addEventListener(\"click\", (event) => {\n          this[goPrevious]();\n          event.stopPropagation();\n        });\n        playButton.addEventListener(\"click\", (event) => {\n          if (!this.playing) {\n            this.play();\n          } else {\n            this.pause();\n          }\n          event.stopPropagation();\n        });\n        nextButton.addEventListener(\"click\", (event) => {\n          this[goNext]();\n          event.stopPropagation();\n        });\n\n        // Keep focus on host.\n        if (previousButton instanceof HTMLElement) {\n          forwardFocus(previousButton, this);\n        }\n        if (playButton instanceof HTMLElement) {\n          forwardFocus(playButton, this);\n        }\n        if (nextButton instanceof HTMLElement) {\n          forwardFocus(nextButton, this);\n        }\n      }\n    }\n\n    /**\n     * Destructively wrap a node with elements for play controls.\n     *\n     * @param {Element} target - the element that should be wrapped by play controls\n     */\n    [wrap](target) {\n      const playControls = fragmentFrom.html`\n        <style>\n          [part~=\"button-container\"] {\n            bottom: 0;\n            position: absolute;\n            width: 100%;\n            z-index: 1;\n          }\n\n          #playControlsContainer {\n            display: grid;\n            flex: 1;\n          }\n        </style>\n\n        <div part=\"button-container\">\n          <div\n            part=\"control-button previous-button\"\n            id=\"previousButton\"\n            aria-hidden=\"true\"\n            tabindex=\"-1\"\n          >\n            <slot name=\"previousButton\"></slot>\n          </div>\n          <div\n            part=\"control-button play-button\"\n            id=\"playButton\"\n            aria-hidden=\"true\"\n            tabindex=\"-1\"\n          >\n            <slot name=\"playButton\"></slot>\n          </div>\n          <div\n            part=\"control-button next-button\"\n            id=\"nextButton\"\n            aria-hidden=\"true\"\n            tabindex=\"-1\"\n          >\n            <slot name=\"nextButton\"></slot>\n          </div>\n        </div>\n\n        <div id=\"playControlsContainer\" role=\"none\"></div>\n      `;\n\n      renderParts(playControls, this[state]);\n\n      // Wrap the target with the play controls.\n      const container = playControls.getElementById(\"playControlsContainer\");\n      if (container) {\n        target.replaceWith(playControls);\n        container.append(target);\n      }\n    }\n  }\n\n  return PlayControls;\n}\n\n/**\n * Render parts for the template or an instance.\n *\n * @private\n * @param {DocumentFragment} root\n * @param {PlainObject} state\n * @param {ChangedFlags} [changed]\n */\nfunction renderParts(root, state, changed) {\n  if (!changed || changed.controlButtonPartType) {\n    const { controlButtonPartType } = state;\n    const controlButtons = root.querySelectorAll('[part~=\"control-button\"]');\n    controlButtons.forEach((controlButton) =>\n      transmute(controlButton, controlButtonPartType)\n    );\n  }\n}\n\nPlayControlsMixin.wrap = wrap;\n","import AriaListMixin from \"./AriaListMixin.js\";\nimport DirectionCursorMixin from \"./DirectionCursorMixin.js\";\nimport FocusVisibleMixin from \"./FocusVisibleMixin.js\";\nimport {\n  firstRender,\n  raiseChangeEvents,\n  render,\n  template,\n} from \"./internal.js\";\nimport KeyboardDirectionMixin from \"./KeyboardDirectionMixin.js\";\nimport KeyboardMixin from \"./KeyboardMixin.js\";\nimport LanguageDirectionMixin from \"./LanguageDirectionMixin.js\";\nimport PlayControlsMixin from \"./PlayControlsMixin.js\";\nimport Slideshow from \"./Slideshow.js\";\nimport SwipeDirectionMixin from \"./SwipeDirectionMixin.js\";\nimport TouchSwipeMixin from \"./TouchSwipeMixin.js\";\nimport TrackpadSwipeMixin from \"./TrackpadSwipeMixin.js\";\n\nconst Base = AriaListMixin(\n  DirectionCursorMixin(\n    FocusVisibleMixin(\n      KeyboardDirectionMixin(\n        KeyboardMixin(\n          LanguageDirectionMixin(\n            PlayControlsMixin(\n              SwipeDirectionMixin(\n                TouchSwipeMixin(TrackpadSwipeMixin(Slideshow))\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n);\n\n/**\n * Slideshow with buttons for controlling playback\n *\n * [Play controls let the user go back, pause/resume, or forward](/demos/slideshowWithPlayControls.html)\n *\n * This component is simply a [Slideshow](./Slideshow) that uses\n * [PlayControlsMixin](PlayControlsMixin) to add buttons for controlling\n * slideshow playback.\n *\n * For a variation that uses standard carousel controls (arrows and page dots),\n * see [CarouselSlideshow](CarouselSlideshow). For a more basic variation with\n * no controls, see [Slideshow](Slideshow).\n *\n * @inherits Slideshow\n * @mixes AriaListMixin\n * @mixes DirectionCursorMixin\n * @mixes FocusVisibleMixin\n * @mixes KeyboardDirectionMixin\n * @mixes KeyboardMixin\n * @mixes LanguageDirectionMixin\n * @mixes PlayControlsMixin\n * @mixes SwipeDirectionMixin\n * @mixes TouchSwipeMixin\n * @mixes TrackpadSwipeMixin\n */\nclass SlideshowWithPlayControls extends Base {\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n    if (this[firstRender]) {\n      // Clicking the slideshow toggles the playing state.\n      this.addEventListener(\"click\", () => {\n        this[raiseChangeEvents] = true;\n        // @ts-ignore\n        this.playing = !this.playing;\n        this[raiseChangeEvents] = false;\n      });\n    }\n  }\n\n  get [template]() {\n    const result = super[template];\n    const crossfadeContainer = result.content.querySelector(\n      \"#crossfadeContainer\"\n    );\n    /** @type {any} */ const cast = this;\n    cast[PlayControlsMixin.wrap](crossfadeContainer);\n    return result;\n  }\n}\n\nexport default SlideshowWithPlayControls;\n","import { ids, render, state, template } from \"../base/internal.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\"; // eslint-disable-line no-unused-vars\n\n/**\n * PlayControlsMixin design in the Plain reference design system\n *\n * @module PlainPlayControlsMixin\n * @param {Constructor<ReactiveElement>} Base\n * @part control-icon - any of the icons shown in the control buttons\n * @part next-icon - icon for the next button\n * @part paused-icon - icon shown when the element is paused\n * @part playing-icon - icon shown when the element is playing\n * @part previous-icon - icon for the previous button\n */\nexport default function PlainPlayControlsMixin(Base) {\n  return class PlainPlayControls extends Base {\n    [render](/** @type {ChangedFlags} */ changed) {\n      super[render](changed);\n\n      // Show playing icon if paused; paused icon if playing.\n      if (changed.playing) {\n        const { playing } = this[state];\n        this[ids].pausedIcon.style.display = playing ? \"none\" : \"\";\n        this[ids].playingIcon.style.display = playing ? \"\" : \"none\";\n      }\n\n      // Flip the icons for right-to-left.\n      if (changed.rightToLeft) {\n        const rightToLeft = this[state].rightToLeft;\n        const transform = rightToLeft ? \"rotate(180deg)\" : \"\";\n        this[ids].nextIcon.style.transform = transform;\n        this[ids].previousIcon.style.transform = transform;\n      }\n    }\n\n    get [template]() {\n      const result = super[template];\n\n      // Insert our icons into the button slots.\n      const previousButton = result.content.querySelector(\n        'slot[name=\"previousButton\"]'\n      );\n      if (previousButton) {\n        previousButton.append(\n          fragmentFrom.html`\n            <svg\n              id=\"previousIcon\"\n              part=\"control-icon previous-icon\"\n              class=\"icon\"\n              viewBox=\"0 0 24 24\"\n              preserveAspectRatio=\"xMidYMid meet\"\n            >\n              <g id=\"skip-previous\">\n                <path d=\"M6 6h2v12H6zm3.5 6l8.5 6V6z\" />\n              </g>\n            </svg>\n          `\n        );\n      }\n      const playButton = result.content.querySelector(\n        'slot[name=\"playButton\"]'\n      );\n      if (playButton) {\n        playButton.append(\n          fragmentFrom.html`\n            <svg\n              id=\"playingIcon\"\n              part=\"control-icon playing-icon\"\n              class=\"icon\"\n              viewBox=\"0 0 24 24\"\n              preserveAspectRatio=\"xMidYMid meet\"\n            >\n              <g id=\"pause-circle-outline\">\n                <path\n                  d=\"M9 16h2V8H9v8zm3-14C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm1-4h2V8h-2v8z\"\n                ></path>\n              </g>\n            </svg>\n            <svg\n              id=\"pausedIcon\"\n              part=\"control-icon paused-icon\"\n              class=\"icon\"\n              viewBox=\"0 0 24 24\"\n              preserveAspectRatio=\"xMidYMid meet\"\n            >\n              <g id=\"play-circle-outline\">\n                <path\n                  d=\"M10 16.5l6-4.5-6-4.5v9zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"\n                ></path>\n              </g>\n            </svg>\n          `\n        );\n      }\n      const nextButton = result.content.querySelector(\n        'slot[name=\"nextButton\"]'\n      );\n      if (nextButton) {\n        nextButton.append(\n          fragmentFrom.html`\n            <svg\n              id=\"nextIcon\"\n              part=\"control-icon next-icon\"\n              class=\"icon\"\n              viewBox=\"0 0 24 24\"\n              preserveAspectRatio=\"xMidYMid meet\"\n            >\n              <g id=\"skip-next\">\n                <path d=\"M6 18l8.5-6L6 6v12zM16 6v12h2V6h-2z\" />\n              </g>\n            </svg>\n          `\n        );\n      }\n\n      result.content.append(\n        fragmentFrom.html`\n          <style>\n            [part~=\"button-container\"] {\n              box-sizing: border-box;\n              padding: 0.5em;\n              text-align: center;\n            }\n\n            [part~=\"control-button\"] {\n              fill: rgba(255, 255, 255, 0.5);\n              transition: fill 0.5s;\n              vertical-align: middle;\n            }\n            :host(:hover) [part~=\"control-button\"] {\n              fill: rgba(255, 255, 255, 0.7);\n            }\n            [part~=\"control-button\"]:hover {\n              fill: rgba(255, 255, 255, 0.85);\n            }\n            [part~=\"control-button\"]:active {\n              fill: white;\n            }\n\n            [part~=\"control-icon\"] {\n              height: 30px;\n              width: 30px;\n            }\n\n            [part~=\"playing-icon\"],\n            [part~=\"paused-icon\"] {\n              height: 40px;\n              width: 40px;\n            }\n          </style>\n        `\n      );\n\n      return result;\n    }\n  };\n}\n","import SlideshowWithPlayControls from \"../base/SlideshowWithPlayControls.js\";\nimport PlainPlayControlsMixin from \"./PlainPlayControlsMixin.js\";\n\n/**\n * SlideshowWithPlayControls component in the Plain reference design system\n *\n * @inherits SlideshowWithPlayControls\n */\nclass PlainSlideshowWithPlayControls extends PlainPlayControlsMixin(\n  SlideshowWithPlayControls\n) {}\n\nexport default PlainSlideshowWithPlayControls;\n","import AriaListMixin from \"./AriaListMixin.js\";\nimport DirectionCursorMixin from \"./DirectionCursorMixin.js\";\nimport FocusVisibleMixin from \"./FocusVisibleMixin.js\";\nimport { stateEffects } from \"./internal.js\";\nimport KeyboardDirectionMixin from \"./KeyboardDirectionMixin.js\";\nimport KeyboardMixin from \"./KeyboardMixin.js\";\nimport SlidingStage from \"./SlidingStage.js\";\nimport SwipeDirectionMixin from \"./SwipeDirectionMixin.js\";\nimport TouchSwipeMixin from \"./TouchSwipeMixin.js\";\nimport TrackpadSwipeMixin from \"./TrackpadSwipeMixin.js\";\n\nconst Base = AriaListMixin(\n  DirectionCursorMixin(\n    FocusVisibleMixin(\n      KeyboardDirectionMixin(\n        KeyboardMixin(\n          SwipeDirectionMixin(TouchSwipeMixin(TrackpadSwipeMixin(SlidingStage)))\n        )\n      )\n    )\n  )\n);\n\n/**\n * Simple carousel with no visible UI controls\n *\n * Allows a user to navigate a horizontal set of items with touch, mouse,\n * keyboard, or trackpad. Shows a sliding effect when moving between items.\n *\n * @inherits SlidingStage\n * @mixes AriaListMixin\n * @mixes DirectionCursorMixin\n * @mixes FocusVisibleMixin\n * @mixes KeyboardDirectionMixin\n * @mixes KeyboardMixin\n * @mixes SwipeDirectionMixin\n * @mixes TouchSwipeMixin\n * @mixes TrackpadSwipeMixin\n */\nclass SlidingPages extends Base {\n  [stateEffects](state, changed) {\n    const effects = super[stateEffects](state, changed);\n\n    // Have swipeAxis follow orientation.\n    if (changed.orientation) {\n      Object.assign(effects, {\n        swipeAxis: state.orientation,\n      });\n    }\n\n    return effects;\n  }\n}\n\nexport default SlidingPages;\n","import SpinBox from \"../base/SpinBox.js\";\nimport PlainSpinBoxMixin from \"./PlainSpinBoxMixin.js\";\n\n/**\n * SpinBox component in the Plain reference design system\n *\n * @inherits SpinBox\n * @mixes PlainSpinBoxMixin\n */\nclass PlainSpinBox extends PlainSpinBoxMixin(SpinBox) {}\n\nexport default PlainSpinBox;\n","import Button from \"./Button.js\";\nimport FocusVisibleMixin from \"./FocusVisibleMixin.js\";\nimport { defaultState, setState, state } from \"./internal.js\";\nimport LanguageDirectionMixin from \"./LanguageDirectionMixin.js\";\nimport SelectableMixin from \"./SelectableMixin.js\";\nimport SlotContentMixin from \"./SlotContentMixin.js\";\n\nconst Base = FocusVisibleMixin(\n  LanguageDirectionMixin(SelectableMixin(SlotContentMixin(Button)))\n);\n\n/**\n * Generic tab button with a text label\n *\n * This component is used by [Tabs](Tabs), which by default will generate an\n * instance of `TabButton` for each panel in a set of tab panels.\n *\n * @inherits WrappedStandardElement\n * @mixes FocusVisibleMixin\n * @mixes LanguageDirectionMixin\n * @mixes SelectableMixin\n * @mixes SlotContentMixin\n */\nclass TabButton extends Base {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      position: \"top\",\n    });\n  }\n\n  /**\n   * The position of the tab strip with respect to the associated tab panels.\n   *\n   * Setting this property does not actually change the tab buttons's position\n   * in the document, but lets the tab button know how it should display itself.\n   * The standard apperance of `TabButton` is to hide the visible border between\n   * the tab button and its associated panel, and `position` is used to\n   * determine which edge's border should be hidden.\n   *\n   * @type {('bottom'|'left'|'right'|'top')}\n   * @default 'top'\n   */\n  get position() {\n    return this[state].position;\n  }\n  set position(position) {\n    this[setState]({ position });\n  }\n}\n\nexport default TabButton;\n","import { ids, render, state, template } from \"../base/internal.js\";\nimport TabButton from \"../base/TabButton.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\n\n/**\n * TabButton component in the Plain reference design system\n *\n * @inherits TabButton\n */\nclass PlainTabButton extends TabButton {\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n    if (changed.position) {\n      // Adjust margins.\n      const { position } = this[state];\n\n      Object.assign(this.style, {\n        marginBottom: position === \"top\" ? \"-1px\" : null,\n        marginLeft: position === \"right\" ? \"-1px\" : null,\n        marginRight: position === \"left\" ? \"-1px\" : null,\n        marginTop: position === \"bottom\" ? \"-1px\" : null,\n      });\n\n      // Adjust which corners are rounded.\n      /** @type {IndexedObject<string>} */\n      const borderRadiusForPosition = {\n        bottom: \"0 0 0.25em 0.25em\",\n        left: \"0.25em 0 0 0.25em\",\n        right: \"0 0.25em 0.25em 0\",\n        top: \"0.25em 0.25em 0 0\",\n      };\n      this[ids].inner.style.borderRadius = borderRadiusForPosition[position];\n    }\n    if (changed.position || changed.selected) {\n      // Adjust selected appearance.\n      const { position, selected } = this[state];\n      /** @type {IndexedObject<string|null>} */\n      const buttonStyle = {\n        borderBottomColor: null,\n        borderLeftColor: null,\n        borderRightColor: null,\n        borderTopColor: null,\n        zIndex: selected ? \"1\" : \"\",\n      };\n      if (selected) {\n        // We style the border opposite the button's position: if the button is\n        // on the left, we style the right border, and so on.\n        /** @type {IndexedObject<string>} */\n        const borderColorSideForPosition = {\n          bottom: \"borderTopColor\",\n          left: \"borderRightColor\",\n          right: \"borderLeftColor\",\n          top: \"borderBottomColor\",\n        };\n        const borderSide = borderColorSideForPosition[position];\n        buttonStyle[borderSide] = \"transparent\";\n      }\n      Object.assign(this.inner.style, buttonStyle);\n    }\n  }\n\n  get [template]() {\n    const result = super[template];\n    result.content.append(\n      fragmentFrom.html`\n        <style>\n          [part~=\"button\"] {\n            background: white;\n            border-color: #ccc;\n            border-style: solid;\n            border-width: 1px;\n            padding: 0.5em 0.75em;\n            white-space: nowrap;\n          }\n\n          :host([selected]) [part~=\"button\"] {\n            z-index: 1;\n          }\n\n          [part~=\"button\"]:disabled {\n            color: #888;\n          }\n        </style>\n      `\n    );\n    return result;\n  }\n}\n\nexport default PlainTabButton;\n","import { deepContains } from \"../core/dom.js\";\nimport { templateFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\";\nimport { defaultAriaRole } from \"./accessibility.js\";\nimport AriaListMixin from \"./AriaListMixin.js\";\nimport CursorAPIMixin from \"./CursorAPIMixin.js\";\nimport CursorSelectMixin from \"./CursorSelectMixin.js\";\nimport DirectionCursorMixin from \"./DirectionCursorMixin.js\";\nimport {\n  defaultState,\n  keydown,\n  render,\n  rendered,\n  setState,\n  state,\n  template,\n} from \"./internal.js\";\nimport ItemsAPIMixin from \"./ItemsAPIMixin.js\";\nimport ItemsCursorMixin from \"./ItemsCursorMixin.js\";\nimport KeyboardDirectionMixin from \"./KeyboardDirectionMixin.js\";\nimport KeyboardMixin from \"./KeyboardMixin.js\";\nimport LanguageDirectionMixin from \"./LanguageDirectionMixin.js\";\nimport SingleSelectAPIMixin from \"./SingleSelectAPIMixin.js\";\nimport SlotItemsMixin from \"./SlotItemsMixin.js\";\nimport TapCursorMixin from \"./TapCursorMixin.js\";\n\nconst Base = AriaListMixin(\n  CursorAPIMixin(\n    CursorSelectMixin(\n      DirectionCursorMixin(\n        ItemsAPIMixin(\n          ItemsCursorMixin(\n            KeyboardDirectionMixin(\n              KeyboardMixin(\n                LanguageDirectionMixin(\n                  SingleSelectAPIMixin(\n                    SlotItemsMixin(TapCursorMixin(ReactiveElement))\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n);\n\n/**\n * Strip of tab buttons\n *\n * `TabStrip` is specifically responsible for handling keyboard navigation\n * between tab buttons, and for the visual layout of the buttons.\n *\n * The user can select a tab with the mouse or touch, as well as by through the\n * keyboard. Each tab appears as a separate button in the tab order.\n * Additionally, if the focus is currently on a tab, the user can quickly\n * navigate between tabs with the left/right arrow keys (or, if the tabs are\n * in vertical position, the up/down arrow keys).\n *\n * By default, the tabs are shown aligned to the left (in left-to-right\n * languages like English), where each tab is only as big as necessary. You\n * can adjust the alignment of the tabs with the `tabAlign` property.\n *\n * The component assumes that the tab buttons will appear above the tab panels\n * they control. You can adjust that positioning with the `position`\n * property.\n *\n * A `TabStrip` is often wrapped around a set of tab panels, a scenario which\n * can be handled with the separate [TabStripWrapper](TabStripWrapper)\n * component.\n *\n * @inherits ReactiveElement\n * @mixes AriaListMixin\n * @mixes CursorAPIMixin\n * @mixes CursorSelectMixin\n * @mixes DirectionCursorMixin\n * @mixes ItemsAPIMixin\n * @mixes ItemsCursorMixin\n * @mixes KeyboardDirectionMixin\n * @mixes KeyboardMixin\n * @mixes LanguageDirectionMixin\n * @mixes SingleSelectAPIMixin\n * @mixes SlotItemsMixin\n * @mixes TapCursorMixin\n */\nclass TabStrip extends Base {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      currentItemRequired: true,\n      handleBubblingDirectionKeys: true,\n      orientation: \"horizontal\",\n      position: \"top\",\n      role: \"tablist\",\n      tabAlign: \"start\",\n      tabButtonRole: \"tab\",\n      tabIndex: -1,\n    });\n  }\n\n  [keydown](/** @type {KeyboardEvent} */ event) {\n    let handled;\n\n    // Let user select a tab button with Enter or Space.\n    // The button will generally raise a `click` event on Enter/Space, but our\n    // use of `TapCursorMixin` listens to mousedown, not click, so we handle the\n    // keys specially.\n    switch (event.key) {\n      /* eslint-disable no-case-declarations */\n      case \" \":\n      case \"Enter\":\n        const { items, currentIndex } = this[state];\n        if (event.target instanceof HTMLElement) {\n          const newIndex = items && items.indexOf(event.target);\n          this[setState]({\n            currentIndex: newIndex,\n          });\n          handled = newIndex !== currentIndex;\n        }\n        break;\n    }\n\n    // Prefer mixin result if it's defined, otherwise use base result.\n    return handled || (super[keydown] && super[keydown](event)) || false;\n  }\n\n  // TabStrip orientation depends on position property.\n  get orientation() {\n    return this[state].orientation;\n  }\n\n  /**\n   * The position of the tab strip with respect to the associated tab panels.\n   *\n   * Setting this property does not actually change the tab strip's position in\n   * the document, but works as a signal to the contained tab buttons as to how\n   * they should present themselves. The standard [TabButton](TabButton) uses\n   * this information, for example, to remove the visible border between the tab\n   * button and its associated panel.\n   *\n   * @type {('bottom'|'left'|'right'|'top')}\n   * @default 'top'\n   */\n  get position() {\n    return this[state].position;\n  }\n  set position(position) {\n    const orientation =\n      position === \"top\" || position === \"bottom\" ? \"horizontal\" : \"vertical\";\n    this[setState]({\n      orientation,\n      position,\n    });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n\n    const { items } = this[state];\n    if (changed.items && items) {\n      const { tabButtonRole } = this[state];\n      items.forEach((item) => {\n        if (tabButtonRole === defaultAriaRole[item.localName]) {\n          item.removeAttribute(\"role\");\n        } else {\n          item.setAttribute(\"role\", tabButtonRole);\n        }\n      });\n    }\n\n    if ((changed.items || changed.currentIndex) && items) {\n      // Apply `selected` style to the selected item only.\n      const { currentIndex } = this[state];\n      items.forEach((item, index) => {\n        item.toggleAttribute(\"selected\", index === currentIndex);\n      });\n    }\n\n    if (changed.orientation) {\n      this.style.gridAutoFlow =\n        this[state].orientation === \"vertical\" ? \"row\" : \"column\";\n    }\n\n    if (changed.tabAlign) {\n      const { tabAlign } = this[state];\n      const justifyContentForTabAlign = {\n        center: \"center\",\n        end: \"end\",\n        start: \"start\",\n        stretch: \"stretch\", // No style needed for \"stretch\"\n      };\n      // @ts-ignore\n      this.style.placeContent = justifyContentForTabAlign[tabAlign];\n    }\n\n    if (changed.items || changed.position) {\n      const { position } = this[state];\n      if (items) {\n        items.forEach((item) => {\n          if (\"position\" in item) {\n            /** @type {any} */ (item).position = position;\n          }\n        });\n      }\n    }\n  }\n\n  [rendered](/** @type {ChangedFlags} */ changed) {\n    super[rendered](changed);\n\n    // Does this component, or any of its assigned nodes, have focus?\n    // This is a surprisingly hard question to answer.\n    // Try finding the deepest active element, then walking up.\n    let focused = false;\n    let activeElement = document.activeElement;\n    if (activeElement) {\n      while (\n        activeElement.shadowRoot &&\n        activeElement.shadowRoot.activeElement\n      ) {\n        activeElement = activeElement.shadowRoot.activeElement;\n      }\n      focused = deepContains(this, activeElement);\n    }\n\n    // Ensure the selected tab button has the focus.\n    const selectedItem = this.selectedItem;\n    if (\n      focused &&\n      selectedItem &&\n      selectedItem instanceof HTMLElement &&\n      selectedItem !== document.activeElement\n    ) {\n      selectedItem.focus();\n    }\n  }\n\n  /**\n   * The alignment of the tabs within the tab strip.\n   *\n   * @type {('start'|'center'|'end'|'stretch')}\n   * @default 'start'\n   */\n  get tabAlign() {\n    return this[state].tabAlign;\n  }\n  set tabAlign(tabAlign) {\n    this[setState]({ tabAlign });\n  }\n\n  get [template]() {\n    return templateFrom.html`\n      <style>\n        :host {\n          display: inline-grid;\n          grid-auto-flow: column;\n        }\n      </style>\n      <slot></slot>\n    `;\n  }\n}\n\nexport default TabStrip;\n","import { template } from \"../base/internal.js\";\nimport TabStrip from \"../base/TabStrip.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\n\n/**\n * Toast component in the Plain reference design system\n *\n * @inherits TabStrip\n */\nclass PlainTabStrip extends TabStrip {\n  get [template]() {\n    const result = super[template];\n    result.content.append(\n      fragmentFrom.html`\n        <style>\n          :host {\n            grid-gap: 0.25em;\n          }\n        </style>\n      `\n    );\n    return result;\n  }\n}\n\nexport default PlainTabStrip;\n","import { defaultAriaRole, ensureId } from \"./accessibility.js\";\nimport Explorer from \"./Explorer.js\";\nimport { defaultState, ids, render, setState, state } from \"./internal.js\";\nimport TabButton from \"./TabButton.js\";\nimport TabStrip from \"./TabStrip.js\";\n\n/**\n * Basic tabs structure for navigation and configuration\n *\n * Use tabs when you want to provide a large set of options or elements than\n * can comfortably fit inline, the options can be coherently grouped into pages,\n * and you want to avoid making the user navigate to a separate page. Tabs work\n * best if you only have a small handful of pages, say 2–7.\n *\n * @inherits Explorer\n * @part {TabButton} proxy\n * @part {TabStrip} proxy-list\n */\nclass Tabs extends Explorer {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      itemRole: \"tabpanel\",\n      proxyPartType: TabButton,\n      proxyListPartType: TabStrip,\n      tabAlign: \"start\",\n    });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n    const { items } = this[state];\n    /** @type {Element[]} */ const proxies = this[state].proxies;\n    if ((changed.items || changed.proxies) && items && proxies) {\n      // Recreate association between items and proxies.\n      const { proxiesAssigned, itemRole } = this[state];\n\n      // Create role for each item.\n      items.forEach((item, index) => {\n        if (itemRole === defaultAriaRole[item.localName]) {\n          item.removeAttribute(\"role\");\n        } else {\n          item.setAttribute(\"role\", itemRole);\n        }\n\n        // Point the item at the proxy.\n        const proxy = proxies && proxies[index];\n        if (proxy) {\n          const proxyId = ensureId(proxy);\n          if (!proxy.id) {\n            proxy.id = proxyId;\n          }\n          item.setAttribute(\"aria-labelledby\", proxyId);\n        } else {\n          item.removeAttribute(\"aria-labelledby\");\n        }\n      });\n\n      // Update default proxy text from item labels.\n      // Also indicate which item is controlled by each proxy.\n      proxies.forEach((proxy, index) => {\n        const item = items[index];\n        if (item) {\n          if (!proxiesAssigned) {\n            const label =\n              item.getAttribute(\"aria-label\") ||\n              (\"alt\" in item ? /** @type {any} */ (item).alt : \"\");\n            proxy.textContent = label;\n          }\n          // Point the proxy at the item.\n          const itemId = ensureId(item);\n          if (!item.id) {\n            item.id = itemId;\n          }\n          proxy.setAttribute(\"aria-controls\", itemId);\n        } else {\n          proxy.removeAttribute(\"aria-controls\");\n        }\n      });\n    }\n    if (changed.tabAlign) {\n      // Apply alignment to proxy list.\n      if (\"tabAlign\" in this[ids].proxyList) {\n        const proxyList = /** @type {any} */ (this[ids].proxyList);\n        proxyList.tabAlign = this[state].tabAlign;\n      }\n    }\n  }\n\n  /**\n   * The alignment of the tabs within the tab strip.\n   *\n   * @type {('start'|'center'|'end'|'stretch')}\n   * @default 'start'\n   */\n  get tabAlign() {\n    return this[state].tabAlign;\n  }\n  set tabAlign(tabAlign) {\n    this[setState]({ tabAlign });\n  }\n}\n\nexport default Tabs;\n","import { defaultState, template } from \"../base/internal.js\";\nimport Tabs from \"../base/Tabs.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport PlainTabButton from \"./PlainTabButton.js\";\nimport PlainTabStrip from \"./PlainTabStrip.js\";\n\n/**\n * Tabs component in the Plain reference design system\n *\n * @inherits Tabs\n * @part {PlainTabButton} proxy\n * @part {PlainTabStrip} proxy-list\n */\nclass PlainTabs extends Tabs {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      itemRole: \"tabpanel\",\n      proxyPartType: PlainTabButton,\n      proxyListPartType: PlainTabStrip,\n      tabAlign: \"start\",\n    });\n  }\n  get [template]() {\n    const result = super[template];\n    result.content.append(\n      fragmentFrom.html`\n        <style>\n          [part~=\"proxy-list\"] {\n            z-index: 1;\n          }\n        </style>\n      `\n    );\n    return result;\n  }\n}\n\nexport default PlainTabs;\n","import {\n  defaultState,\n  effectEndTarget,\n  ids,\n  render,\n  rendered,\n  setState,\n  state,\n} from \"./internal.js\";\nimport LanguageDirectionMixin from \"./LanguageDirectionMixin.js\";\nimport Popup from \"./Popup.js\";\nimport TransitionEffectMixin from \"./TransitionEffectMixin.js\";\n\nconst timeoutKey = Symbol(\"timeout\");\n\nconst Base = LanguageDirectionMixin(TransitionEffectMixin(Popup));\n\n/**\n * Lightweight popup intended to display a short, non-critical message\n *\n * The message remains until  the user dismisses it or a specified `duration`\n * elapses.\n *\n * @inherits Popup\n * @mixes LanguageDirectionMixin\n * @mixes TransitionEffectMixin\n */\nclass Toast extends Base {\n  constructor() {\n    super();\n    this.addEventListener(\"mouseout\", () => {\n      startTimerIfOpened(this);\n    });\n    this.addEventListener(\"mouseover\", () => {\n      clearTimer(this);\n    });\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name === \"duration\") {\n      this.duration = Number(newValue);\n    } else {\n      super.attributeChangedCallback(name, oldValue, newValue);\n    }\n  }\n\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      duration: null,\n      fromEdge: \"bottom\",\n    });\n  }\n\n  /**\n   * The duration, in milliseconds, for which the toast will appear on screen.\n   *\n   * The `duration` value refers to the duration of time in which the toast\n   * will appear on the screen. In other words, this is the time between\n   * the `opened` and `closed` event for the toast.\n   *\n   * @type {number}\n   * @default null\n   */\n  get duration() {\n    return this[state].duration;\n  }\n  set duration(duration) {\n    if (!isNaN(duration)) {\n      this[setState]({ duration });\n    }\n  }\n\n  // @ts-ignore\n  get [effectEndTarget]() {\n    return this[ids].frame;\n  }\n\n  /**\n   * The edge of the viewport from which the toast will appear.\n   *\n   * The `start` and `end` values refer to text direction: in left-to-right\n   * languages such as English, these are equivalent to `left` and `right`,\n   * respectively.\n   *\n   * @type {('bottom'|'end'|'left'|'right'|'start'|'top')}\n   * @default 'bottom'\n   */\n  get fromEdge() {\n    return this[state].fromEdge;\n  }\n  set fromEdge(fromEdge) {\n    this[setState]({ fromEdge });\n  }\n\n  [render](/** @type {ChangedFlags} */ changed) {\n    super[render](changed);\n    if (changed.fromEdge) {\n      // Host\n      /** @type {IndexedObject<any>} */\n      const hostEdgeStyles = {\n        bottom: {\n          alignItems: \"center\",\n          justifyContent: \"flex-end\",\n        },\n        \"bottom-left\": {\n          alignItems: \"flex-start\",\n          justifyContent: \"flex-end\",\n        },\n        \"bottom-right\": {\n          alignItems: \"flex-end\",\n          justifyContent: \"flex-end\",\n        },\n        top: {\n          alignItems: \"center\",\n          justifyContent: null,\n        },\n        \"top-left\": {\n          alignItems: \"flex-start\",\n          justifyContent: null,\n        },\n        \"top-right\": {\n          alignItems: \"flex-end\",\n          justifyContent: null,\n        },\n      };\n      Object.assign(this.style, hostEdgeStyles[this[state].fromEdge]);\n    }\n    if (\n      changed.effect ||\n      changed.effectPhase ||\n      changed.fromEdge ||\n      changed.rightToLeft\n    ) {\n      const { effect, effectPhase, fromEdge, rightToLeft } = this[state];\n      /** @type {IndexedObject<string>} */\n      const oppositeEdge = {\n        \"bottom-left\": \"bottom-right\",\n        \"bottom-right\": \"bottom-left\",\n        \"top-left\": \"top-right\",\n        \"top-right\": \"top-left\",\n      };\n      const languageAdjustedEdge = rightToLeft\n        ? oppositeEdge[fromEdge] || fromEdge\n        : fromEdge;\n\n      /** @type {IndexedObject<string>} */\n      const edgeTransforms = {\n        bottom: \"translateY(100%)\",\n        \"bottom-left\": \"translateX(-100%)\",\n        \"bottom-right\": \"translateX(100%)\",\n        top: \"translateY(-100%)\",\n        \"top-left\": \"translateX(-100%)\",\n        \"top-right\": \"translateX(100%)\",\n      };\n\n      /** @type {IndexedObject<string>} */\n      const openEdgeTransforms = {\n        bottom: \"translateY(0)\",\n        \"bottom-left\": \"translateX(0)\",\n        \"bottom-right\": \"translateX(0)\",\n        top: \"translateY(0)\",\n        \"top-left\": \"translateX(0)\",\n        \"top-right\": \"translateX(0)\",\n      };\n\n      const opened =\n        (effect === \"open\" && effectPhase !== \"before\") ||\n        (effect === \"close\" && effectPhase === \"before\");\n\n      const opacity = opened ? 1 : 0;\n      const transform = opened\n        ? openEdgeTransforms[languageAdjustedEdge]\n        : edgeTransforms[languageAdjustedEdge];\n\n      Object.assign(this[ids].frame.style, {\n        opacity,\n        transform,\n      });\n    }\n  }\n\n  [rendered](/** @type {ChangedFlags} */ changed) {\n    super[rendered](changed);\n    startTimerIfOpened(this);\n  }\n}\n\nfunction clearTimer(/** @type {Toast} */ element) {\n  /** @type {any} */ const cast = element;\n  if (cast[timeoutKey]) {\n    clearTimeout(cast[timeoutKey]);\n    cast[timeoutKey] = null;\n  }\n}\n\nfunction startTimer(/** @type {Toast} */ element) {\n  clearTimer(element);\n  const duration = element[state].duration;\n  if (duration !== null && duration > 0) {\n    /** @type {any} */ (element)[timeoutKey] = setTimeout(() => {\n      element.close();\n    }, duration);\n  }\n}\n\nfunction startTimerIfOpened(/** @type {Toast} */ element) {\n  if (element.opened) {\n    startTimer(element);\n  }\n}\n\nexport default Toast;\n","import { defaultState, template } from \"../base/internal.js\";\nimport Toast from \"../base/Toast.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport PlainOverlayFrame from \"./PlainOverlayFrame.js\";\n\n/**\n * @inherits Toast\n * @part {PlainOverlayFrame} frame\n */\nclass PlainToast extends Toast {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      framePartType: PlainOverlayFrame,\n    });\n  }\n\n  get [template]() {\n    const result = super[template];\n    result.content.append(\n      fragmentFrom.html`\n        <style>\n          :host {\n            align-items: initial;\n            display: flex;\n            flex-direction: column;\n            height: 100%;\n            justify-content: initial;\n            left: 0;\n            outline: none;\n            pointer-events: none;\n            top: 0;\n            -webkit-tap-highlight-color: transparent;\n            width: 100%;\n          }\n\n          [part~=\"frame\"] {\n            margin: 1em;\n            transition-duration: 0.25s;\n            transition-property: opacity, transform;\n            will-change: opacity, transform;\n          }\n        </style>\n      `\n    );\n    return result;\n  }\n}\n\nexport default PlainToast;\n","import { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport FocusVisibleMixin from \"./FocusVisibleMixin.js\";\nimport Hidden from \"./Hidden.js\";\nimport {\n  defaultState,\n  ids,\n  raiseChangeEvents,\n  render,\n  rendered,\n  state,\n  template,\n} from \"./internal.js\";\nimport PopupButton from \"./PopupButton.js\";\n\n// A reference to the most recently opened tooltip source.\nlet mostRecentTooltipButton = null;\n\nconst documentKeydownListenerKey = Symbol(\"documentKeydownListener\");\n\nconst Base = FocusVisibleMixin(PopupButton);\n\n/**\n * Button with a non-interactive tooltip that appears on hover\n *\n * @inherits PopupButton\n * @mixes FocusVisibleMixin\n */\nclass TooltipButton extends Base {\n  connectedCallback() {\n    super.connectedCallback();\n    // Handle edge case where component is opened, removed, then added back.\n    listenIfOpenAndConnected(this);\n  }\n\n  // @ts-ignore\n  get [defaultState]() {\n    // Because the user will not have to interact with the element to invoke the\n    // popup, we don't need `aria-haspopup`.\n    return Object.assign(super[defaultState], {\n      ariaHasPopup: null,\n      popupAlign: \"center\",\n      popupDirection: \"above\",\n      role: \"none\",\n    });\n  }\n\n  disconnectedCallback() {\n    if (super.disconnectedCallback) {\n      super.disconnectedCallback();\n    }\n    listenIfOpenAndConnected(this);\n  }\n\n  [render](changed) {\n    super[render](changed);\n\n    // Open tooltip on focus/mouseenter, close on mouseleave.\n    // PopupButton will already close the tooltip on blur.\n    if (changed.sourcePartType) {\n      const source = this[ids].source;\n      source.addEventListener(\"focus\", () => {\n        this[raiseChangeEvents] = true;\n        this.open();\n        this[raiseChangeEvents] = false;\n      });\n      source.addEventListener(\"mouseenter\", () => {\n        this[raiseChangeEvents] = true;\n        this.open();\n        this[raiseChangeEvents] = false;\n      });\n      source.addEventListener(\"mouseleave\", () => {\n        this[raiseChangeEvents] = true;\n        this.close();\n        this[raiseChangeEvents] = false;\n      });\n    }\n\n    // Suppress popup's backdrop, which would interfere with tracking\n    // mouseenter/mouseleave on the source element. Additionally, don't try to\n    // focus on the popup when it opens.\n    if (changed.popupPartType) {\n      const popup = this[ids].popup;\n      if (\"backdropPartType\" in popup) {\n        /** @type {any} */ (popup).backdropPartType = Hidden;\n      }\n\n      if (\"autoFocus\" in popup) {\n        /** @type {any} */ (popup).autoFocus = false;\n      }\n\n      // Even if the popup declares itself focusable, we want to keep focus on\n      // the source.\n      popup.tabIndex = -1;\n    }\n  }\n\n  [rendered](/** @type {ChangedFlags} */ changed) {\n    super[rendered](changed);\n\n    if (changed.opened) {\n      listenIfOpenAndConnected(this);\n\n      if (this[state].opened) {\n        // If some other tooltip source is open, close it.\n        if (mostRecentTooltipButton && mostRecentTooltipButton.close) {\n          mostRecentTooltipButton.close();\n        }\n\n        // Make this the most recently-opened tooltip source.\n        mostRecentTooltipButton = this;\n      } else if (this === mostRecentTooltipButton && !this[state].opened) {\n        // This tooltip source was the most recent, but is now closed.\n        mostRecentTooltipButton = null;\n      }\n    }\n  }\n\n  get [template]() {\n    const result = super[template];\n\n    // visually-hidden class from\n    // https://inclusive-components.design/tooltips-toggletips/\n    result.content.append(fragmentFrom.html`\n      <style>\n        #popup[closed] {\n          clip-path: inset(100%);\n          clip: rect(1px, 1px, 1px, 1px);\n          display: inherit;\n          height: 1px;\n          overflow: hidden;\n          position: absolute;\n          white-space: nowrap;\n          width: 1px;\n        }\n      </style>\n    `);\n\n    // Indicate that the button is described by the popup.\n    const source = result.content.getElementById(\"source\");\n    if (source) {\n      source.setAttribute(\"aria-describedby\", \"popup\");\n    }\n\n    // Indicate that the popup is a tooltip.\n    const popup = result.content.getElementById(\"popup\");\n    if (popup) {\n      popup.setAttribute(\"role\", \"tooltip\");\n    }\n\n    return result;\n  }\n}\n\n// The user can invoke the tooltip on mouse hover, in which case the tooltip\n// will be shown even if the tooltip source does not have the focus. In that\n// situation, we still want the Esc key to close the tooltip. If the user\n// happened to intend for something else to happen a result, we'll still let\n// that happen -- but if the Esc key wasn't meant for the tooltip, it seems\n// safer to close the tooltip.\nasync function handleKeydown(/** @type {KeyboardEvent} */ event) {\n  // @ts-ignore\n  const element = this;\n\n  switch (event.key) {\n    case \"Escape\":\n      if (element.opened) {\n        element[raiseChangeEvents] = true;\n        element.close();\n        element[raiseChangeEvents] = false;\n      }\n      break;\n  }\n}\n\nfunction listenIfOpenAndConnected(element) {\n  if (element[state].opened && element.isConnected) {\n    if (!element[documentKeydownListenerKey]) {\n      // Not listening yet; start.\n      element[documentKeydownListenerKey] = handleKeydown.bind(element);\n      document.addEventListener(\"keydown\", element[documentKeydownListenerKey]);\n    }\n  } else if (element[documentKeydownListenerKey]) {\n    // Currently listening; stop.\n    document.removeEventListener(\n      \"keydown\",\n      element[documentKeydownListenerKey]\n    );\n    element[documentKeydownListenerKey] = null;\n  }\n}\n\nexport default TooltipButton;\n","import * as internal from \"../base/internal.js\";\nimport TooltipButton from \"../base/TooltipButton.js\";\nimport PlainPopup from \"./PlainPopup.js\";\n\nclass PlainTooltipButton extends TooltipButton {\n  // @ts-ignore\n  get [internal.defaultState]() {\n    return Object.assign(super[internal.defaultState], {\n      popupPartType: PlainPopup,\n    });\n  }\n\n  [internal.stateEffects](state, changed) {\n    const effects = super[internal.stateEffects]\n      ? super[internal.stateEffects](state, changed)\n      : {};\n\n    // Open on hover, close when hover stops.\n    if (changed.hover) {\n      Object.assign(effects, {\n        opened: state.hover,\n      });\n    }\n\n    return effects;\n  }\n}\n\nexport default PlainTooltipButton;\n","/*\n * The complete set of Elix components and mixins.\n * \n * This file is the primary entry point to the Elix package, so its exports are\n * what is obtained if you write `import * from \"elix\"`. However, in\n * production use it will be much more efficient to directly load just the\n * components you need from the /src folder. This file is also used during\n * testing, as it causes all Elix's elements to be loaded.\n * \n * NOTE: Do not edit this file by hand. This file is generated during\n * publishing, or you can regenerate it with `npm run prepublishOnly`.\n */\n\n// Files that export a single object.\nexport { default as AriaListMixin } from \"./base/AriaListMixin.js\";\nexport { default as AriaMenuMixin } from \"./base/AriaMenuMixin.js\";\nexport { default as AriaRoleMixin } from \"./base/AriaRoleMixin.js\";\nexport { default as AttributeMarshallingMixin } from \"./core/AttributeMarshallingMixin.js\";\nexport { default as CalendarElementMixin } from \"./base/CalendarElementMixin.js\";\nexport { default as ComposedFocusMixin } from \"./base/ComposedFocusMixin.js\";\nexport { default as ContentItemsMixin } from \"./base/ContentItemsMixin.js\";\nexport { default as CurrentMixin } from \"./base/CurrentMixin.js\";\nexport { default as CursorAPIMixin } from \"./base/CursorAPIMixin.js\";\nexport { default as CursorInViewMixin } from \"./base/CursorInViewMixin.js\";\nexport { default as CursorSelectMixin } from \"./base/CursorSelectMixin.js\";\nexport { default as DarkModeMixin } from \"./base/DarkModeMixin.js\";\nexport { default as DelegateCursorMixin } from \"./base/DelegateCursorMixin.js\";\nexport { default as DelegateFocusMixin } from \"./base/DelegateFocusMixin.js\";\nexport { default as DelegateInputLabelMixin } from \"./base/DelegateInputLabelMixin.js\";\nexport { default as DelegateInputSelectionMixin } from \"./base/DelegateInputSelectionMixin.js\";\nexport { default as DelegateItemsMixin } from \"./base/DelegateItemsMixin.js\";\nexport { default as DialogModalityMixin } from \"./base/DialogModalityMixin.js\";\nexport { default as DirectionCursorMixin } from \"./base/DirectionCursorMixin.js\";\nexport { default as DisabledMixin } from \"./base/DisabledMixin.js\";\nexport { default as EffectMixin } from \"./base/EffectMixin.js\";\nexport { default as FocusCaptureMixin } from \"./base/FocusCaptureMixin.js\";\nexport { default as FocusVisibleMixin } from \"./base/FocusVisibleMixin.js\";\nexport { default as FormElementMixin } from \"./base/FormElementMixin.js\";\nexport { default as HoverMixin } from \"./base/HoverMixin.js\";\nexport { default as ItemsAPIMixin } from \"./base/ItemsAPIMixin.js\";\nexport { default as ItemsCursorMixin } from \"./base/ItemsCursorMixin.js\";\nexport { default as ItemsMultiSelectMixin } from \"./base/ItemsMultiSelectMixin.js\";\nexport { default as ItemsTextMixin } from \"./base/ItemsTextMixin.js\";\nexport { default as KeyboardDirectionMixin } from \"./base/KeyboardDirectionMixin.js\";\nexport { default as KeyboardMixin } from \"./base/KeyboardMixin.js\";\nexport { default as KeyboardPagedCursorMixin } from \"./base/KeyboardPagedCursorMixin.js\";\nexport { default as KeyboardPrefixCursorMixin } from \"./base/KeyboardPrefixCursorMixin.js\";\nexport { default as LanguageDirectionMixin } from \"./base/LanguageDirectionMixin.js\";\nexport { default as MultiSelectAPIMixin } from \"./base/MultiSelectAPIMixin.js\";\nexport { default as MultiSelectToggleMixin } from \"./base/MultiSelectToggleMixin.js\";\nexport { default as MultiSelectValueAPIMixin } from \"./base/MultiSelectValueAPIMixin.js\";\nexport { default as OpenCloseMixin } from \"./base/OpenCloseMixin.js\";\nexport { default as OverlayMixin } from \"./base/OverlayMixin.js\";\nexport { default as PageNumbersMixin } from \"./base/PageNumbersMixin.js\";\nexport { default as AlertDialog } from \"./plain/PlainAlertDialog.js\";\nexport { default as ArrowDirectionButton } from \"./plain/PlainArrowDirectionButton.js\";\nexport { default as ArrowDirectionMixin } from \"./plain/PlainArrowDirectionMixin.js\";\nexport { default as AutoCompleteComboBox } from \"./plain/PlainAutoCompleteComboBox.js\";\nexport { default as AutoCompleteInput } from \"./plain/PlainAutoCompleteInput.js\";\nexport { default as AutoSizeTextarea } from \"./plain/PlainAutoSizeTextarea.js\";\nexport { default as Backdrop } from \"./plain/PlainBackdrop.js\";\nexport { default as BorderButton } from \"./plain/PlainBorderButton.js\";\nexport { default as Button } from \"./plain/PlainButton.js\";\nexport { default as ButtonMixin } from \"./plain/PlainButtonMixin.js\";\nexport { default as CalendarDay } from \"./plain/PlainCalendarDay.js\";\nexport { default as CalendarDayButton } from \"./plain/PlainCalendarDayButton.js\";\nexport { default as CalendarDayNamesHeader } from \"./plain/PlainCalendarDayNamesHeader.js\";\nexport { default as CalendarDays } from \"./plain/PlainCalendarDays.js\";\nexport { default as CalendarMonth } from \"./plain/PlainCalendarMonth.js\";\nexport { default as CalendarMonthNavigator } from \"./plain/PlainCalendarMonthNavigator.js\";\nexport { default as CalendarMonthYearHeader } from \"./plain/PlainCalendarMonthYearHeader.js\";\nexport { default as Carousel } from \"./plain/PlainCarousel.js\";\nexport { default as CarouselMixin } from \"./plain/PlainCarouselMixin.js\";\nexport { default as CarouselSlideshow } from \"./plain/PlainCarouselSlideshow.js\";\nexport { default as CarouselWithThumbnails } from \"./plain/PlainCarouselWithThumbnails.js\";\nexport { default as CenteredStrip } from \"./plain/PlainCenteredStrip.js\";\nexport { default as CenteredStripHighlight } from \"./plain/PlainCenteredStripHighlight.js\";\nexport { default as CenteredStripOpacity } from \"./plain/PlainCenteredStripOpacity.js\";\nexport { default as CheckListItem } from \"./plain/PlainCheckListItem.js\";\nexport { default as ComboBox } from \"./plain/PlainComboBox.js\";\nexport { default as ComboBoxMixin } from \"./plain/PlainComboBoxMixin.js\";\nexport { default as CrossfadeStage } from \"./plain/PlainCrossfadeStage.js\";\nexport { default as DateComboBox } from \"./plain/PlainDateComboBox.js\";\nexport { default as DateInput } from \"./plain/PlainDateInput.js\";\nexport { default as Dialog } from \"./plain/PlainDialog.js\";\nexport { default as Drawer } from \"./plain/PlainDrawer.js\";\nexport { default as DrawerMixin } from \"./plain/PlainDrawerMixin.js\";\nexport { default as DrawerWithGrip } from \"./plain/PlainDrawerWithGrip.js\";\nexport { default as DropdownList } from \"./plain/PlainDropdownList.js\";\nexport { default as ExpandCollapseToggle } from \"./plain/PlainExpandCollapseToggle.js\";\nexport { default as ExpandablePanel } from \"./plain/PlainExpandablePanel.js\";\nexport { default as ExpandableSection } from \"./plain/PlainExpandableSection.js\";\nexport { default as Explorer } from \"./plain/PlainExplorer.js\";\nexport { default as FilterComboBox } from \"./plain/PlainFilterComboBox.js\";\nexport { default as FilterListBox } from \"./plain/PlainFilterListBox.js\";\nexport { default as HamburgerMenuButton } from \"./plain/PlainHamburgerMenuButton.js\";\nexport { default as Hidden } from \"./plain/PlainHidden.js\";\nexport { default as Input } from \"./plain/PlainInput.js\";\nexport { default as InputMixin } from \"./plain/PlainInputMixin.js\";\nexport { default as ListBox } from \"./plain/PlainListBox.js\";\nexport { default as ListBoxMixin } from \"./plain/PlainListBoxMixin.js\";\nexport { default as ListComboBox } from \"./plain/PlainListComboBox.js\";\nexport { default as ListExplorer } from \"./plain/PlainListExplorer.js\";\nexport { default as ListWithSearch } from \"./plain/PlainListWithSearch.js\";\nexport { default as Menu } from \"./plain/PlainMenu.js\";\nexport { default as MenuButton } from \"./plain/PlainMenuButton.js\";\nexport { default as MenuItem } from \"./plain/PlainMenuItem.js\";\nexport { default as MenuSeparator } from \"./plain/PlainMenuSeparator.js\";\nexport { default as ModalBackdrop } from \"./plain/PlainModalBackdrop.js\";\nexport { default as ModalOverlayMixin } from \"./plain/PlainModalOverlayMixin.js\";\nexport { default as Modes } from \"./plain/PlainModes.js\";\nexport { default as MultiSelectListBox } from \"./plain/PlainMultiSelectListBox.js\";\nexport { default as NumberSpinBox } from \"./plain/PlainNumberSpinBox.js\";\nexport { default as OpenCloseToggle } from \"./plain/PlainOpenCloseToggle.js\";\nexport { default as Option } from \"./plain/PlainOption.js\";\nexport { default as OptionList } from \"./plain/PlainOptionList.js\";\nexport { default as Overlay } from \"./plain/PlainOverlay.js\";\nexport { default as OverlayFrame } from \"./plain/PlainOverlayFrame.js\";\nexport { default as PageDot } from \"./plain/PlainPageDot.js\";\nexport { default as PlayControlsMixin } from \"./plain/PlainPlayControlsMixin.js\";\nexport { default as Popup } from \"./plain/PlainPopup.js\";\nexport { default as PopupButton } from \"./plain/PlainPopupButton.js\";\nexport { default as PopupSource } from \"./plain/PlainPopupSource.js\";\nexport { default as ProgressSpinner } from \"./plain/PlainProgressSpinner.js\";\nexport { default as PullToRefresh } from \"./plain/PlainPullToRefresh.js\";\nexport { default as RepeatButton } from \"./plain/PlainRepeatButton.js\";\nexport { default as SelectableButton } from \"./plain/PlainSelectableButton.js\";\nexport { default as Slideshow } from \"./plain/PlainSlideshow.js\";\nexport { default as SlideshowWithPlayControls } from \"./plain/PlainSlideshowWithPlayControls.js\";\nexport { default as SlidingPages } from \"./plain/PlainSlidingPages.js\";\nexport { default as SlidingStage } from \"./plain/PlainSlidingStage.js\";\nexport { default as SpinBox } from \"./plain/PlainSpinBox.js\";\nexport { default as SpinBoxMixin } from \"./plain/PlainSpinBoxMixin.js\";\nexport { default as TabButton } from \"./plain/PlainTabButton.js\";\nexport { default as TabStrip } from \"./plain/PlainTabStrip.js\";\nexport { default as Tabs } from \"./plain/PlainTabs.js\";\nexport { default as Toast } from \"./plain/PlainToast.js\";\nexport { default as TooltipButton } from \"./plain/PlainTooltipButton.js\";\nexport { default as PopupDragSelectMixin } from \"./base/PopupDragSelectMixin.js\";\nexport { default as PopupListMixin } from \"./base/PopupListMixin.js\";\nexport { default as PopupModalityMixin } from \"./base/PopupModalityMixin.js\";\nexport { default as PopupToggleMixin } from \"./base/PopupToggleMixin.js\";\nexport { default as ReactiveElement } from \"./core/ReactiveElement.js\";\nexport { default as ReactiveMixin } from \"./core/ReactiveMixin.js\";\nexport { default as RepeatMousedownMixin } from \"./base/RepeatMousedownMixin.js\";\nexport { default as ResizeMixin } from \"./base/ResizeMixin.js\";\nexport { default as SelectableMixin } from \"./base/SelectableMixin.js\";\nexport { default as SelectedTextAPIMixin } from \"./base/SelectedTextAPIMixin.js\";\nexport { default as SelectedValueAPIMixin } from \"./base/SelectedValueAPIMixin.js\";\nexport { default as ShadowTemplateMixin } from \"./core/ShadowTemplateMixin.js\";\nexport { default as SingleSelectAPIMixin } from \"./base/SingleSelectAPIMixin.js\";\nexport { default as SlotContentMixin } from \"./base/SlotContentMixin.js\";\nexport { default as SlotItemsMixin } from \"./base/SlotItemsMixin.js\";\nexport { default as SwipeCommandsMixin } from \"./base/SwipeCommandsMixin.js\";\nexport { default as SwipeDirectionMixin } from \"./base/SwipeDirectionMixin.js\";\nexport { default as TapCursorMixin } from \"./base/TapCursorMixin.js\";\nexport { default as TimerCursorMixin } from \"./base/TimerCursorMixin.js\";\nexport { default as TouchSwipeMixin } from \"./base/TouchSwipeMixin.js\";\nexport { default as TrackTextSelectionMixin } from \"./base/TrackTextSelectionMixin.js\";\nexport { default as TrackpadSwipeMixin } from \"./base/TrackpadSwipeMixin.js\";\nexport { default as TransitionEffectMixin } from \"./base/TransitionEffectMixin.js\";\nexport { default as UpDownToggle } from \"./base/UpDownToggle.js\";\nexport { default as WrappedStandardElement } from \"./base/WrappedStandardElement.js\";\n\n// Files that export multiple objects.\n// As of Sept 2019, there's no way to simultaneously import a collection of\n// objects and then export them as a named object, so we have to do the import\n// and export in separate steps.\nimport * as accessibilityImport from \"./base/accessibility.js\";\n// @ts-ignore\nexport const accessibility = accessibilityImport;\n\nimport * as calendarImport from \"./base/calendar.js\";\n// @ts-ignore\nexport const calendar = calendarImport;\n\nimport * as constantsImport from \"./base/constants.js\";\n// @ts-ignore\nexport const constants = constantsImport;\n\nimport * as contentImport from \"./base/content.js\";\n// @ts-ignore\nexport const content = contentImport;\n\nimport * as fractionalSelectionImport from \"./base/fractionalSelection.js\";\n// @ts-ignore\nexport const fractionalSelection = fractionalSelectionImport;\n\nimport * as internalImport from \"./base/internal.js\";\n// @ts-ignore\nexport const internal = internalImport;\n\nimport * as layoutPopupImport from \"./base/layoutPopup.js\";\n// @ts-ignore\nexport const layoutPopup = layoutPopupImport;\n\nimport * as scrollingImport from \"./base/scrolling.js\";\n// @ts-ignore\nexport const scrolling = scrollingImport;\n\nimport * as domImport from \"./core/dom.js\";\n// @ts-ignore\nexport const dom = domImport;\n\nimport * as htmlLiteralsImport from \"./core/htmlLiterals.js\";\n// @ts-ignore\nexport const htmlLiterals = htmlLiteralsImport;\n\nimport * as templateImport from \"./core/template.js\";\n// @ts-ignore\nexport const template = templateImport;\n","import {\n  defaultState,\n  ids,\n  render,\n  state,\n  template,\n} from \"../base/internal.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\"; // eslint-disable-line no-unused-vars\nimport PlainInput from \"./PlainInput.js\";\nimport PlainOpenCloseToggle from \"./PlainOpenCloseToggle.js\";\nimport PlainPopup from \"./PlainPopup.js\";\n\n/**\n * ComboBox styles for the Plain reference design system\n *\n * @module PlainComboBoxMixin\n * @part {PlainPopup} popup\n * @part {PlainOpenCloseToggle} popup-toggle\n * @param {Constructor<ReactiveElement>} Base\n */\nexport default function PlainComboBoxMixin(Base) {\n  return class PlainComboBox extends Base {\n    // @ts-ignore\n    get [defaultState]() {\n      return Object.assign(super[defaultState] || {}, {\n        inputPartType: PlainInput,\n        popupPartType: PlainPopup,\n        popupTogglePartType: PlainOpenCloseToggle,\n      });\n    }\n\n    [render](changed) {\n      if (super[render]) {\n        super[render](changed);\n      }\n\n      // Style the inner input.\n      if (changed.inputPartType) {\n        // We want to style the inner input if it's been created with\n        // WrappedStandardElement, otherwise style the input directly.\n        const cast = /** @type {any} */ (this[ids].input);\n        const input = \"inner\" in cast ? cast.inner : cast;\n        Object.assign(input.style, {\n          outline: \"none\",\n        });\n      }\n\n      // We don't want the box-shadow on the popup to appear over the input. To\n      // avoid this, we create a clip-path on the popup. This clip path has the\n      // shape of a rectangle 10px bigger than the popup frame (to account for\n      // the box-shadow) with a cut-out piece. If the popup is positioned below\n      // the input, the top of the shape will be cut out to avoid rendering over\n      // the input. The resulting shape looks like this Unicode character: 凹.\n      //\n      // Likewise, if the popup is positioned below the input, a piece will be\n      // cut out of the bottom of the shape to avoid rendering over the input.\n      //\n      // TODO: The cut-out arrangement is optimized for combo boxes with a\n      // horizontal alignment of \"stretch\". For combo boxes with start/end or\n      // left/right, we should adjust the position and width of the cut-out to\n      // match the input.\n      if (changed.opened || changed.popupLayout) {\n        const { opened, popupLayout } = this[state];\n        const direction = popupLayout ? popupLayout.direction : null;\n        const w = `10px`; // Width of box shadow\n        const popupBelow = direction === \"column\" || direction === \"below\";\n        const popupAbove =\n          direction === \"column-reverse\" || direction === \"above\";\n        const clipPath = popupBelow\n          ? `polygon(0px 0px, 100% 0px, 100% -${w}, calc(100% + ${w}) -${w}, calc(100% + ${w}) calc(100% + ${w}), -${w} calc(100% + ${w}), -${w} -${w}, 0px -${w})`\n          : popupAbove\n          ? `polygon(-${w} -${w}, calc(100% + ${w}) -${w}, calc(100% + ${w}) calc(100% + ${w}), 100% calc(100% + ${w}), 100% 100%, 0px 100%, 0px calc(100% + ${w}), -${w} calc(100% + ${w}))`\n          : \"\";\n        this[ids].popup.style.clipPath = opened ? clipPath : \"\";\n      }\n    }\n\n    get [template]() {\n      const result = super[template];\n      result.content.append(fragmentFrom.html`\n        <style>\n          :host {\n            background: white;\n            border: 1px solid gray;\n            box-sizing: border-box;\n          }\n\n          [part~=\"input\"] {\n            background: transparent;\n            border: none;\n          }\n        </style>\n      `);\n      return result;\n    }\n  };\n}\n","import ListBox from \"../base/ListBox.js\";\nimport PlainListBoxMixin from \"./PlainListBoxMixin.js\";\n\n/**\n * ListBox component in the Plain reference design system\n *\n * @inherits ListBox\n */\nclass PlainListBox extends PlainListBoxMixin(ListBox) {}\n\nexport default PlainListBox;\n","import { template } from \"../base/internal.js\";\nimport { fragmentFrom } from \"../core/htmlLiterals.js\";\nimport ReactiveElement from \"../core/ReactiveElement.js\"; // eslint-disable-line no-unused-vars\n\n/**\n * ListBox styles in the Plain reference design system\n *\n * @module PlainListBoxMixin\n * @param {Constructor<ReactiveElement>} Base\n */\nexport default function PlainListBoxMixin(Base) {\n  return class PlainListBox extends Base {\n    get [template]() {\n      const result = super[template];\n      result.content.append(\n        fragmentFrom.html`\n          <style>\n            :host {\n              border: 1px solid gray;\n              box-sizing: border-box;\n            }\n\n            ::slotted(*),\n            #slot > * {\n              padding: 0.25em;\n            }\n\n            ::slotted([selected]),\n            #slot > [selected] {\n              background: highlight;\n              color: highlighttext;\n            }\n\n            @media (pointer: coarse) {\n              ::slotted(*),\n              #slot > * {\n                padding: 1em;\n              }\n            }\n          </style>\n        `\n      );\n      return result;\n    }\n  };\n}\n","import { defaultState } from \"../base/internal.js\";\nimport ListComboBox from \"../base/ListComboBox.js\";\nimport PlainComboBoxMixin from \"./PlainComboBoxMixin.js\";\nimport PlainListBox from \"./PlainListBox.js\";\n\n/**\n * ListComboBox component in the Plain reference design system\n *\n * @inherits ListComboBox\n * @part {PlainListBox} list\n */\nclass PlainListComboBox extends PlainComboBoxMixin(ListComboBox) {\n  // @ts-ignore\n  get [defaultState]() {\n    return Object.assign(super[defaultState], {\n      listPartType: PlainListBox,\n    });\n  }\n}\n\nexport default PlainListComboBox;\n"],"names":["ElixListComboBox","PlainListComboBox","customElements","define","AriaListMixin","Base","AriaList","defaultState","base","super","Object","assign","itemRole","role","this","state","setState","render","changed","items","forEach","item","id","ensureId","defaultAriaRole","localName","removeAttribute","setAttribute","selectedIndex","selectedItemFlags","index","selected","toString","selectedItem","orientation","rendering","elixdebugpopup","URLSearchParams","location","search","get","DelegateFocusMixin","DelegateInputLabelMixin","DelegateInputSelectionMixin","FocusVisibleMixin","FormElementMixin","KeyboardMixin","PopupDragSelectMixin","PopupToggleMixin","PopupSource","ComboBox","ariaHasPopup","confirmedValue","focused","inputPartType","placeholder","selectText","value","inputDelegate","ids","input","shadowRoot","keydown","event","handled","key","closed","open","opened","close","canceled","String","renderParts","addEventListener","raiseChangeEvents","changes","button","disabled","popupTogglePartType","popupToggle","preventDefault","closeResult","toggle","HTMLElement","forwardFocus","popupPartType","popup","cast","backdropPartType","Hidden","autoFocus","closeOnWindowResize","rendered","setTimeout","selectionStart","selectionEnd","length","stateEffects","effects","matchMedia","matches","template","result","sourceSlot","content","querySelector","replaceWith","fragmentFrom","html","_templateObject","_taggedTemplateLiteral","append","_templateObject2","root","getElementById","transmute","CursorSelectMixin","currentIndex","currentItem","DelegateCursorMixin","DelegateCursor","goFirst","delegateCursorOperation","goLast","goNext","goPrevious","element","operation","itemsDelegate","itemsChangedListenerKey","Symbol","previousItemsDelegateKey","currentIndexChangedListenerKey","DelegateItemsMixin","DelegateItems","constructor","delegateItems","target","delegateCurrentIndex","detail","concat","name","previousItemsDelegate","removeEventListener","ReactiveElement","firstRender","ComposedFocusMixin","CursorAPIMixin","CursorInViewMixin","DirectionCursorMixin","ItemsAPIMixin","ItemsCursorMixin","ItemsTextMixin","KeyboardDirectionMixin","KeyboardPagedCursorMixin","KeyboardPrefixCursorMixin","LanguageDirectionMixin","SingleSelectAPIMixin","SelectedTextAPIMixin","SelectedValueAPIMixin","SlotItemsMixin","TapCursorMixin","ListBox","toggleAttribute","style","display","flexDirection","overflowX","overflowY","container","scrollTarget","PopupListMixin","ListComboBox","listPartType","popupAlign","getItemText","getDefaultText","list","altKey","pageDown","pageUp","popupList","selectedItemValue","getAttribute","s","findIndex","searchText","toLowerCase","closing","currentItemText","popupMeasured","defaultSlot","SelectedTextAPI","selectedText","getText","text","indexOfItemWithText","SelectedValueAPI","indexOfItemWithValue","SingleSelectAPI","attributeChangedCallback","oldValue","newValue","Number","CustomEvent","bubbles","dispatchEvent","isNaN","indexOf","defaultRegion","millisecondsPerDay","dateTimeFormat","locale","options","caExtension","includes","nuExtension","extension","extendedLocale","Intl","DateTimeFormat","datesEqual","date1","date2","getTime","daysSinceFirstDayOfWeek","date","firstDay","firstDayOfWeek","getDay","region","getLocaleRegion","weekData","undefined","firstDateOfMonth","midnightOnDate","setDate","midnight","Date","setHours","setMinutes","setSeconds","setMilliseconds","noonOnDate","parse","today","parts","formatToParts","regExText","map","part","type","join","match","RegExp","exec","groups","day","hour","minute","month","second","year","yearValue","parseInt","getFullYear","getMonth","getDate","offsetDateByDays","days","copyTimeFromDateToDate","offsetDateByMonths","months","setMonth","weekendEnd","weekendStart","getHours","getMinutes","getSeconds","getMilliseconds","localeParts","split","CalendarElementMixin","CalendarElement","calendar","navigator","language","colorSchemeElements","Set","DarkModeMixin","booleanAttributeValue","dark","disconnectedCallback","delete","detectDarkMode","setInternalState","add","setDarkModeFromBackgroundColor","rgb","rgbString","r","g","b","parseRgb","findBackgroundColor","hsl","max","Math","min","h","l","d","rgbToHsl","defaultBackgroundColor","Document","backgroundColor","getComputedStyle","assignedSlot","parent","parentNode","ShadowRoot","host","Element","window","addListener","EffectMixin","Transition","enableEffects","selectedItemsToFlags","selectedItems","wrap","PageNumbersMixin","PageNumbers","textContent","pageNumber","pageNumbers","PlainButton","PlainArrowDirectionButton","PlainArrowDirectionMixin","arrowButtonPartType","rightToLeft","transform","arrowIconPrevious","arrowIconNext","arrowButtonPrevious","arrowButtonNext","AutoCompleteInput","Input","autoCompleteSelect","originalText","textIndex","texts","matchText","prefix","prefixLowerCase","find","startsWith","inner","typingAtEnd","userAddedText","autoComplete","accessibleList","div","document","createElement","updateChildNodes","InputEvent","Event","AutoCompleteComboBox","PlainInputMixin","PlainComboBoxMixin","SlotContentMixin","TrackTextSelectionMixin","WrappedStandardElement","SelectableMixin","CalendarDay","outsideRange","dayOfWeek","dayOfMonth","nextDate","daysFromToday","round","abs","weekend","templateFrom","Button","SelectableButton","CalendarDayButton","dayPartType","tabIndex","CalendarDayNamesHeader","format","formatter","weekday","dayNameParts","querySelectorAll","i","dayElement","CalendarDays","startDate","dayElementForDate","dayCount","showCompleteWeeks","showSelectedDay","dayContainer","selectedDate","selectedMonth","selectedYear","dayDate","firstDateAfterRange","dayTime","forceCreation","workingStartDate","workingDayCount","workingEndDate","slice","createNewElement","gridColumnStart","freeze","updateDays","CalendarMonthYearHeader","monthFormat","yearFormat","formatOptions","formatted","CalendarMonth","monthDays","dayNamesHeaderPartType","daysOfWeekFormat","monthDaysPartType","monthYearHeaderPartType","monthYearHeader","dayNamesHeader","endDate","ArrowDirectionMixin","ArrowDirection","arrowButtonOverlap","showArrowButtons","previousButtonHandler","createButtonHandler","nextButtonHandler","canGoNext","canGoPrevious","vertical","arrowDirection","arrowDirectionContainer","maxHeight","buttonStyle","bottom","left","right","top","previousButtonStyle","nextButtonStyle","position","arrowControls","callback","async","stopPropagation","Promise","resolve","CalendarMonthNavigator","composedPath","Node","indexOfItemContainingTarget","goDown","goLeft","goRight","goUp","styleTemplate","Modes","currentItemRequired","lateralPositions","end","start","Explorer","proxyListOverlap","checkSize","stage","proxyList","proxies","proxiesAssigned","proxyListPartType","proxyListPosition","proxyPartType","stagePartType","proxySlot","assignedNodes","flatten","handleSelectedIndexChanged","selectedEffectEndEvent","childNodes","lateralPosition","height","width","zIndex","listInInitialPosition","explorerContainer","findChildContainingNode","firstElement","lastElement","nextElementSibling","insertBefore","setListAndStageOrder","selectionRequired","swipeFraction","createDefaultProxies","cursorOperationsWrap","filter","specialCase","closestAvailableItemIndex","direction","proxy","node","dampen","x","SlidingStage","parseFloat","sign","swiping","translation","selection","itemCount","bound","damped","fractionalSelection","slidingStageContent","axis","showTransition","transition","SwipeDirectionMixin","swipeDown","swipeLeft","swipeRight","swipeUp","deferToScrollingKey","multiTouchKey","previousTimeKey","previousVelocityKey","previousXKey","previousYKey","startXKey","startYKey","touchSequenceAxisKey","TouchSwipeMixin","touches","clientX","clientY","changedTouches","gestureStart","gestureContinue","gestureEnd","isEventForPenOrPrimaryTouch","touchAction","swipeAxis","swipeDownWillCommit","swipeFractionMax","swipeFractionMin","swipeLeftWillCommit","swipeRightWillCommit","swipeStartX","swipeStartY","swipeUpWillCommit","swipeTarget","pointerType","isPrimary","eventTarget","deltaX","deltaY","now","deltaAlongAxis","velocity","eventAxis","downOrRight","canScrollInDirection","fraction","y","dragDistance","swipeTargetSize","offsetHeight","offsetWidth","getSwipeFraction","willScroll","flickPositive","gesture","swipeStart","absorbDecelerationKey","lastDeltaXKey","lastDeltaYKey","lastWheelTimeoutKey","postGestureDelayCompleteKey","wheelDistanceKey","wheelSequenceAxisKey","POST_GESTURE_TIME","WHEEL_TIME","TrackpadSwipeMixin","clearTimeout","resetWheelTracking","wheelTimedOut","acceleration","eventBeginsSwipe","targetDimension","performImmediateGesture","handleWheel","Carousel","pointerQuery","mediaQueryList","media","resizeObserver","Observer","entries","entry","clientHeight","clientWidth","connectedCallback","observe","unobserve","ResizeMixin","CenteredStrip","selectionFraction","leadingEdge","dimension","stripContainerDimension","stripContainer","stripDimension","strip","justifyContent","itemBeforeIndex","floor","itemBefore","itemBeforeCenter","itemAfterIndex","itemAfter","itemAfterCenter","center","opacityMinimum","PlainCenteredStripOpacity","transitionDuration","opacityTransitionValue","propertyRegex","definition","substr","mergeSinglePropertyTransition","opacity","opacityRange","opacityMaximum","fractionalIndex","leftIndex","rightIndex","ceil","awayIndex","towardIndex","truncatedSwipeFraction","progress","opacityProgressThroughRange","opacityForItemWithIndex","PlainCarouselMixin","TransitionEffectMixin","TransitionEffect","effectEndTarget","effectTarget","effectPhase","effect","startEffect","CrossfadeStage","visibility","TimerCursorMixin","TimerCursor","cursorTimerDuration","playing","currentIndexForTimer","timerTimeout","play","pause","clearTimer","restartTimer","CarouselSlideshow","CarouselWithThumbnails","src","DateComboBox","calendarPartType","dateTimeFormatOptions","datePriority","dateSelected","timeBias","todayButtonPartType","formatDate","ctrlKey","shiftKey","saveRaiseChangesEvents","parseDate","fullDate","resolvedOptions","abbreviatedDate","todayDay","todayMonth","abbreviatedDay","abbreviatedMonth","abbreviatedYear","setFullYear","dragSelect","todayButton","userChangedDate","blur","formattedDate","probablyMobile","parsedDate","DialogModalityMixin","FocusCaptureMixin","Overlay","Drawer","ModalBackdrop","drawerTransitionDuration","fromEdge","gripSize","openedFraction","openedRenderedFraction","persistent","frame","backdrop","openedOrSwiping","pointerEvents","clip","clipPath","translateFraction","transitionFraction","duration","translatePercentage","gripValue","translateValue","edgeCoordinates","mapFromEdgeToOppositeEdge","mapFromEdgetoJustifyContent","fromLeadingEdge","almost1","expectPositiveSwipe","lowerBound","upperBound","fromLeftEdge","fromRightEdge","frameContent","PlainDrawerMixin","PlainModalOverlayMixin","DrawerWithGrip","gripPartType","grip","mapFromEdgeToGrid","mapFromEdgeToGripCell","gripContainer","grid","gripWorkaround","gridArea","grippedContent","PopupButton","DropdownList","applyElementData","source","clones","cloneNode","Menu","valuePartType","sourcePartType","replace","_templateObject3","AriaRoleMixin","OptionList","highlightCurrentItem","flashCurrentItem","keyboardActive","focusVisible","probablyDesktop","flashDuration","current","OpenCloseMixin","FilterListBox","availableItemFlags","highlightTextInItem","textToHighlight","normalize","part1","part2","substring","part3","fragment","createDocumentFragment","strong","Text","itemMatchesFilter","normalizedText","normalizedFilter","available","scrollCurrentItemIntoView","removeAccents","FilterComboBox","PlainListBoxMixin","ItemsMultiSelect","newSelectedFlags","Array","fill","toggleSelectedFlag","ItemsMultiSelectMixin","MultiSelectAPI","MultiSelectAPIMixin","targetIndex","mozUserSelect","msUserSelect","webkitUserSelect","userSelect","MultiSelectToggleMixin","MultiSelectValueAPI","values","MultiSelectValueAPIMixin","NumberSpinBox","SpinBox","step","formatValue","precision","toFixed","parseValue","parsed","valid","validationMessage","canGoUp","canGoDown","stepDown","stepUp","PlainSpinBoxMixin","CurrentMixin","DisabledMixin","Slideshow","PlayControlsMixin","PlayControls","controlButtonPartType","click","previousButton","playButton","nextButton","playControls","controlButton","SlideshowWithPlayControls","crossfadeContainer","PlainPlayControlsMixin","Popup","mostRecentTooltipButton","documentKeydownListenerKey","TooltipButton","listenIfOpenAndConnected","popupDirection","handleKeydown","isConnected","bind","internal","internalImport","PlainInput","PlainPopup","PlainOpenCloseToggle","outline","popupLayout","w","popupAbove","PlainListBox"],"sourceRoot":""}