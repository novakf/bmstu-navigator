{"version":3,"file":"static/js/1929.4f67a95e.chunk.js","mappings":"2LASA,MAAMA,UAAiBC,EAAAA,EAKrB,IAAKC,EAAAA,gBACH,OAAOC,OAAOC,OAAOC,MAAMH,EAAAA,cAAe,CACxCI,cAAeC,EAAAA,QACfC,IAAK,WACLC,UAAW,QAEf,CAMA,IAAKC,EAAAA,GAASC,YACZ,MAAMC,EAASP,MAAMK,EAAAA,GAASC,UAyB9B,OAxBeC,EAAOC,QAAQC,eAAe,UAEtCC,QAAQC,EAAAA,EAAaC,KAAIC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,wFAE5BC,WAAU,IAEdR,EAAOC,QAAQQ,OACbC,EAAAA,EAAaL,KAAIM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,mWAefN,SAEGD,CACT,CAMA,6BAAWY,GACT,MAAO,CAAC,QAAS,MAAO,YAAa,QACvC,CASAC,wBAAAA,CAA0BC,EAAMC,EAAUC,GACxC,GAAID,IAAaC,EACjB,OAAQF,GACN,IAAK,QAEH,MACF,IAAK,MACHG,KAAKrB,IAAMoB,EACX,MACF,IAAK,YACHC,KAAKpB,UAAYmB,EACjB,MACF,QACEvB,MAAMoB,yBAAyBC,EAAMC,EAAUC,GAGrD,CAOA,CAAClB,EAAAA,GAASoB,QAASC,GACjB1B,MAAMK,EAAAA,GAASoB,QAAQC,GACnBF,KAAKnB,EAAAA,GAASsB,eAChBH,KAAKI,KAAOJ,KAAKK,WAAWC,cAAc,OAC1CN,KAAKO,OAASP,KAAKK,WAAWpB,eAAe,UAE3CiB,EAAQvB,KACVqB,KAAKI,KAAKI,aAAa,MAAOR,KAAKnB,EAAAA,GAAS4B,OAAO9B,KAEjDuB,EAAQtB,YACVoB,KAAKO,OAAOF,WAAWC,cAAc,mBAAmBI,MAAMC,MAAQX,KAAKnB,EAAAA,GAAS4B,OAAO7B,WAEzFsB,EAAQzB,eAEVuB,KAAKY,iBAAiB,SAAUC,IAAO,IAADC,EAAAC,EACpCF,EAAEG,iBACF,MAAMC,EAAgB,QAAXH,EAAGD,EAAEK,cAAM,IAAAJ,GAAa,QAAbC,EAARD,EAAUK,mBAAW,IAAAJ,OAAb,EAARA,EAAuBK,aAAa,SAClD,GAAIH,EAAO,CACT,MAAMI,EAAa,IAAIC,YAAY,SAAU,CAAEJ,OAAQ,CAAED,WACzDjB,KAAKuB,cAAcF,EACrB,IAGN,CAMA,OAAI1C,GACF,OAAOqB,KAAKnB,EAAAA,GAAS4B,OAAO9B,GAC9B,CAMA,OAAIA,CAAKA,GACPqB,KAAKnB,EAAAA,GAAS2C,UAAU,CAAE7C,OAC5B,CAMA,aAAIC,GACF,OAAOoB,KAAKnB,EAAAA,GAAS4B,OAAO7B,SAC9B,CAMA,aAAIA,CAAWA,GACboB,KAAKnB,EAAAA,GAAS2C,UAAU,CAAE5C,aAC5B,CAMA,SAAIqC,GACF,OAAOjB,KAAKnB,EAAAA,GAAS4B,OAAOQ,KAC9B,CAMA,SAAIA,CAAOA,GACTjB,KAAKnB,EAAAA,GAAS2C,UAAU,CAAEP,SAC5B,EAIFQ,eAAeC,OAAO,cAAevD,E","sources":["svgedit/editor/components/seDropdown.js"],"sourcesContent":["import ListComboBox from 'elix/define/ListComboBox.js'\nimport { defaultState } from 'elix/src/base/internal.js'\nimport { templateFrom, fragmentFrom } from 'elix/src/core/htmlLiterals.js'\nimport { internal } from 'elix'\nimport NumberSpinBox from '../dialogs/se-elix/define/NumberSpinBox.js'\n\n/**\n * @class Dropdown\n */\nclass Dropdown extends ListComboBox {\n  /**\n    * @function get\n    * @returns {PlainObject}\n    */\n  get [defaultState] () {\n    return Object.assign(super[defaultState], {\n      inputPartType: NumberSpinBox,\n      src: 'logo.svg',\n      inputsize: '100%'\n    })\n  }\n\n  /**\n    * @function get\n    * @returns {PlainObject}\n  */\n  get [internal.template] () {\n    const result = super[internal.template]\n    const source = result.content.getElementById('source')\n    // add a icon before our dropdown\n    source.prepend(fragmentFrom.html`\n      <img src=\"dropdown.svg\" alt=\"icon\" width=\"18\" height=\"18\"></img>\n      `.cloneNode(true))\n    // change the style so it fits in our toolbar\n    result.content.append(\n      templateFrom.html`\n        <style>\n        [part~=\"source\"] {\n          grid-template-columns: 20px 1fr auto;\n        }\n        ::slotted(*) {\n          padding: 4px;\n          background: #E8E8E8;\n          border: 1px solid #5a6162;\n          width: 100%;\n        }\n        [part~=\"popup\"] {\n          width: 150%;\n        }\n        </style>\n      `.content\n    )\n    return result\n  }\n\n  /**\n   * @function observedAttributes\n   * @returns {any} observed\n   */\n  static get observedAttributes () {\n    return ['title', 'src', 'inputsize', 'value']\n  }\n\n  /**\n   * @function attributeChangedCallback\n   * @param {string} name\n   * @param {string} oldValue\n   * @param {string} newValue\n   * @returns {void}\n   */\n  attributeChangedCallback (name, oldValue, newValue) {\n    if (oldValue === newValue) return\n    switch (name) {\n      case 'title':\n      // this.$span.setAttribute('title', `${newValue} ${shortcut ? `[${shortcut}]` : ''}`);\n        break\n      case 'src':\n        this.src = newValue\n        break\n      case 'inputsize':\n        this.inputsize = newValue\n        break\n      default:\n        super.attributeChangedCallback(name, oldValue, newValue)\n        break\n    }\n  }\n\n  /**\n    * @function [internal.render]\n    * @param {PlainObject} changed\n    * @returns {void}\n    */\n  [internal.render] (changed) {\n    super[internal.render](changed)\n    if (this[internal.firstRender]) {\n      this.$img = this.shadowRoot.querySelector('img')\n      this.$input = this.shadowRoot.getElementById('input')\n    }\n    if (changed.src) {\n      this.$img.setAttribute('src', this[internal.state].src)\n    }\n    if (changed.inputsize) {\n      this.$input.shadowRoot.querySelector('[part~=\"input\"]').style.width = this[internal.state].inputsize\n    }\n    if (changed.inputPartType) {\n      // Wire up handler on new input.\n      this.addEventListener('close', (e) => {\n        e.preventDefault()\n        const value = e.detail?.closeResult?.getAttribute('value')\n        if (value) {\n          const closeEvent = new CustomEvent('change', { detail: { value } })\n          this.dispatchEvent(closeEvent)\n        }\n      })\n    }\n  }\n\n  /**\n   * @function src\n   * @returns {string} src\n   */\n  get src () {\n    return this[internal.state].src\n  }\n\n  /**\n   * @function src\n   * @returns {void}\n   */\n  set src (src) {\n    this[internal.setState]({ src })\n  }\n\n  /**\n   * @function inputsize\n   * @returns {string} src\n   */\n  get inputsize () {\n    return this[internal.state].inputsize\n  }\n\n  /**\n   * @function src\n   * @returns {void}\n   */\n  set inputsize (inputsize) {\n    this[internal.setState]({ inputsize })\n  }\n\n  /**\n   * @function value\n   * @returns {string} src\n   */\n  get value () {\n    return this[internal.state].value\n  }\n\n  /**\n   * @function value\n   * @returns {void}\n   */\n  set value (value) {\n    this[internal.setState]({ value })\n  }\n}\n\n// Register\ncustomElements.define('se-dropdown', Dropdown)\n\n/*\n{TODO\n    min: 0.001, max: 10000, step: 50, stepfunc: stepZoom,\n  function stepZoom (elem, step) {\n    const origVal = Number(elem.value);\n    if (origVal === 0) { return 100; }\n    const sugVal = origVal + step;\n    if (step === 0) { return origVal; }\n\n    if (origVal >= 100) {\n      return sugVal;\n    }\n    if (sugVal >= origVal) {\n      return origVal * 2;\n    }\n    return origVal / 2;\n  }\n*/\n"],"names":["Dropdown","ListComboBox","defaultState","Object","assign","super","inputPartType","NumberSpinBox","src","inputsize","internal","template","result","content","getElementById","prepend","fragmentFrom","html","_templateObject","_taggedTemplateLiteral","cloneNode","append","templateFrom","_templateObject2","observedAttributes","attributeChangedCallback","name","oldValue","newValue","this","render","changed","firstRender","$img","shadowRoot","querySelector","$input","setAttribute","state","style","width","addEventListener","e","_e$detail","_e$detail$closeResult","preventDefault","value","detail","closeResult","getAttribute","closeEvent","CustomEvent","dispatchEvent","setState","customElements","define"],"sourceRoot":""}