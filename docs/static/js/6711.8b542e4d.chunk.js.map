{"version":3,"file":"static/js/6711.8b542e4d.chunk.js","mappings":"+JAKA,IAAIA,GAAU,EACd,MAAMC,EAAa,GACbC,OAAmCC,IAAxBC,OAAOC,aAEXC,EAAW,SAAUC,EAAQC,EAASC,EAAQC,EAASC,EAAOC,GAEpEZ,GACHa,SAASC,iBAAiBZ,EAAW,YAAc,aAAa,SAAUa,GACxE,IAAIC,EAAID,EACJA,EAAEE,UACJD,EAAID,EAAEE,QAAQ,IAIhB,IAAK,IAAIC,EAAI,EAAGA,EAAIjB,EAAWkB,OAAQD,IACrCjB,EAAWiB,GAAGF,EAAEI,QAASJ,EAAEK,QAE/B,IAGFrB,GAAU,EACV,IAAIsB,GAAW,EAAWC,GAAa,EACnCC,EAAS,EAAOC,EAAS,EAAOC,EAAQ,EAAOC,EAAQ,EAI3DnB,EAAQM,iBAAiBZ,EAAW,aAAe,aAAa,SAAUa,GAGxE,GAFAA,EAAEa,kBACFb,EAAEc,iBACiC,UAA/BtB,EAAOuB,QAAQC,YACjB,OAGF,IAAIf,EAAID,EACJA,EAAEE,UACJD,EAAID,EAAEE,QAAQ,IAGhBK,GAAW,EACXE,EAASjB,EAAOyB,WAAahB,EAAEI,QAC/BK,EAASlB,EAAO0B,UAAYjB,EAAEK,OAChC,IAGAR,SAASC,iBAAiBZ,EAAW,WAAa,WAAW,WACvDS,GAASY,GACXZ,EAAMJ,EAAQE,EAAQyB,SAAS3B,EAAO4B,MAAMC,MAAOF,SAAS3B,EAAO4B,MAAME,MAG3Ef,GAAW,EACXC,GAAa,CACf,IAGAV,SAASC,iBAAiBZ,EAAW,YAAc,aAAa,WAC1DU,GAAUW,GACZX,EAAOL,EAAQ2B,SAAS3B,EAAO4B,MAAMC,MAAOF,SAAS3B,EAAO4B,MAAME,KAEtE,IAGApC,EAAWqC,MAAK,SAAeC,EAAGC,GAChC,GAAKlB,EAAL,CAeA,GAXKC,IACHA,GAAa,EACTb,GACFA,EAAQH,EAAQmB,EAAOC,IAI3BD,EAAQa,EAAIf,EACZG,EAAQa,EAAIf,EAGwB,SAAhClB,EAAOuB,QAAQW,aAAyB,CAC1C,GAAIf,EAAQ,GAAKA,GAAStB,OAAOsC,WAAanC,EAAOoC,YACnD,OAEF,GAAIhB,EAAQ,GAAKA,GAASvB,OAAOwC,YAAcrC,EAAOsC,aACpD,MAEJ,CAEAtC,EAAO4B,MAAMC,KAAOV,EAAQ,KAC5BnB,EAAO4B,MAAME,IAAMV,EAAQ,IAvB3B,CAwBF,GACF,C","sources":["svgedit/editor/extensions/ext-overview_window/dragmove/dragmove.js"],"sourcesContent":["// https://github.com/knadh/dragmove.js\n// Kailash Nadh (c) 2020.\n// MIT License.\n// can't use npm version as the dragmove is different.\n\nlet _loaded = false\nconst _callbacks = []\nconst _isTouch = window.ontouchstart !== undefined\n\nexport const dragmove = function (target, handler, parent, onStart, onEnd, onDrag) {\n  // Register a global event to capture mouse moves (once).\n  if (!_loaded) {\n    document.addEventListener(_isTouch ? 'touchmove' : 'mousemove', function (e) {\n      let c = e\n      if (e.touches) {\n        c = e.touches[0]\n      }\n\n      // On mouse move, dispatch the coords to all registered callbacks.\n      for (let i = 0; i < _callbacks.length; i++) {\n        _callbacks[i](c.clientX, c.clientY)\n      }\n    })\n  }\n\n  _loaded = true\n  let isMoving = false; let hasStarted = false\n  let startX = 0; let startY = 0; let lastX = 0; let lastY = 0\n\n  // On the first click and hold, record the offset of the pointer in relation\n  // to the point of click inside the element.\n  handler.addEventListener(_isTouch ? 'touchstart' : 'mousedown', function (e) {\n    e.stopPropagation()\n    e.preventDefault()\n    if (target.dataset.dragEnabled === 'false') {\n      return\n    }\n\n    let c = e\n    if (e.touches) {\n      c = e.touches[0]\n    }\n\n    isMoving = true\n    startX = target.offsetLeft - c.clientX\n    startY = target.offsetTop - c.clientY\n  })\n\n  // On leaving click, stop moving.\n  document.addEventListener(_isTouch ? 'touchend' : 'mouseup', function () {\n    if (onEnd && hasStarted) {\n      onEnd(target, parent, parseInt(target.style.left), parseInt(target.style.top))\n    }\n\n    isMoving = false\n    hasStarted = false\n  })\n\n  // On leaving click, stop moving.\n  document.addEventListener(_isTouch ? 'touchmove' : 'mousemove', function () {\n    if (onDrag && hasStarted) {\n      onDrag(target, parseInt(target.style.left), parseInt(target.style.top))\n    }\n  })\n\n  // Register mouse-move callback to move the element.\n  _callbacks.push(function move (x, y) {\n    if (!isMoving) {\n      return\n    }\n\n    if (!hasStarted) {\n      hasStarted = true\n      if (onStart) {\n        onStart(target, lastX, lastY)\n      }\n    }\n\n    lastX = x + startX\n    lastY = y + startY\n\n    // If boundary checking is on, don't let the element cross the viewport.\n    if (target.dataset.dragBoundary === 'true') {\n      if (lastX < 1 || lastX >= window.innerWidth - target.offsetWidth) {\n        return\n      }\n      if (lastY < 1 || lastY >= window.innerHeight - target.offsetHeight) {\n        return\n      }\n    }\n\n    target.style.left = lastX + 'px'\n    target.style.top = lastY + 'px'\n  })\n}\n\nexport { dragmove as default }\n"],"names":["_loaded","_callbacks","_isTouch","undefined","window","ontouchstart","dragmove","target","handler","parent","onStart","onEnd","onDrag","document","addEventListener","e","c","touches","i","length","clientX","clientY","isMoving","hasStarted","startX","startY","lastX","lastY","stopPropagation","preventDefault","dataset","dragEnabled","offsetLeft","offsetTop","parseInt","style","left","top","push","x","y","dragBoundary","innerWidth","offsetWidth","innerHeight","offsetHeight"],"sourceRoot":""}